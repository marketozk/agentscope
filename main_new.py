"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
–í—Å—è –ª–æ–≥–∏–∫–∞ –∏ –º–æ—â–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –≤ RegistrationOrchestrator
"""
import asyncio
import os
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö AgentScope –∞–≥–µ–Ω—Ç–æ–≤
try:
    from agentscope.model import DashScopeChatModel
    from agentscope.memory import InMemoryMemory
    from src.element_finder_agent import ElementFinderAgent, ElementSearchResult
    from src.error_recovery_agent import ErrorRecoveryAgent, RecoveryResult
    from src.form_filler_agent import FormFillerAgent, FormFillResult
    from src.checkbox_agent import CheckboxAgent, CheckboxActionResult
    from src.page_analyzer_agent import PageAnalyzerAgent, PageAnalysis
    from src.registration_orchestrator import RegistrationOrchestrator
    AGENTSCOPE_AVAILABLE = True
    print("‚úÖ AgentScope –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    AGENTSCOPE_AVAILABLE = False
    print(f"‚ùå AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def main():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å - –≤—Å—è –º–æ—â–Ω–æ—Å—Ç—å –≤ RegistrationOrchestrator"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å AgentScope –∞–≥–µ–Ω—Ç–∞–º–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AgentScope
    if not AGENTSCOPE_AVAILABLE:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AgentScope: pip install agentscope")
        return False
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "gemini_api_key": os.getenv("GEMINI_API_KEY"),
        "headless_mode": False,
        "timeout": 30000,
        "retry_attempts": 3,
        "max_steps": 25,
        "screenshot_on_error": True
    }
    
    if not config["gemini_api_key"]:
        print("‚ùå Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    # –°–æ–∑–¥–∞—ë–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
    orchestrator = RegistrationOrchestrator(config=config)
    
    referral_link = "https://airtable.com/invite/r/ovoAP1zR"
    print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {referral_link}")
    
    # –í—Å—è –º–æ—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ø–µ—Ä—å –≤ orchestrator
    print("üéØ –ó–∞–ø—É—Å–∫ –í–°–ï–ô –ú–û–©–ù–û–°–¢–ò —á–µ—Ä–µ–∑ RegistrationOrchestrator...")
    result = await orchestrator.start_registration(
        registration_url=referral_link,
        user_data={}  # Orchestrator —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result and result.success:
        print("\nüéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {result.account_created}")
        print(f"‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result.email_verified}")
        if result.credentials:
            print(f"üìß Email: {result.credentials.get('email', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        return True
    else:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        if result and result.errors:
            error_msg = "; ".join(result.errors)
        print(f"\n‚ùå –ú–ò–°–°–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {error_msg}")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
