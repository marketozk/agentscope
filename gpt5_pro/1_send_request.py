"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ GPT-5 Pro
"""
import requests
import json
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
env_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

# API –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞
API_KEY = os.environ.get("OPENAI_API_KEY", "your-api-key-here")

print(f"üîë API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {API_KEY[:10]}...{API_KEY[-10:] if len(API_KEY) > 20 else ''}")

def test_gpt5_pro_via_responses_correct():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT-5 Pro —á–µ—Ä–µ–∑ v1/responses —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'input'"""
    print("=" * 60)
    print("–¢–ï–°–¢ GPT-5 PRO –ß–ï–†–ï–ó V1/RESPONSES (–ü–†–ê–í–ò–õ–¨–ù–´–ô)")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/responses"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'input' –≤–º–µ—Å—Ç–æ 'messages' –¥–ª—è Responses API
    payload = {
        "model": "gpt-5-pro",
        "input": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–∞—è —Ç—ã –º–æ–¥–µ–ª—å? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
            }
        ]
    }
    
    try:
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ gpt-5-pro...")
        print(f"Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}\n")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!\n")
            print("üì• –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:")
            print("-" * 60)
            print(json.dumps(data, indent=2, ensure_ascii=False))
            print("-" * 60)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if 'output' in data:
                print("\nüí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
                print(data['output'])
            
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_gpt5_chat_latest():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gpt-5-chat-latest (–†–ê–ë–û–¢–ê–ï–¢!)"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ GPT-5-CHAT-LATEST ‚úì")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-5-chat-latest",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
            },
            {
                "role": "user",
                "content": "–†–µ—à–∏ –∑–∞–¥–∞—á—É: –£ –ú–∞—à–∏ –±—ã–ª–æ 5 —è–±–ª–æ–∫, –æ–Ω–∞ –æ—Ç–¥–∞–ª–∞ 2 –ü–µ—Ç–µ. –ü–µ—Ç—è —Å—ä–µ–ª –ø–æ–ª–æ–≤–∏–Ω—É —Å–≤–æ–∏—Ö —è–±–ª–æ–∫. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å —É –ü–µ—Ç–∏?"
            }
        ],
        "max_completion_tokens": 200,
        "temperature": 0.7
    }
    
    try:
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏...")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!\n")
            print("üì• –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:")
            print("-" * 60)
            answer = data['choices'][0]['message']['content']
            print(answer)
            print("-" * 60)
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: {data.get('model', 'N/A')}")
            print(f"  ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {data['usage']['total_tokens']}")
            print(f"  ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {data['choices'][0]['finish_reason']}")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_gpt5():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π gpt-5 (–†–ê–ë–û–¢–ê–ï–¢!)"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ GPT-5 (–ë–ê–ó–û–í–ê–Ø) ‚úì")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-5",
        "messages": [
            {
                "role": "user",
                "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π Python –∫–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5"
            }
        ],
        "max_completion_tokens": 300
    }
    
    try:
        print("\nüì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞...")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!\n")
            print("üì• –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:")
            print("-" * 60)
            answer = data['choices'][0]['message']['content']
            print(answer)
            print("-" * 60)
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: {data.get('model', 'N/A')}")
            print(f"  ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {data['usage']['total_tokens']}")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_gpt5_mini():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gpt-5-mini"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ GPT-5-MINI")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-5-mini",
        "messages": [
            {
                "role": "user",
                "content": "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
            }
        ],
        "max_completion_tokens": 50
    }
    
    try:
        print("\nüì§ –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è mini –º–æ–¥–µ–ª–∏...")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!\n")
            print(f"üì• –û—Ç–≤–µ—Ç: {data['choices'][0]['message']['content']}")
            print(f"üìä –ú–æ–¥–µ–ª—å: {data.get('model', 'N/A')}")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_o1_pro_correct():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ o1-pro —á–µ—Ä–µ–∑ v1/responses —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ O1-PRO –ß–ï–†–ï–ó V1/RESPONSES (–ü–†–ê–í–ò–õ–¨–ù–´–ô)")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/responses"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "o1-pro",
        "input": [
            {
                "role": "user",
                "content": "–†–µ—à–∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É: –£ –º–µ–Ω—è –µ—Å—Ç—å 3 –∫–æ—Ä–æ–±–∫–∏. –í –ø–µ—Ä–≤–æ–π 2 —à–∞—Ä–∞, –≤–æ –≤—Ç–æ—Ä–æ–π –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –≤ –ø–µ—Ä–≤–æ–π. –í —Ç—Ä–µ—Ç—å–µ–π –Ω–∞ 1 –º–µ–Ω—å—à–µ, —á–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —à–∞—Ä–æ–≤?"
            }
        ]
    }
    
    try:
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –∫ o1-pro...")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!\n")
            print("üì• –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:")
            print("-" * 60)
            print(json.dumps(data, indent=2, ensure_ascii=False))
            print("-" * 60)
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def demo_creative_writing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π GPT-5-chat-latest"""
    print("\n" + "=" * 60)
    print("üé® –î–ï–ú–û: –ö–†–ï–ê–¢–ò–í–ù–û–ï –ü–ò–°–¨–ú–û (GPT-5-CHAT-LATEST)")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-5-chat-latest",
        "messages": [
            {
                "role": "user",
                "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ö–∞–π–∫—É –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ Python"
            }
        ],
        "max_completion_tokens": 100,
        "temperature": 0.9  # –í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    }
    
    try:
        print("\nüì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ...")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –•–∞–π–∫—É —Å–æ–∑–¥–∞–Ω–æ!\n")
            print("üìù –•–ê–ô–ö–£:")
            print("-" * 60)
            print(data['choices'][0]['message']['content'])
            print("-" * 60)
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def send_prompt_to_gpt5_pro(prompt_text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ GPT-5 Pro –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print("=" * 60)
    print("–û–¢–ü–†–ê–í–ö–ê –í GPT-5 PRO")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/responses"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-5-pro",
        "input": [
            {
                "role": "user",
                "content": prompt_text
            }
        ]
    }
    
    try:
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ gpt-5-pro...")
        print(f"üìè –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úì –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç
            timestamp = __import__('datetime').datetime.now().strftime("%Y%m%d_%H%M%S")
            json_filename = f"gpt5_pro_response_{timestamp}.json"
            
            with open(json_filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {json_filename}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            output_text = None
            if 'output' in data and isinstance(data['output'], list):
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ output
                for item in data['output']:
                    if item.get('type') == 'message' and item.get('role') == 'assistant':
                        content = item.get('content', [])
                        if content and isinstance(content, list):
                            for c in content:
                                if c.get('type') == 'output_text':
                                    output_text = c.get('text', '')
                                    break
                    if output_text:
                        break
            
            if output_text:
                txt_filename = f"gpt5_pro_analysis_{timestamp}.txt"
                
                with open(txt_filename, 'w', encoding='utf-8') as f:
                    f.write(output_text)
                
                print(f"üìÑ –¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {txt_filename}")
                print("\n" + "=" * 60)
                print("üí¨ –ê–ù–ê–õ–ò–ó –û–¢ GPT-5 PRO:")
                print("=" * 60)
                print(output_text[:1000] + "..." if len(output_text) > 1000 else output_text)
                print("=" * 60)
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
            return False
            
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ GPT-5 Pro"""
    print("\n" + "üéØ" * 30)
    print("  –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –í GPT-5 PRO")
    print("üéØ" * 30)
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
    prompt_file = "0_prompt.txt"
    
    if not os.path.exists(prompt_file):
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª {prompt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(prompt_file, 'r', encoding='utf-8') as f:
        prompt_text = f.read()
    
    print(f"\nüìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω –ø—Ä–æ–º–ø—Ç –∏–∑ {prompt_file}")
    print(f"üìè –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    print("\n" + "üöÄ" * 30)
    print("  –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê")
    print("üöÄ" * 30)
    
    success = send_prompt_to_gpt5_pro(prompt_text)
    
    if success:
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("ÔøΩ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env")

if __name__ == "__main__":
    main()
