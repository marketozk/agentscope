"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å AgentScope ReAct –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
–¢–û–õ–¨–ö–û –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –ë–ï–ó –°–¢–ê–†–û–ì–û –ö–û–î–ê
"""
import asyncio
import os
from playwright.async_api import async_playwright
import google.generativeai as genai
from PIL import Image
import io
import json
from dotenv import load_dotenv
import random
import string
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö AgentScope –∞–≥–µ–Ω—Ç–æ–≤
try:
    from agentscope.model import DashScopeChatModel
    from agentscope.memory import InMemoryMemory
    from src.element_finder_agent import ElementFinderAgent, ElementSearchResult
    from src.error_recovery_agent import ErrorRecoveryAgent, RecoveryResult
    from src.form_filler_agent import FormFillerAgent, FormFillResult
    from src.checkbox_agent import CheckboxAgent, CheckboxActionResult
    from src.page_analyzer_agent import PageAnalyzerAgent, PageAnalysis
    from src.registration_orchestrator import RegistrationOrchestrator
    AGENTSCOPE_AVAILABLE = True
    print("‚úÖ AgentScope –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    AGENTSCOPE_AVAILABLE = False
    print(f"‚ùå AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    raise RuntimeError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: AgentScope –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã!")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from src.temp_mail_agent import TempMailAgent
from src.email_verification_agent import EmailVerificationAgent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class IntelligentRegistrationAgent:
    def __init__(self, gemini_api_key: str):
        """–ü—Ä–æ—Å—Ç–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π –∞–≥–µ–Ω—Ç"""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        genai.configure(api_key=gemini_api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.context = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ AgentScope –∞–≥–µ–Ω—Ç–æ–≤
        if not AGENTSCOPE_AVAILABLE:
            raise RuntimeError("‚ùå AgentScope –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã!")
        
        # –°–æ–∑–¥–∞—ë–º RegistrationOrchestrator - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        try:
            config = {
                "gemini_api_key": gemini_api_key,
                "headless_mode": False,
                "timeout": 30000,
                "retry_attempts": 3
            }
            # Orchestrator —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            self.registration_orchestrator = RegistrationOrchestrator(config=config)
            print("‚úÖ RegistrationOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RegistrationOrchestrator: {e}")
            raise

    async def register_with_orchestrator(self, referral_link: str):
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RegistrationOrchestrator
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
        """
        print("\nüé≠ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó –ê–ì–ï–ù–¢–´")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AgentScope –¥–æ—Å—Ç—É–ø–µ–Ω
        if not AGENTSCOPE_AVAILABLE:
            raise RuntimeError("‚ùå AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç AgentScope.")
        
        if not self.registration_orchestrator:
            raise RuntimeError("‚ùå RegistrationOrchestrator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            await self.generate_user_data()
            
            # –ü–µ—Ä–µ–¥–∞–µ–º URL –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            user_data = {
                "registration_url": referral_link,
                "user_context": self.context.copy()
            }
            
            print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ RegistrationOrchestrator...")
            result = await self.registration_orchestrator.start_registration(
                registration_url=referral_link,
                user_data=self.context
            )
            
            # result - —ç—Ç–æ –æ–±—ä–µ–∫—Ç RegistrationResult, –Ω–µ dict
            if result and result.success:
                print("\nüéâ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
                print(f"üìß Email: {self.context.get('email', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üîó URL: {referral_link}")
                print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {result.account_created}")
                print(f"‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result.email_verified}")
                return True
            else:
                error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                if result and result.errors:
                    error_msg = "; ".join(result.errors)
                print(f"\n‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                return False
                
        except Exception as e:
            print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False

    async def generate_user_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        timestamp = int(datetime.now().timestamp())
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=4))
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        first_names = ["Alex", "Jordan", "Taylor", "Morgan", "Casey", "Riley", "Avery", "Quinn"]
        last_names = ["Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis"]
        
        first_name = random.choice(first_names)
        last_name = random.choice(last_names)
        username = f"{first_name.lower()}{last_name.lower()}{random_suffix}"
        
        self.context = {
            'email': f"{username}@tempmail.com",
            'password': f"SecurePass{timestamp}!",
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'full_name': f"{first_name} {last_name}",
            'phone': f"+1555{random.randint(1000000, 9999999)}",
            'birth_date': f"{random.randint(1990, 2000)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}",
            'company': f"{random.choice(['TechCorp', 'InnovateLab', 'DigitalSoft', 'CloudTech'])}",
            'website': f"https://www.{username}-portfolio.com",
            'country': "United States",
            'city': random.choice(["New York", "Los Angeles", "Chicago", "Houston", "Phoenix"]),
            'zip_code': f"{random.randint(10000, 99999)}",
            'address': f"{random.randint(1, 999)} {random.choice(['Main', 'Oak', 'Pine', 'Elm'])} Street",
            'gender': random.choice(["Male", "Female", "Other"]),
        }
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è: {self.context['full_name']} ({self.context['email']})")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¢–û–õ–¨–ö–û –∞–≥–µ–Ω—Ç—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å AgentScope –∞–≥–µ–Ω—Ç–∞–º–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AgentScope
    if not AGENTSCOPE_AVAILABLE:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AgentScope: pip install agentscope")
        return
    
    agent = IntelligentRegistrationAgent(
        gemini_api_key=os.getenv("GEMINI_API_KEY")
    )
    
    referral_link = "https://airtable.com/invite/r/ovoAP1zR"
    print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {referral_link}")
    
    # üé≠ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û –ù–û–í–´–ô –ú–ï–¢–û–î –° ORCHESTRATOR!
    print("üéØ –ó–∞–ø—É—Å–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ RegistrationOrchestrator...")
    success = await agent.register_with_orchestrator(referral_link)
    
    if success:
        print("üéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
    else:
        print("‚ùå –ú–ò–°–°–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê!")

if __name__ == "__main__":
    asyncio.run(main())
