"""
üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–°–°–û–í–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
"""
import json
import time
import os
from pathlib import Path
from datetime import datetime


def find_latest_log():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥-—Ñ–∞–π–ª"""
    logs_dir = Path(__file__).parent / "logs"
    if not logs_dir.exists():
        return None
    
    log_files = list(logs_dir.glob("scheduler_*.json"))
    if not log_files:
        return None
    return max(log_files, key=lambda p: p.stat().st_mtime)


def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')


def display_stats(log_file):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            stats = json.load(f)
    except:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª")
        return
    
    clear_screen()
    
    print(f"{'=' * 70}")
    print(f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–°–°–û–í–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE")
    print(f"{'=' * 70}")
    print(f"üìÅ –õ–æ–≥: {log_file.name}")
    print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    total = stats.get("total", 0)
    success = stats.get("success", 0)
    failed = stats.get("failed", 0)
    errors = stats.get("errors", 0)
    
    if total > 0:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress = total / 20 * 100
        bar_length = 40
        filled = int(bar_length * total / 20)
        bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
        
        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {total}/20 ({progress:.0f}%)")
        print()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success:2d} ({success/total*100:5.1f}%)")
        print(f"‚ö†Ô∏è  –ù–µ—É–¥–∞—á–Ω–æ: {failed:2d} ({failed/total*100:5.1f}%)")
        print(f"‚ùå –û—à–∏–±–æ–∫:  {errors:2d} ({errors/total*100:5.1f}%)")
        
        # –í—Ä–µ–º—è
        if stats.get("start_time"):
            start = datetime.fromisoformat(stats["start_time"])
            elapsed = (datetime.now() - start).total_seconds()
            print(f"\n‚è±Ô∏è  –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed/60:.1f} –º–∏–Ω")
            
            # –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            if total > 0:
                avg_time_per_run = elapsed / total
                remaining_runs = 20 - total
                estimated_remaining = avg_time_per_run * remaining_runs
                print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å (–ø—Ä–∏–º–µ—Ä–Ω–æ): {estimated_remaining/60:.1f} –º–∏–Ω")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—É—Å–∫–æ–≤
        runs = stats.get("runs", [])
        if runs:
            print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–£–°–ö–ò:")
            print(f"{'':3} {'–°—Ç–∞—Ç—É—Å':6} {'Email':35} {'–í—Ä–µ–º—è':10}")
            print(f"{'-' * 60}")
            
            for run in runs[-5:]:
                status = "‚úÖ OK" if run.get("success") else "‚ùå FAIL"
                email = run.get("email", "N/A")[:33]
                duration = run.get("duration", 0)
                run_num = run.get("run_number", 0)
                
                print(f"#{run_num:2d} {status:6} {email:35} {duration:6.1f}—Å")
    else:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    print(f"\n{'=' * 70}")
    print("–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")


def main():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞...")
    
    try:
        while True:
            log_file = find_latest_log()
            if log_file:
                display_stats(log_file)
            else:
                clear_screen()
                print("‚ö†Ô∏è  –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")
                print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ scheduler.py –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
            
            time.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
