"""
ü§ñ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ú–ê–°–°–û–í–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE

–ó–∞–ø—É—Å–∫–∞–µ—Ç test_agent3_air.py 20 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ ~1.5 –º–∏–Ω—É—Ç—ã
–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
"""

import asyncio
import random
import subprocess
import sys
from datetime import datetime
from pathlib import Path
import json
import re


class AirtableScheduler:
    def __init__(
        self,
        script_path: str,
        total_runs: int = 20,
        base_interval: float = 90,  # 1.5 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        random_delay: tuple = (10, 30),  # —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10-30 —Å–µ–∫
        retry_on_failure: bool = True,
        max_retries: int = 2,
        retry_delay: int = 60
    ):
        self.script_path = Path(script_path)
        self.total_runs = total_runs
        self.base_interval = base_interval
        self.random_delay = random_delay
        self.retry_on_failure = retry_on_failure
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total": 0,
            "success": 0,
            "failed": 0,
            "errors": 0,
            "start_time": None,
            "end_time": None,
            "runs": []
        }
        
        # –§–∞–π–ª—ã –¥–ª—è –ª–æ–≥–æ–≤
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.log_dir = Path(__file__).parent / "logs"
        self.log_dir.mkdir(exist_ok=True)
        self.log_file = self.log_dir / f"scheduler_{timestamp}.json"
        self.emails_file = Path(__file__).parent / "results" / f"emails_{timestamp}.txt"
        self.emails_file.parent.mkdir(exist_ok=True)
    
    def get_random_interval(self) -> float:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è"""
        delay = random.uniform(*self.random_delay)
        return self.base_interval + delay
    
    def run_registration(self, run_number: int) -> dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
        Returns:
            dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {success, duration, error, email}
        """
        print(f"\n{'=' * 70}")
        print(f"üöÄ –ó–ê–ü–£–°–ö #{run_number}/{self.total_runs}")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print(f"{'=' * 70}\n")
        
        start_time = datetime.now()
        result = {
            "run_number": run_number,
            "start_time": start_time.isoformat(),
            "success": False,
            "duration": 0,
            "error": None,
            "email": None
        }
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            process = subprocess.run(
                [sys.executable, str(self.script_path)],
                capture_output=True,
                text=True,
                timeout=600,  # –ú–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç –Ω–∞ –æ–¥–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                cwd=self.script_path.parent  # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏ Browser_Use
            )
            
            duration = (datetime.now() - start_time).total_seconds()
            result["duration"] = duration
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = process.stdout + process.stderr
            
            # –ò—â–µ–º email –≤ –≤—ã–≤–æ–¥–µ
            email_match = re.search(r'üìß Email: ([^\s]+@[^\s]+)', output)
            if email_match:
                result["email"] = email_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if process.returncode == 0:
                if "‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (unified) –ó–ê–í–ï–†–®–ï–ù–ê" in output:
                    result["success"] = True
                    self.stats["success"] += 1
                    print(f"‚úÖ –£–°–ü–ï–•! Email: {result['email']}")
                    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å ({duration/60:.1f} –º–∏–Ω)")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    if result["email"]:
                        self.save_email(result["email"])
                else:
                    result["success"] = False
                    result["error"] = "Registration not completed"
                    self.stats["failed"] += 1
                    print(f"‚ö†Ô∏è  –ù–ï–£–î–ê–ß–ê: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                result["success"] = False
                result["error"] = f"Exit code: {process.returncode}"
                self.stats["failed"] += 1
                print(f"‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                
        except subprocess.TimeoutExpired:
            result["error"] = "Timeout (10 min exceeded)"
            self.stats["errors"] += 1
            print(f"‚è∞ –¢–ê–ô–ú–ê–£–¢: –ü—Ä–µ–≤—ã—à–µ–Ω–æ 10 –º–∏–Ω—É—Ç")
            
        except Exception as e:
            result["error"] = str(e)
            self.stats["errors"] += 1
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        finally:
            result["end_time"] = datetime.now().isoformat()
            self.stats["runs"].append(result)
            self.stats["total"] += 1
        
        return result
    
    def run_registration_with_retry(self, run_number: int) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ"""
        result = None
        attempts = 0
        
        while attempts <= self.max_retries:
            attempts += 1
            
            if attempts > 1:
                print(f"\nüîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê #{attempts-1}/{self.max_retries} –¥–ª—è –∑–∞–ø—É—Å–∫–∞ #{run_number}")
                print(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                import time
                for remaining in range(self.retry_delay, 0, -10):
                    print(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}—Å...", end='\r')
                    time.sleep(min(10, remaining))
                print()
            
            result = self.run_registration(run_number)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—Ö - –≤—ã—Ö–æ–¥–∏–º
            if result["success"]:
                if attempts > 1:
                    print(f"‚úÖ –£—Å–ø–µ—Ö —Å –ø–æ–ø—ã—Ç–∫–∏ #{attempts}")
                break
            
            # –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ—Ö –∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if attempts <= self.max_retries and self.retry_on_failure:
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempts} –Ω–µ—É–¥–∞—á–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
            else:
                print(f"‚ùå –í—Å–µ {attempts} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ #{run_number}")
        
        return result
    
    def save_email(self, email: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—Å–ø–µ—à–Ω—ã–π email –≤ —Ñ–∞–π–ª"""
        with open(self.emails_file, 'a', encoding='utf-8') as f:
            f.write(f"{email}\n")
    
    async def run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        print(f"\n{'#' * 70}")
        print(f"üéØ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ú–ê–°–°–û–í–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE")
        print(f"{'#' * 70}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {self.total_runs}")
        print(f"‚è±Ô∏è  –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.base_interval}—Å (~{self.base_interval/60:.1f} –º–∏–Ω)")
        print(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {self.random_delay[0]}-{self.random_delay[1]}—Å")
        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ: {'–î–∞' if self.retry_on_failure else '–ù–µ—Ç'} (–º–∞–∫—Å {self.max_retries})")
        print(f"üìÅ –°–∫—Ä–∏–ø—Ç: {self.script_path}")
        print(f"üíæ –õ–æ–≥: {self.log_file}")
        print(f"üìß Email'—ã: {self.emails_file}")
        print(f"{'#' * 70}\n")
        
        input("‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...")
        print()
        
        self.stats["start_time"] = datetime.now().isoformat()
        
        for i in range(1, self.total_runs + 1):
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (—Å retry –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.retry_on_failure:
                result = self.run_registration_with_retry(i)
            else:
                result = self.run_registration(i)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_stats()
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫ - –∂–¥—ë–º
            if i < self.total_runs:
                interval = self.get_random_interval()
                print(f"\nüí§ –û–∂–∏–¥–∞–Ω–∏–µ {interval:.1f}—Å (~{interval/60:.1f} –º–∏–Ω) –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{self.total_runs} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['success']} | ‚ùå –û—à–∏–±–æ–∫: {self.stats['failed'] + self.stats['errors']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
                for remaining in range(int(interval), 0, -10):
                    print(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}—Å...", end='\r')
                    await asyncio.sleep(min(10, remaining))
                print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
        
        self.stats["end_time"] = datetime.now().isoformat()
        self.print_final_report()
        self.save_stats()
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"""
        print(f"\n{'#' * 70}")
        print(f"üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢")
        print(f"{'#' * 70}")
        
        start = datetime.fromisoformat(self.stats["start_time"])
        end = datetime.fromisoformat(self.stats["end_time"])
        total_duration = (end - start).total_seconds()
        
        print(f"‚è∞ –ù–∞—á–∞–ª–æ: {start.strftime('%H:%M:%S')}")
        print(f"‚è∞ –ö–æ–Ω–µ—Ü: {end.strftime('%H:%M:%S')}")
        print(f"‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration/60:.1f} –º–∏–Ω—É—Ç ({total_duration/3600:.2f} —á–∞—Å–æ–≤)")
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {self.stats['total']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['success']} ({self.stats['success']/self.stats['total']*100:.1f}%)")
        print(f"   ‚ö†Ô∏è  –ù–µ—É–¥–∞—á–Ω–æ: {self.stats['failed']} ({self.stats['failed']/self.stats['total']*100:.1f}%)")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']} ({self.stats['errors']/self.stats['total']*100:.1f}%)")
        
        # –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω—ã—Ö email'–æ–≤
        successful_emails = [r["email"] for r in self.stats["runs"] if r["success"] and r["email"]]
        if successful_emails:
            print(f"\nüìß –£–°–ü–ï–®–ù–û –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï EMAIL'–´ ({len(successful_emails)}):")
            for idx, email in enumerate(successful_emails, 1):
                print(f"   {idx:2d}. {email}")
        
        print(f"\nüíæ –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {self.log_file}")
        print(f"üìß –°–ø–∏—Å–æ–∫ email'–æ–≤: {self.emails_file}")
        print(f"{'#' * 70}\n")
    
    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON —Ñ–∞–π–ª"""
        with open(self.log_file, 'w', encoding='utf-8') as f:
            json.dump(self.stats, f, indent=2, ensure_ascii=False)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    script_path = Path(__file__).parent.parent / "Browser_Use" / "test_agent3_air.py"
    
    if not script_path.exists():
        print(f"‚ùå –û–®–ò–ë–ö–ê: –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AirtableScheduler(
        script_path=script_path,
        total_runs=20,              # 20 –∑–∞–ø—É—Å–∫–æ–≤
        base_interval=90,           # 1.5 –º–∏–Ω—É—Ç—ã –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        random_delay=(10, 30),      # +10-30 —Å–µ–∫—É–Ω–¥ —Å–ª—É—á–∞–π–Ω–æ
        retry_on_failure=True,      # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        max_retries=2,              # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–≤—Ç–æ—Ä–∞
        retry_delay=60              # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    await scheduler.run_scheduler()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(0)
    except Exception as e:
        print(f"\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
