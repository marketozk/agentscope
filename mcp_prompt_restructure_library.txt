Задача: Исследовать текущую библиотеку, собрать все известные эндпоинты и методики, спроектировать новую структуру пакета с сохранением обратной совместимости, и подготовить материалы (отчёт и карту соответствия), не ломая существующий код.

Контекст и входные пути (Windows):
- Основной файл библиотеки (точка истины для текущего API):
  C:\\Users\\regis\\OneDrive\\Рабочий стол\\Доделка робота 2\\SNIFFER_BIG_NEW_STAVROPOL_3-5-3_LIB.py
- Исследования, утилиты, скрипты с эндпоинтами и цепочками:
  C:\\Users\\regis\\OneDrive\\Рабочий стол\\Доделка робота 2\\Research\\tools
- Библиотека rt_lib2 (используется цепочка авторизации):
  (указать точный путь, если отличается; иначе искать в проекте-предке)

Цели:
1) Выделить публичный API текущей библиотеки (функции, классы, константы), включая их сигнатуры и поведение.
2) Построить граф вызовов и определить, какие объекты действительно используются внешним кодом (поверхностный API).
3) Просканировать Research\\tools и собрать:
   - все эндпоинты (URL, метод, параметры, коды ошибок, тела ответов),
   - шаблоны цепочек «от создания до подачи»,
   - приёмы авторизации/повторного входа/обновления токенов.
4) Извлечь текущий auth-flow из rt_lib2, нормализовать шаги и зависимости.
5) Предложить целевую структуру пакета с модулями: core, auth, endpoints, workflows, models, utils, compat.
6) Составить «таблицу соответствия»: старые имена → новые модули/имена, сохраняя прежние сигнатуры через shim.
7) Сгенерировать каркас (скелет) файлов пакета: пустые модули с docstring и TODO, плюс compat-слой с проксирующими функциями.
8) Подготовить отчёт и рекомендации по миграции, тест-план совместимости.

Пожелания к результатам:
- Файл отчёта (Markdown):
  - Реестр публичных символов и их описания
  - Список эндпоинтов с полями: name, method, url, request_schema, response_schema, errors
  - Описание auth-flow (шаги, пред- и пост-условия, артефакты: токены/куки)
  - Целевая структура с кратким описанием каждого модуля
  - Таблица соответствия OLD → NEW
  - Риски и меры
- Сгенерированный каркас пакета (папка rt_lib/ ...), совместимый с импортами из текущего кода через compat-слой
- Тест-кейсы совместимости (скрипт/список вызовов) для прогона против старого SNIFFER_LIB

Технические требования:
- Совместимость импорта и имён: существующий код, который сейчас использует
  SNIFFER_BIG_NEW_STAVROPOL_3-5-3_LIB.py, не должен требовать правок.
- Любые новые параметры — только опциональные, поведение по умолчанию не менять.
- Учесть сетевые таймауты, ретраи, логирование, редактирование секретов в логах.
- Стандартизировать ошибки на уровне core.errors.

Формат вывода:
- Markdown-отчёт (можно назвать LIBRARY_ANALYSIS_AND_PLAN.md)
- Папка rt_lib/ с подпапками и пустыми модулями (docstring + TODO)
- Таблица соответствия в CSV или Markdown (mapping_old_to_new.md)

Шаги выполнения:
1) Прочитать SNIFFER_BIG_NEW_STAVROPOL_3-5-3_LIB.py, извлечь публичные символы, построить граф вызовов.
2) Просканировать C:\\...\\Research\\tools на наличие HTTP-вызовов/эндпоинтов/цепочек; нормализовать.
3) Найти rt_lib2 и извлечь auth-flow; описать как «flows/providers/tokens».
4) Сформировать предложенную структуру пакета и таблицу соответствия.
5) Сгенерировать каркас и написать отчёт.
6) Подготовить совместимость: compat/sniffer_shim.py, экспортирующий прежние имена.

Критерии готовности:
- Доклад готов, структура пакета описана и сгенерирована, совместимость обеспечена через shim.
- Эндпоинты и цепочки из Research\\tools отражены в endpoints/ и workflows/.
- Auth-flow из rt_lib2 интегрирован в auth/flows.py и tokens.py.

Если доступ к путям ограничен — запросить у пользователя копии файлов/папок, затем повторить анализ.