"""
–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import asyncio
from typing import Dict, Any, Optional
from playwright.async_api import async_playwright, Page
import inquirer
from .agent_core import BaseAgent, BrowserAgent, PageAnalysis
from .ai_analyzer import GeminiAnalyzer, ActionPlanner
from .page_analyzer import WebPageAnalyzer, PageInterface
from .interface_agent import InterfaceInteractionAgent, ActionResult

class IntelligentRegistrationAgent(BaseAgent):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, gemini_api_key: str):
        super().__init__(
            "IntelligentRegistrationAgent",
            ["registration", "form_filling", "page_analysis", "interface_understanding"]
        )
        self.browser_agent = BrowserAgent()
        self.ai_analyzer = GeminiAnalyzer(gemini_api_key)
        self.action_planner = ActionPlanner(self.ai_analyzer)
        self.page_analyzer = WebPageAnalyzer(gemini_api_key)
        self.interface_agent = InterfaceInteractionAgent(gemini_api_key)
        self.user_data = {}
        self.registration_steps = []
        
    async def analyze_page(self, url: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL"""
        async with async_playwright() as p:
            browser = await self.browser_agent.create_browser(p, headless=True)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            context = await browser.new_context(
                viewport={'width': 1366, 'height': 768},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                locale='en-US',
                timezone_id='America/New_York',
                extra_http_headers={
                    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                }
            )
            
            page = await context.new_page()
            
            try:
                await page.goto(url, wait_until='networkidle')
                analysis = await self._analyze_page(page)
                await browser.close()
                return analysis
            except Exception as e:
                await browser.close()
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                return {"success": False, "error": str(e)}
    
    async def fill_registration_form(self, form_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_data.update(form_data)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            return {
                "success": True,
                "form_filled": True,
                "fields_filled": list(form_data.keys()),
                "data_used": form_data,
                "message": "–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
            return {"success": False, "error": str(e)}
    
    async def analyze_registration_completion(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            total_steps = len(self.registration_steps)
            completed_steps = len([s for s in self.registration_steps if s.get('completed')])
            
            return {
                "registration_successful": completed_steps > 0,
                "account_created": completed_steps >= total_steps * 0.8,
                "steps_completed": completed_steps,
                "total_steps": total_steps,
                "completion_rate": completed_steps / max(total_steps, 1),
                "current_page": "analysis_complete"
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            return {"registration_successful": False, "error": str(e)}
    
    def get_current_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL"""
        return getattr(self, '_current_url', 'unknown_url')
    
    async def execute(self, referral_link: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        async with async_playwright() as p:
            # –°–æ–∑–¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä
            browser = await self.browser_agent.create_browser(p, headless=False)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            context = await browser.new_context(
                viewport={'width': 1366, 'height': 768},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                locale='en-US',
                timezone_id='America/New_York',
                permissions=['geolocation', 'notifications'],
                extra_http_headers={
                    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1'
                }
            )
            
            page = await context.new_page()
            
            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await self._setup_page(page)
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
                print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ: {referral_link}")
                await page.goto(referral_link, wait_until='networkidle')
                
                # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                result = await self._intelligent_registration_flow(page)
                
                return result['success']
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                return False
            finally:
                await browser.close()
    
    async def _intelligent_registration_flow(self, page: Page) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        max_steps = 25
        step_count = 0
        
        while step_count < max_steps:
            step_count += 1
            print(f"\nüìç –®–∞–≥ {step_count}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            page_interface = await self.interface_agent.analyze_and_remember_page(page)
            
            print(f"üìÑ –¢–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_interface.page_type}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(page_interface.interactive_elements)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if page_interface.interactive_elements:
                print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
                for elem in page_interface.interactive_elements[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  - {elem.element_type}: {elem.text[:30]}... ({elem.selector})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            completion_status = await self._check_completion_status(page_interface)
            if completion_status['completed']:
                print(f"‚úÖ {completion_status['reason']}")
                return {
                    "success": True,
                    "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    "steps_taken": step_count,
                    "completion_reason": completion_status['reason']
                }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if page_interface.error_messages:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏: {page_interface.error_messages}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            suggested_actions = await self.interface_agent.suggest_next_actions({
                'user_data': self.user_data,
                'registration_goal': True,
                'required_fields': ['email', 'username', 'password', 'first_name', 'last_name']
            })

            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –ø–æ—Ç–æ–º –∫–ª–∏–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏
            form_fields = [elem for elem in page_interface.interactive_elements 
                          if elem.element_type == 'input' and elem.selector and 
                          'name=' in elem.selector and elem.text.strip() == '']
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ–ª—è - –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö
            if form_fields:
                print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(form_fields)} –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                for field in form_fields[:3]:  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
                    field_name = field.selector.split("name='")[-1].split("'")[0] if "name='" in field.selector else "unknown"
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                    if field_name in ['_csrf', 'referralCode', 'countryCode', 'didConsentToMarketing']:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                    fill_action = {
                        'action': 'fill_field',
                        'selector': field.selector,
                        'field_name': field_name,
                        'description': f'–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ {field_name}'
                    }
                    
                    print(f"‚ñ∂Ô∏è –ó–∞–ø–æ–ª–Ω—è—é –ø–æ–ª–µ: {field_name}")
                    result = await self.interface_agent.execute_action(page, fill_action, self.user_data)
                    
                    if result.success:
                        print(f"‚úÖ –ü–æ–ª–µ {field_name} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å {field_name}: {result.message}")
                
                # –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue

            if not suggested_actions:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
                # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                fallback_result = await self._fallback_analysis(page)
                if not fallback_result:
                    return {
                        "success": False,
                        "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                        "steps_taken": step_count
                    }
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            print(f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ({len(suggested_actions)}):")
            for i, action in enumerate(suggested_actions[:3]):
                print(f"  {i+1}. {action.get('description', action.get('action'))}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            supported_actions = ['fill_field', 'click_button', 'select_option', 'upload_file', 'wait_for_element']
            valid_actions = [action for action in suggested_actions 
                           if action.get('action') in supported_actions]
            
            if not valid_actions:
                print("‚ùå –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
                continue
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            best_action = valid_actions[0]
            print(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è—é: {best_action.get('description', best_action.get('action'))}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
            action_data = await self._prepare_action_data(best_action, page_interface)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            result = await self.interface_agent.execute_action(page, best_action, action_data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.registration_steps.append({
                'step': step_count,
                'action': best_action,
                'result': result,
                'page_type': page_interface.page_type,
                'url': page.url
            })
            
            if result.success:
                print(f"‚úÖ {result.message}")
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                if result.page_changed:
                    print("ÔøΩ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏...")
                    await asyncio.sleep(2)
                    await page.wait_for_load_state('networkidle', timeout=10000)
            else:
                print(f"‚ùå {result.message}")
                # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if len(valid_actions) > 1:
                    print("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
                    for alt_action in valid_actions[1:3]:  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2 –¥–µ–π—Å—Ç–≤–∏—è
                        print(f"‚ñ∂Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {alt_action.get('description', alt_action.get('action'))}")
                        alt_result = await self.interface_agent.execute_action(page, alt_action, self.user_data)
                        if alt_result.success:
                            print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ")
                            result = alt_result
                            break
                        else:
                            print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {alt_result.message}")
                    
                    if not result.success:
                        print("‚ö†Ô∏è –í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
                        continue
        
        return {
            "success": False,
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤",
            "steps_taken": step_count
        }
    
    async def _check_completion_status(self, page_interface: PageInterface) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if page_interface.success_messages:
            success_keywords = ['success', 'registered', 'welcome', 'confirmed', 'activated', 'complete', 'verify']
            for message in page_interface.success_messages:
                if any(keyword in message.lower() for keyword in success_keywords):
                    return {
                        'completed': True,
                        'reason': f'–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {message}'
                    }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        completion_page_types = ['success', 'welcome', 'dashboard', 'profile', 'verification_sent', 'email_verification']
        if page_interface.page_type in completion_page_types:
            return {
                'completed': True,
                'reason': f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {page_interface.page_type}'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        completion_urls = ['success', 'welcome', 'dashboard', 'complete', 'verified', 'confirm']
        if any(url_part in page_interface.url.lower() for url_part in completion_urls):
            return {
                'completed': True,
                'reason': f'URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {page_interface.url}'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page_interface.title:
            completion_titles = ['welcome', 'success', 'registered', 'dashboard', 'profile', 'verify']
            if any(title_part in page_interface.title.lower() for title_part in completion_titles):
                return {
                    'completed': True,
                    'reason': f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {page_interface.title}'
                }
        
        return {'completed': False, 'reason': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}
    
    async def _prepare_action_data(self, action: Dict[str, Any], page_interface: PageInterface) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        
        action_type = action.get('action')
        selector = action.get('selector', '')
        
        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
        target_element = None
        for element in page_interface.interactive_elements:
            if element.selector == selector:
                target_element = element
                break
        
        if not target_element:
            return {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        data = {}
        
        if action_type == 'fill_field':
            field_value = self._determine_field_value(target_element)
            if field_value:
                data[target_element.attributes.get('name', 'value')] = field_value
        
        return data
    
    def _determine_field_value(self, element) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
        name = element.attributes.get('name', '').lower()
        placeholder = element.placeholder.lower()
        field_type = element.attributes.get('type', 'text').lower()
        element_text = element.text.lower()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = f"{name} {placeholder} {element_text}".lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if any(keyword in context for keyword in ['email', 'mail', 'e-mail']):
            return self.user_data.get('email', 'test@example.com')
        elif any(keyword in context for keyword in ['username', 'login', 'user']):
            return self.user_data.get('username', 'testuser123')
        elif any(keyword in context for keyword in ['password', 'pass']):
            return self.user_data.get('password', 'TestPassword123!')
        elif any(keyword in context for keyword in ['first', 'fname', 'name']) and 'last' not in context:
            return self.user_data.get('first_name', 'John')
        elif any(keyword in context for keyword in ['last', 'lname', 'surname']):
            return self.user_data.get('last_name', 'Doe')
        elif any(keyword in context for keyword in ['phone', 'tel', 'mobile']):
            return self.user_data.get('phone', '+1234567890')
        elif any(keyword in context for keyword in ['birth', 'birthday', 'date']):
            return self.user_data.get('birthday', '01/15/1990')
        
        return ''
    
    async def _fallback_analysis(self, page: Page) -> bool:
        """–ó–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        try:
            # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            analysis = await self._analyze_page(page)
            
            if analysis.get('has_form'):
                print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞...")
                # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                return await self._execute_basic_registration(page, analysis)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return False
    
    async def _setup_page(self, page: Page):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã"""
        
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ webdriver
        await page.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {
                get: () => false,
            });
        """)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        await page.add_init_script("""
            // –£–¥–∞–ª—è–µ–º —Å–ª–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
            delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
            delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
            
            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º permissions API
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Notification.permission }) :
                    originalQuery(parameters)
            );
            
            // –ú–∞—Å–∫–∏—Ä—É–µ–º languages
            Object.defineProperty(navigator, 'languages', {
                get: () => ['en-US', 'en', 'ru']
            });
            
            // –ú–∞—Å–∫–∏—Ä—É–µ–º plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5]
            });
        """)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport –∏ user agent
        await page.set_viewport_size({"width": 1366, "height": 768})
        await page.set_extra_http_headers({
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8'
        })
    
    async def _analyze_page(self, page: Page) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL
        self._current_url = page.url
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = await page.screenshot()
        
        # –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_text = await page.evaluate("() => document.body.innerText || ''")
        
        # HTML
        page_html = await page.content()
        
        # AI –∞–Ω–∞–ª–∏–∑
        return await self.ai_analyzer.analyze_page(screenshot, page_text, page_html)
    
    async def _execute_action(self, page: Page, action: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        action_type = action['type']
        
        if action_type == 'request_user_input':
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            field = action['field']
            label = field.get('label', field.get('type', '–¥–∞–Ω–Ω—ã–µ'))
            
            if field['type'] == 'password':
                answer = inquirer.prompt([
                    inquirer.Password('value', message=f"–í–≤–µ–¥–∏—Ç–µ {label}")
                ])
            else:
                answer = inquirer.prompt([
                    inquirer.Text('value', message=f"–í–≤–µ–¥–∏—Ç–µ {label}")
                ])
            
            if answer:
                self.user_data[field.get('type', 'unknown')] = answer['value']
        
        elif action_type == 'fill_field':
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è
            selector = action['selector']
            field_info = action['field_info']
            field_type = field_info.get('type', 'unknown')
            
            value = self.user_data.get(field_type, '')
            
            if value:
                try:
                    element = await page.wait_for_selector(selector, timeout=5000)
                    await element.fill(value)
                    print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: {field_type}")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ {selector}: {e}")
        
        elif action_type == 'click_button':
            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            try:
                element = await page.wait_for_selector(action['selector'], timeout=5000)
                await element.click()
                print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É: {e}")
    
    async def _is_registration_complete(self, page: Page) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        url = page.url
        text = await page.evaluate("() => document.body.innerText || ''")
        
        indicators = [
            'success' in url.lower(),
            'dashboard' in url.lower(),
            'verify' in text.lower(),
            'check your email' in text.lower()
        ]
        
        return any(indicators)