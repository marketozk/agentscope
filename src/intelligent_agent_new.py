"""
–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import asyncio
from typing import Dict, Any, Optional
from playwright.async_api import async_playwright, Page
import inquirer
from .agent_core import BaseAgent, BrowserAgent, PageAnalysis
from .ai_analyzer import GeminiAnalyzer, ActionPlanner
from .page_analyzer import WebPageAnalyzer, PageInterface
from .interface_agent import InterfaceInteractionAgent, ActionResult

class IntelligentRegistrationAgent(BaseAgent):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, gemini_api_key: str):
        super().__init__(
            "IntelligentRegistrationAgent",
            ["registration", "form_filling", "page_analysis", "interface_understanding"]
        )
        self.browser_agent = BrowserAgent()
        self.ai_analyzer = GeminiAnalyzer(gemini_api_key)
        self.action_planner = ActionPlanner(self.ai_analyzer)
        self.page_analyzer = WebPageAnalyzer(gemini_api_key)
        self.interface_agent = InterfaceInteractionAgent(gemini_api_key)
        self.user_data = {}
        self.registration_steps = []
        
    async def execute(self, referral_link: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        async with async_playwright() as p:
            # –°–æ–∑–¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä
            browser = await self.browser_agent.create_browser(p, headless=False)
            page = await browser.new_page()
            
            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await self._setup_page(page)
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
                print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ: {referral_link}")
                await page.goto(referral_link, wait_until='networkidle')
                
                # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                result = await self._intelligent_registration_flow(page)
                
                return result['success']
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                return False
            finally:
                await browser.close()
    
    async def _intelligent_registration_flow(self, page: Page) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        max_steps = 25
        step_count = 0
        
        while step_count < max_steps:
            step_count += 1
            print(f"\nüìç –®–∞–≥ {step_count}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            page_interface = await self.interface_agent.analyze_and_remember_page(page)
            
            print(f"üìÑ –¢–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_interface.page_type}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(page_interface.interactive_elements)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if page_interface.interactive_elements:
                print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
                for elem in page_interface.interactive_elements[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  - {elem.element_type}: {elem.text[:30]}... ({elem.selector})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            completion_status = await self._check_completion_status(page_interface)
            if completion_status['completed']:
                print(f"‚úÖ {completion_status['reason']}")
                return {
                    "success": True,
                    "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    "steps_taken": step_count,
                    "completion_reason": completion_status['reason']
                }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if page_interface.error_messages:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏: {page_interface.error_messages}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            suggested_actions = await self.interface_agent.suggest_next_actions({
                'user_data': self.user_data,
                'registration_goal': True,
                'required_fields': ['email', 'username', 'password', 'first_name', 'last_name']
            })
            
            if not suggested_actions:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
                # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                fallback_result = await self._fallback_analysis(page)
                if not fallback_result:
                    return {
                        "success": False,
                        "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                        "steps_taken": step_count
                    }
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            print(f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ({len(suggested_actions)}):")
            for i, action in enumerate(suggested_actions[:3]):
                print(f"  {i+1}. {action.get('description', action.get('action'))}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            best_action = suggested_actions[0]
            print(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è—é: {best_action.get('description', best_action.get('action'))}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
            action_data = await self._prepare_action_data(best_action, page_interface)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            result = await self.interface_agent.execute_action(page, best_action, action_data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.registration_steps.append({
                'step': step_count,
                'action': best_action,
                'result': result,
                'page_type': page_interface.page_type,
                'url': page.url
            })
            
            if result.success:
                print(f"‚úÖ {result.message}")
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                if result.page_changed:
                    print("üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏...")
                    await asyncio.sleep(2)
                    await page.wait_for_load_state('networkidle', timeout=10000)
            else:
                print(f"‚ùå {result.message}")
                # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if len(suggested_actions) > 1:
                    print("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
                    continue
        
        return {
            "success": False,
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤",
            "steps_taken": step_count
        }
    
    async def _check_completion_status(self, page_interface: PageInterface) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if page_interface.success_messages:
            success_keywords = ['success', 'registered', 'welcome', 'confirmed', 'activated', 'complete', 'verify']
            for message in page_interface.success_messages:
                if any(keyword in message.lower() for keyword in success_keywords):
                    return {
                        'completed': True,
                        'reason': f'–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {message}'
                    }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        completion_page_types = ['success', 'welcome', 'dashboard', 'profile', 'verification_sent', 'email_verification']
        if page_interface.page_type in completion_page_types:
            return {
                'completed': True,
                'reason': f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {page_interface.page_type}'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        completion_urls = ['success', 'welcome', 'dashboard', 'complete', 'verified', 'confirm']
        if any(url_part in page_interface.url.lower() for url_part in completion_urls):
            return {
                'completed': True,
                'reason': f'URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {page_interface.url}'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page_interface.title:
            completion_titles = ['welcome', 'success', 'registered', 'dashboard', 'profile', 'verify']
            if any(title_part in page_interface.title.lower() for title_part in completion_titles):
                return {
                    'completed': True,
                    'reason': f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {page_interface.title}'
                }
        
        return {'completed': False, 'reason': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}
    
    async def _prepare_action_data(self, action: Dict[str, Any], page_interface: PageInterface) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        
        action_type = action.get('action')
        selector = action.get('selector', '')
        
        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
        target_element = None
        for element in page_interface.interactive_elements:
            if element.selector == selector:
                target_element = element
                break
        
        if not target_element:
            return {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        data = {}
        
        if action_type == 'fill_field':
            field_value = self._determine_field_value(target_element)
            if field_value:
                data[target_element.attributes.get('name', 'value')] = field_value
        
        return data
    
    def _determine_field_value(self, element) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
        name = element.attributes.get('name', '').lower()
        placeholder = element.placeholder.lower()
        field_type = element.attributes.get('type', 'text').lower()
        element_text = element.text.lower()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = f"{name} {placeholder} {element_text}".lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if any(keyword in context for keyword in ['email', 'mail', 'e-mail']):
            return self.user_data.get('email', 'test@example.com')
        elif any(keyword in context for keyword in ['username', 'login', 'user']):
            return self.user_data.get('username', 'testuser123')
        elif any(keyword in context for keyword in ['password', 'pass']):
            return self.user_data.get('password', 'TestPassword123!')
        elif any(keyword in context for keyword in ['first', 'fname', 'name']) and 'last' not in context:
            return self.user_data.get('first_name', 'John')
        elif any(keyword in context for keyword in ['last', 'lname', 'surname']):
            return self.user_data.get('last_name', 'Doe')
        elif any(keyword in context for keyword in ['phone', 'tel', 'mobile']):
            return self.user_data.get('phone', '+1234567890')
        elif any(keyword in context for keyword in ['birth', 'birthday', 'date']):
            return self.user_data.get('birthday', '01/15/1990')
        
        return ''
    
    async def _fallback_analysis(self, page: Page) -> bool:
        """–ó–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        try:
            # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            analysis = await self._analyze_page(page)
            
            if analysis.get('has_form'):
                print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞...")
                # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                return await self._execute_basic_registration(page, analysis)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return False
    
    async def _setup_page(self, page: Page):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã"""
        await page.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {
                get: () => false,
            });
        """)
    
    async def _analyze_page(self, page: Page) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        # –°–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = await page.screenshot(full_page=True)
        
        # –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_text = await page.inner_text('body')
        
        # HTML
        html_content = await page.content()
        
        # –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Gemini
        return await self.ai_analyzer.analyze_page(screenshot, page_text, html_content)
    
    async def _execute_basic_registration(self, page: Page, analysis: Dict) -> bool:
        """–ë–∞–∑–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            await self._fill_basic_fields(page)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_selectors = [
                'button[type="submit"]',
                'input[type="submit"]', 
                'button:has-text("Register")',
                'button:has-text("Sign up")',
                '.submit-btn'
            ]
            
            for selector in submit_selectors:
                try:
                    await page.click(selector, timeout=3000)
                    await page.wait_for_load_state('networkidle', timeout=5000)
                    return True
                except:
                    continue
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
        return False
    
    async def _fill_basic_fields(self, page: Page):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"""
        
        basic_fields = [
            ('input[name*="email"]', self.user_data.get('email', 'test@example.com')),
            ('input[name*="username"]', self.user_data.get('username', 'testuser123')),
            ('input[name*="password"]', self.user_data.get('password', 'TestPassword123!')),
            ('input[name*="first"]', self.user_data.get('first_name', 'John')),
            ('input[name*="last"]', self.user_data.get('last_name', 'Doe')),
        ]
        
        for selector, value in basic_fields:
            try:
                if await page.is_visible(selector):
                    await page.fill(selector, value)
                    print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: {selector}")
            except:
                continue
    
    async def collect_user_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        questions = [
            inquirer.Text('email', message="Email –∞–¥—Ä–µ—Å"),
            inquirer.Text('username', message="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            inquirer.Password('password', message="–ü–∞—Ä–æ–ª—å"),
            inquirer.Text('first_name', message="–ò–º—è"),
            inquirer.Text('last_name', message="–§–∞–º–∏–ª–∏—è"),
            inquirer.Text('phone', message="–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default=""),
            inquirer.Text('birthday', message="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (MM/DD/YYYY, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default=""),
        ]
        
        self.user_data = inquirer.prompt(questions)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–±—Ä–∞–Ω—ã")
    
    def get_registration_report(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        total_steps = len(self.registration_steps)
        successful_steps = len([step for step in self.registration_steps if step['result'].success])
        failed_steps = total_steps - successful_steps
        
        pages_visited = list(set([step['page_type'] for step in self.registration_steps]))
        
        return {
            'total_steps': total_steps,
            'successful_steps': successful_steps,
            'failed_steps': failed_steps,
            'success_rate': successful_steps / total_steps if total_steps > 0 else 0,
            'pages_visited': pages_visited,
            'interface_summary': self.interface_agent.get_interaction_summary(),
            'steps_detail': self.registration_steps
        }
