"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

async def test_temp_mail():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TempMailAgent"""
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TempMailAgent...")
    
    try:
        from src.temp_mail_agent import TempMailAgent
        
        async with TempMailAgent() as agent:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π email
            temp_email = await agent.create_temp_email()
            print(f"‚úÖ Email —Å–æ–∑–¥–∞–Ω: {temp_email.email}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ
            emails = await agent.check_inbox()
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö: {len(emails)} –ø–∏—Å–µ–º")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TempMailAgent: {e}")
        return False

async def test_email_verification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç EmailVerificationAgent"""
    print("\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailVerificationAgent...")
    
    try:
        from src.email_verification_agent import EmailVerificationAgent
        
        async with EmailVerificationAgent(headless=True) as agent:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ
            result = await agent.click_verification_link("https://httpbin.org/html")
            print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ: {result.get('success', False)}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ EmailVerificationAgent: {e}")
        return False

async def test_registration_orchestrator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RegistrationOrchestrator"""
    print("\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RegistrationOrchestrator...")
    
    try:
        from src.registration_orchestrator import RegistrationOrchestrator
        
        orchestrator = RegistrationOrchestrator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        result = await orchestrator.start_registration(
            registration_url="https://httpbin.org/forms/post",
            user_data=user_data
        )
        
        print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.success}")
        print(f"‚úÖ –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(result.steps)}")
        print(f"‚úÖ Email —Å–æ–∑–¥–∞–Ω: {result.credentials.get('email', 'N/A')}")
        
        return result.success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RegistrationOrchestrator: {e}")
        return False

async def test_interface_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        from src.interface_agent import InterfaceAgent
        
        agent = InterfaceAgent()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        result = await agent.analyze_page("https://httpbin.org/forms/post")
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {result.get('success', False)}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result.get('interactive_elements', []))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ === –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ AgentScope ===")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...\n")
    
    tests = [
        ("TempMailAgent", test_temp_mail),
        ("EmailVerificationAgent", test_email_verification),
        ("Interface Analysis", test_interface_analysis),
        ("RegistrationOrchestrator", test_registration_orchestrator),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_name}: {e}")
            results.append((test_name, False))
        
        print(f"\n{'='*50}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéØ === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if success:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞!")
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    print(f"\nüìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è:")
    print(f"   üìß –°–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤")
    print(f"   üîç –ê–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    print(f"   ‚úâÔ∏è Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print(f"   ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    
    print(f"\nüé™ –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"   python demo_interface_analysis.py")
    print(f"   python demo_registration_system.py")

if __name__ == "__main__":
    asyncio.run(main())
