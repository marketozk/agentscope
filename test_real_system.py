"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

async def test_real_registration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===")
    
    from src.registration_orchestrator import RegistrationOrchestrator
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = RegistrationOrchestrator({
            "headless_mode": True,  # –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            "email_wait_timeout": 60,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            "screenshot_on_error": True
        })
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'country': 'Russia',
            'phone': '+7900123456'
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–µ
        test_url = "https://httpbin.org/forms/post"
        
        print(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞: {test_url}")
        print("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        result = await orchestrator.start_registration(
            registration_url=test_url,
            user_data=user_data
        )
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ===")
        print(f"‚úÖ –û–±—â–∏–π —É—Å–ø–µ—Ö: {result.success}")
        print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {result.account_created}")
        print(f"üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result.email_verified}")
        print(f"üîó –§–∏–Ω–∞–ª—å–Ω—ã–π URL: {result.final_url}")
        
        print(f"\nüîë === –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï ===")
        for key, value in result.credentials.items():
            if key == 'password':
                print(f"   {key}: {'*' * len(str(value))}")  # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            else:
                print(f"   {key}: {value}")
        
        print(f"\nüìã === –®–ê–ì–ò –ü–†–û–¶–ï–°–°–ê ===")
        for i, step in enumerate(result.steps, 1):
            status_emoji = {
                "completed": "‚úÖ",
                "failed": "‚ùå", 
                "in_progress": "‚è≥",
                "pending": "‚è∏Ô∏è"
            }.get(step.status, "‚ùì")
            
            print(f"   {i}. {status_emoji} {step.step_name}")
            if step.error:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {step.error}")
            if step.result and step.result.get('message'):
                print(f"      üí¨ {step.result['message']}")
        
        if result.errors:
            print(f"\n‚ö†Ô∏è === –û–®–ò–ë–ö–ò ===")
            for error in result.errors:
                print(f"   ‚ùå {error}")
        
        if result.screenshots:
            print(f"\nüì∏ === –°–ö–†–ò–ù–®–û–¢–´ ===")
            for screenshot in result.screenshots:
                print(f"   üì∑ {screenshot}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        orchestrator.save_registration_log("test_real_registration.json")
        print(f"\nüíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_real_registration.json")
        
        return result.success
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_temp_mail_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å temp-mail"""
    print("\nüî• === –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° TEMP-MAIL ===")
    
    from src.temp_mail_agent import TempMailAgent
    
    try:
        async with TempMailAgent() as agent:
            # –°–æ–∑–¥–∞–µ–º email
            temp_email = await agent.create_temp_email()
            print(f"üìß –°–æ–∑–¥–∞–Ω email: {temp_email.email}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            test_email_body = """
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
            –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
            https://example.com/verify?token=ABC123XYZ
            
            –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: 789456
            """
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
            from src.temp_mail_agent import Email
            from datetime import datetime
            
            test_email = Email(
                id="test123",
                from_email="noreply@example.com",
                subject="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                body=test_email_body,
                received_at=datetime.now()
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            link = await agent.extract_verification_link(test_email)
            code = await agent.extract_verification_code(test_email)
            
            print(f"üîó –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
            print(f"üî¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥: {code}")
            
            return link is not None or code is not None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ temp-mail: {e}")
        return False

async def test_email_verification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    print("\nüî• === –¢–ï–°–¢ EMAIL –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===")
    
    from src.email_verification_agent import EmailVerificationAgent
    
    try:
        async with EmailVerificationAgent(headless=True) as agent:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            test_url = "https://httpbin.org/html"
            
            result = await agent.click_verification_link(test_url)
            
            print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ: {result.get('success', False)}")
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('title', 'N/A')}")
            print(f"üåê URL: {result.get('url', 'N/A')}")
            
            return result.get('success', False)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üéØ === –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö ===")
    
    tests = [
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å temp-mail", test_temp_mail_integration),
        ("Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", test_email_verification),
        ("–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", test_real_registration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüéØ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if result else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_name}: {e}")
            results.append((test_name, False))
        
        print(f"{'='*60}")
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüèÜ === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"   {status} {test_name}")
    
    print(f"\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫!")
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
    
    print(f"\nüöÄ –°–∏—Å—Ç–µ–º–∞ AgentScope –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
