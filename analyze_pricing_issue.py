"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞–π–ø–∏–Ω–≥–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PromptTuner –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∏ –ª–æ–≥–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (Windows CMD):
  set OPENAI_API_KEY=sk-...
  .\.venv\Scripts\python.exe analyze_pricing_issue.py

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/:
- logs/pricing_analysis_prompt_YYYYmmdd_HHMMSS.txt ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
- logs/pricing_analysis_result_YYYYmmdd_HHMMSS.txt ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç GPT-5
"""

from __future__ import annotations

import os
import sys
from datetime import datetime
from pathlib import Path
from io import StringIO

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è coolprompt_repo
try:
    from coolprompt.assistant import PromptTuner
except Exception:
    _ROOT = Path(__file__).resolve().parent
    _LOCAL_CP = _ROOT / "coolprompt_repo"
    if _LOCAL_CP.exists():
        sys.path.insert(0, str(_LOCAL_CP))
    from coolprompt.assistant import PromptTuner  # type: ignore

from langchain_openai import ChatOpenAI

# –¢–∏—Ö–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ NLTK
import nltk


class _SuppressStderr:
    def __enter__(self):
        self._orig = sys.stderr
        sys.stderr = StringIO()
    def __exit__(self, *args):
        sys.stderr = self._orig


with _SuppressStderr():
    try:
        nltk.download('wordnet', quiet=True)
        nltk.download('punkt_tab', quiet=True)
        nltk.download('omw-1.4', quiet=True)
    except Exception:
        pass


def main() -> int:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ API
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key or api_key == "your-api-key-here":
        print("[ERROR] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  set OPENAI_API_KEY=sk-your-key-here")
        return 2

    # –ü—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç—É
    prompt_path = Path("price_analysis_prompt.txt").resolve()
    if not prompt_path.exists():
        print(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞: {prompt_path}")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª price_analysis_prompt.txt —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏.")
        return 3

    # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç
    analysis_prompt = prompt_path.read_text(encoding="utf-8", errors="ignore")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å GPT-5
    print("=" * 80)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï–ú –í –°–ò–°–¢–ï–ú–ï –°–ù–ê–ô–ü–ò–ù–ì–ê –¢–ï–ù–î–ï–†–û–í")
    print("=" * 80)
    print(f"\nüìã –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑: {prompt_path}")
    print(f"üìä –ú–æ–¥–µ–ª—å: gpt-5-chat-latest")
    print(f"üå°Ô∏è  Temperature: 0.7 (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)")
    print(f"üìù Max tokens: 16000 (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)")
    
    llm = ChatOpenAI(
        model="gpt-5-chat-latest",
        temperature=0.7,  # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        max_tokens=16000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        api_key=api_key,
    )
    
    tuner = PromptTuner(target_model=llm)

    print("\n‚öôÔ∏è  –ó–∞–ø—É—Å–∫ PromptTuner –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    print("-" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    tuner.run(analysis_prompt)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    logs_dir = Path("logs")
    logs_dir.mkdir(parents=True, exist_ok=True)
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    prompt_backup_path = logs_dir / f"pricing_analysis_prompt_{ts}.txt"
    result_path = logs_dir / f"pricing_analysis_result_{ts}.txt"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    prompt_backup_path.write_text(analysis_prompt, encoding="utf-8")
    
    final_result = getattr(tuner, "final_prompt", "") or ""
    result_path.write_text(final_result, encoding="utf-8")

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 80)
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt_backup_path}")
    print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result_path}")

    print("\n" + "=" * 80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –û–¢ GPT-5:")
    print("=" * 80)
    print(final_result)
    print("=" * 80)

    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—à–µ")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ SNIFFER_BIG_NEW_STAVROPOL_3-5-3_LIB.py")
    print("   3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–∞—Ö")
    
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
