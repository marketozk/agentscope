from agentscope.agent import AgentBase
from agentscope.message import Msg
import re
import asyncio
from playwright.async_api import async_playwright
import google.generativeai as genai

# üîë –¢–≤–æ–π –∫–ª—é—á (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
genai.configure(api_key="AIzaSyCw59KCsX1Lt8on_morTbxZPxQn_fv8E64")

class XPathLocatorAgent(AgentBase):
    def __init__(self, name="XPathLocator", page=None):
        super().__init__(name=name, sys_prompt="–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å XPath —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.")
        self.page = page  # –ü–µ—Ä–µ–¥–∞—ë—à—å page –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞)

    async def get_enhanced_elements_with_screenshot(self, screenshot_path="screenshot.png"):
        if not self.page:
            raise ValueError("Page –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        await self.page.screenshot(path=screenshot_path)
        # ... (JS-–∫–æ–¥ —Ç–æ—Ç –∂–µ, —á—Ç–æ —É —Ç–µ–±—è)
        JS = """
        () => {
            const elements = [];
            const selectors = 'button, a, [role="button"], input[type="submit"], [onclick], [tabindex="0"]';
            document.querySelectorAll(selectors).forEach((el, idx) => {
                const rect = el.getBoundingClientRect();
                if (rect.width <= 5 || rect.height <= 5) return;

                const attrs = {};
                for (let attr of el.attributes) {
                    attrs[attr.name] = attr.value;
                }

                const parentText = el.parentElement?.innerText.substring(0, 100).trim() || "";
                const siblingsText = Array.from(el.parentElement?.children || [])
                    .filter(child => child !== el)
                    .map(child => child.innerText.substring(0, 30).trim())
                    .join(" | ");

                let position = "";
                if (rect.top < window.innerHeight / 3) position = "top";
                else if (rect.top > window.innerHeight * 2/3) position = "bottom";
                if (rect.left < window.innerWidth / 3) position += "-left";
                else if (rect.left > window.innerWidth * 2/3) position += "-right";
                if (!position) position = "center";

                elements.push({
                    id: idx + 1,
                    tagName: el.tagName.toLowerCase(),
                    text: el.innerText.trim().substring(0, 50),
                    attributes: attrs,
                    parentText: parentText,
                    siblingsText: siblingsText,
                    position: position.trim("-"),
                    rect: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                });
            });
            return elements;
        }
        """
        return await self.page.evaluate(JS), screenshot_path

    def describe_element(self, el):
        parts = []
        if el["text"]:
            parts.append(f"—Ç–µ–∫—Å—Ç: '{el['text']}'")
        else:
            parts.append("—Ç–µ–∫—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        useful_attrs = {k: v for k, v in el["attributes"].items() if k in [
            "data-testid", "data-qa", "aria-label", "name", "title", "alt", "role", "type"
        ]}
        if useful_attrs:
            parts.append(f"–∞—Ç—Ä–∏–±—É—Ç—ã: {useful_attrs}")
        if el["parentText"]:
            parts.append(f"–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: '{el['parentText'][:50]}...'")
        if el["siblingsText"]:
            parts.append(f"—Ä—è–¥–æ–º: {el['siblingsText']}")
        if el["position"]:
            parts.append(f"–ø–æ–∑–∏—Ü–∏—è: {el['position']}")
        return " | ".join(parts)

    async def ask_gemini_to_choose_element(self, screenshot_path, elements, task_description):
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        descriptions = "\n".join([f"–≠–ª–µ–º–µ–Ω—Ç {el['id']}: {self.describe_element(el)}" for el in elements])
        prompt = f"""
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ UI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

        –ó–ê–î–ê–ß–ê: {task_description}

        –í–´–ë–ï–†–ò –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É), –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç.

        –≠–ª–µ–º–µ–Ω—Ç—ã:
        {descriptions}

        –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
        """
        img = genai.upload_file(screenshot_path)
        response = await asyncio.to_thread(model.generate_content, [prompt, img])
        try:
            choice = int(response.text.strip())
            return choice if 1 <= choice <= len(elements) else None
        except:
            return None

    def generate_robust_xpath(self, el):
        tag, attrs = el["tagName"], el["attributes"]
        PRIORITY_ATTRS = ["data-testid", "data-qa", "aria-label", "name", "title", "alt", "role", "type"]
        for attr in PRIORITY_ATTRS:
            if attr in attrs and not self.is_dynamic_value(attrs[attr]):
                return f"//{tag}[@{attr}='{attrs[attr]}']"
        stable_attrs = [f"@{attr}='{attrs[attr]}'" for attr in ["type", "role"] if attr in attrs and not self.is_dynamic_value(attrs[attr])]
        if stable_attrs:
            return f"//{tag}[{' and '.join(stable_attrs)}]"
        if "parentText" in el and "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in el["parentText"].lower():
            return f"//form[contains(., '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')]//{tag}"
        return f"//{tag}"

    def is_dynamic_value(self, val):
        if not isinstance(val, str): return True
        return bool(re.search(r"\d{4,}|^[a-f0-9]{6,}$|random|temp|uuid", val))

    async def locate_xpath(self, task_description: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç XPath –ø–æ –∑–∞–¥–∞—á–µ."""
        try:
            elements, screenshot_path = await self.get_enhanced_elements_with_screenshot()
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}")

            choice = await self.ask_gemini_to_choose_element(screenshot_path, elements, task_description)
            if not choice:
                return "//body"  # fallback

            selected = elements[choice - 1]
            xpath = self.generate_robust_xpath(selected)
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç {choice}, XPath: {xpath}")
            return xpath

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ locate_xpath: {e}")
            return "//body"

    def reply(self, x: Msg = None) -> Msg:
        """
        –ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π AgentScope –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ.
        –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –≤ x.content –±—É–¥–µ—Ç: {"task": "–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"}
        """
        if not x or not isinstance(x.content, dict) or "task" not in x.content:
            return Msg(self.name, content={"error": "–ù–µ—Ç –∑–∞–¥–∞—á–∏ 'task'"}, role="assistant")

        task = x.content["task"]
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        xpath = asyncio.run(self.locate_xpath(task))  # ‚Üê –í Colab —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

        return Msg(
            self.name,
            content={
                "status": "success" if xpath != "//body" else "fallback",
                "xpath": xpath,
                "task": task
            },
            role="assistant"
        )

from agentscope.pipelines import SequentialPipeline

# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å page –æ—Ç Playwright
# page = await browser.new_page() ‚Äî –≥–¥–µ-—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ

# –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
xpath_agent = XPathLocatorAgent(name="XPathLocator", page=page)

# –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
msg = Msg("NavigatorAgent", content={"task": "–Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}, role="user")

# –ó–∞–ø—É—Å–∫–∞–µ–º
result = xpath_agent.reply(msg)

print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:", result.content["xpath"])


# –î—Ä—É–≥–∏–µ –∞–≥–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, NavigatorAgent, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
# class NavigatorAgent(AgentBase): ...

pipeline = SequentialPipeline([
    navigator_agent,   # –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç page
    xpath_agent,       # –Ω–∞—Ö–æ–¥–∏—Ç XPath
    clicker_agent      # –∫–ª–∏–∫–∞–µ—Ç –ø–æ XPath
])

final_result = pipeline(initial_msg)