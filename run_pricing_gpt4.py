"""
–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å GPT-4 Turbo (–±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å).
"""
from __future__ import annotations

import os
import sys
from datetime import datetime
from pathlib import Path
from io import StringIO

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è coolprompt_repo
try:
    from coolprompt.assistant import PromptTuner
except Exception:
    _ROOT = Path(__file__).resolve().parent
    _LOCAL_CP = _ROOT / "coolprompt_repo"
    if _LOCAL_CP.exists():
        sys.path.insert(0, str(_LOCAL_CP))
    from coolprompt.assistant import PromptTuner

from langchain_openai import ChatOpenAI
import nltk

class _SuppressStderr:
    def __enter__(self):
        self._orig = sys.stderr
        sys.stderr = StringIO()
    def __exit__(self, *args):
        sys.stderr = self._orig

with _SuppressStderr():
    try:
        nltk.download('wordnet', quiet=True)
        nltk.download('punkt_tab', quiet=True)
        nltk.download('omw-1.4', quiet=True)
    except Exception:
        pass

def main() -> int:
    # API –∫–ª—é—á
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key or api_key == "your-api-key-here":
        print("[ERROR] OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return 2

    # –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    prompt_file = Path("price_analysis_prompt.txt")
    if not prompt_file.exists():
        print(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_file}")
        return 3

    prompt = prompt_file.read_text(encoding="utf-8")

    print("=" * 80)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï–ú")
    print("=" * 80)
    print(f"\nüìã –ü—Ä–æ–º–ø—Ç: {prompt_file}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: gpt-4-turbo-preview")
    print(f"üî• Temperature: 0.7")
    print(f"üìù Max tokens: 4000\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å GPT-4
    llm = ChatOpenAI(
        model="gpt-4-turbo-preview",
        temperature=0.7,
        max_tokens=4000,
        api_key=api_key,
    )
    tuner = PromptTuner(target_model=llm)

    print("‚öôÔ∏è  –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ GPT-4...\n")
    
    try:
        tuner.run(prompt)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("\n–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT-3.5-turbo...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å GPT-3.5
        llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            temperature=0.7,
            max_tokens=4000,
            api_key=api_key,
        )
        tuner = PromptTuner(target_model=llm)
        tuner.run(prompt)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    result_file = logs_dir / f"pricing_analysis_{ts}.txt"
    final = getattr(tuner, "final_prompt", "") or ""
    result_file.write_text(final, encoding="utf-8")

    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_file}\n")
    print("=" * 80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 80)
    print(final)
    print("=" * 80)

    return 0

if __name__ == "__main__":
    raise SystemExit(main())
