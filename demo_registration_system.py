"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.registration_orchestrator import RegistrationOrchestrator
from src.temp_mail_agent import TempMailAgent
from src.email_verification_agent import EmailVerificationAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('registration_demo.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def demo_temp_mail():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π"""
    print("\nüî• === –î–ï–ú–û: –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π ===")
    
    async with TempMailAgent() as agent:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π email
        temp_email = await agent.create_temp_email()
        print(f"üìß –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π email: {temp_email.email}")
        print(f"üïí –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {temp_email.expires_at}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ (–ø—É—Å—Ç–æ–π —è—â–∏–∫)
        emails = await agent.check_inbox()
        print(f"üì¨ –ü–∏—Å–µ–º –≤ —è—â–∏–∫–µ: {len(emails)}")
        
        # –î–µ–º–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ)
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Å–µ–º (10 —Å–µ–∫—É–Ω–¥)...")
        verification_email = await agent.wait_for_email(timeout=10)
        
        if verification_email:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å—å–º–æ: {verification_email.subject}")
        else:
            print("‚ö†Ô∏è –ü–∏—Å—å–º–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ)")

async def demo_email_verification():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüî• === –î–ï–ú–û: Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ===")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–¥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_scenarios = [
        {
            "name": "–£—Å–ø–µ—à–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            "url": "https://httpbin.org/html",  # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            "code": "123456"
        }
    ]
    
    async with EmailVerificationAgent(headless=False) as agent:
        for scenario in test_scenarios:
            print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
            result = await agent.click_verification_link(scenario['url'])
            print(f"üîó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞: {result.get('success', False)}")
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {result.get('title', 'N/A')}")
            
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

async def demo_full_registration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüî• === –î–ï–ú–û: –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
    config = {
        "max_retries": 2,
        "page_load_timeout": 15000,
        "element_timeout": 3000,
        "email_check_interval": 5,
        "email_wait_timeout": 60,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ
        "screenshot_on_error": True,
        "headless_mode": False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –¥–µ–º–æ
    }
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ
    user_data = {
        'first_name': '–¢–µ—Å—Ç',
        'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'country': 'Russia',
        'phone': '+7900123456',
        'agree_terms': True,
        'subscribe_newsletter': False
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_sites = [
        {
            "name": "HTTPBin Forms",
            "url": "https://httpbin.org/forms/post",
            "description": "–ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        },
        {
            "name": "Example.com",
            "url": "https://example.com",
            "description": "–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–±–µ–∑ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)"
        }
    ]
    
    orchestrator = RegistrationOrchestrator(config)
    
    for site in test_sites:
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: {site['name']}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {site['description']}")
        print(f"üîó URL: {site['url']}")
        
        try:
            result = await orchestrator.start_registration(
                registration_url=site['url'],
                user_data=user_data
            )
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.success}")
            print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {result.account_created}")
            print(f"üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result.email_verified}")
            print(f"üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result.credentials}")
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(result.screenshots)}")
            print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(result.errors)}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ —à–∞–≥–æ–≤
            print(f"\nüìã === –®–ê–ì–ò –ü–†–û–¶–ï–°–°–ê ===")
            for step in result.steps:
                status_emoji = "‚úÖ" if step.status == "completed" else "‚ùå" if step.status == "failed" else "‚è≥"
                print(f"{status_emoji} {step.step_name}: {step.status}")
                if step.error:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {step.error}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            orchestrator.save_registration_log(f"demo_log_{site['name'].replace(' ', '_').lower()}.json")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print(f"\n{'='*60}")
        await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏

async def demo_manual_temp_mail_check():
    """–î–µ–º–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π temp-mail —Å—Å—ã–ª–∫–∏"""
    print("\nüî• === –î–ï–ú–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π temp-mail ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API temp-mail.io –¥–ª—è –¥–µ–º–æ
    print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ temp-mail.io...")
    
    async with TempMailAgent() as agent:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π email
            temp_email = await agent.create_temp_email()
            print(f"üìß –°–æ–∑–¥–∞–Ω email: {temp_email.email}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —è—â–∏–∫
            print("üì¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º...")
            emails = await agent.check_inbox()
            
            if emails:
                print(f"üì® –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(emails)}")
                for i, email in enumerate(emails, 1):
                    print(f"  {i}. –û—Ç: {email.from_email}")
                    print(f"     –¢–µ–º–∞: {email.subject}")
                    print(f"     –î–∞—Ç–∞: {email.received_at}")
            else:
                print("üì≠ –í—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –Ω–µ—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–¥–æ–≤
            if emails:
                first_email = emails[0]
                link = await agent.extract_verification_link(first_email)
                code = await agent.extract_verification_code(first_email)
                
                if link:
                    print(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {link}")
                if code:
                    print(f"üî¢ –ù–∞–π–¥–µ–Ω –∫–æ–¥: {code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å temp-mail: {e}")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–ª—é—á")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AgentScope ===")
    print("–≠—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
    
    demos = [
        ("–†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π", demo_temp_mail),
        ("Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", demo_email_verification),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ temp-mail.io", demo_manual_temp_mail_check),
        ("–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", demo_full_registration),
    ]
    
    for name, demo_func in demos:
        print(f"\nüéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ: {name}")
        print("üìç –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        
        try:
            input()  # –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è Enter
            await demo_func()
        except KeyboardInterrupt:
            print("\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ '{name}': {e}")
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ {name}")
        
        print(f"\n‚úÖ –î–µ–º–æ '{name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ")
