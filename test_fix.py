"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TypeError —Å await
"""

import asyncio
from main import IntelligentRegistrationAgent

async def test_fix():
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TYPEERROR")
    print("=" * 35)
    
    agent = IntelligentRegistrationAgent("test_key")
    print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("ü§ñ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ page –æ–±—ä–µ–∫—Ç
        class MockPage:
            pass
        
        mock_page = MockPage()
        agent.init_agents(mock_page)  # –¢–µ–ø–µ—Ä—å –±–µ–∑ await
        print("‚úÖ init_agents —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    asyncio.run(test_fix())
