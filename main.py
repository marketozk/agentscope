"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å AgentScope ReAct –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""
import asyncio
import os
from playwright.async_api import async_playwright
import google.generativeai as genai
from PIL import Image
import io
import json
from dotenv import load_dotenv
import random
import string
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö AgentScope –∞–≥–µ–Ω—Ç–æ–≤
try:
    from agentscope.model import DashScopeChatModel
    from agentscope.memory import InMemoryMemory
    from src.element_finder_agent import ElementFinderAgent, ElementSearchResult
    from src.error_recovery_agent import ErrorRecoveryAgent, RecoveryResult
    from src.form_filler_agent import FormFillerAgent, FormFillResult
    from src.checkbox_agent import CheckboxAgent, CheckboxActionResult
    from src.page_analyzer_agent import PageAnalyzerAgent, PageAnalysis
    from src.registration_orchestrator import RegistrationOrchestrator
    AGENTSCOPE_AVAILABLE = True
    print("‚úÖ AgentScope –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    AGENTSCOPE_AVAILABLE = False
    print(f"‚ö†Ô∏è AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print("–†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Gemini")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from src.temp_mail_agent import TempMailAgent
from src.email_verification_agent import EmailVerificationAgent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

class IntelligentRegistrationAgent:
    def __init__(self, gemini_api_key: str):
        genai.configure(api_key=gemini_api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        self.temp_mail_agent = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
        
        # –ù–æ–≤—ã–µ AgentScope –∞–≥–µ–Ω—Ç—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ–∑–∂–µ —Å page)
        self.element_finder_agent = None
        self.error_recovery_agent = None
        self.form_filler_agent = None
        self.checkbox_agent = None
        self.page_analyzer_agent = None
        self.registration_orchestrator = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.action_delay = 3.0  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.page_load_delay = 5.0  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.typing_delay = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
        
        self.context = {
            "email": None,
            "password": None,
            "username": None,
            "phone": None,
            "first_name": None,
            "last_name": None,
            "birth_date": None,
            "company": None,
            "website": None,
            "country": "United States",
            "city": "New York",
            "zip_code": "10001",
            "address": "123 Test Street",
            "gender": "male",
            "preferences": {
                "newsletter": False,
                "marketing": False,
                "terms": True,
                "privacy": True
            }
        }
    
    def init_agents(self, page):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AgentScope –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è page"""
        if AGENTSCOPE_AVAILABLE:
            try:
                # –°–æ–∑–¥–∞—ë–º Gemini –º–æ–¥–µ–ª—å –¥–ª—è AgentScope –∞–≥–µ–Ω—Ç–æ–≤
                model = DashScopeChatModel(
                    model_name="gemini-1.5-flash",
                    api_key=os.getenv("GEMINI_API_KEY"),
                )
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
                self.element_finder_agent = ElementFinderAgent(page, model)
                self.error_recovery_agent = ErrorRecoveryAgent(page, model)
                self.form_filler_agent = FormFillerAgent(page, model)
                self.checkbox_agent = CheckboxAgent(page, model)
                self.page_analyzer_agent = PageAnalyzerAgent(page, model)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RegistrationOrchestrator –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
                self.registration_orchestrator = RegistrationOrchestrator()
                print("‚úÖ –í—Å–µ AgentScope –∞–≥–µ–Ω—Ç—ã –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
                self.element_finder_agent = None
                self.error_recovery_agent = None
                self.form_filler_agent = None
                self.checkbox_agent = None
                self.page_analyzer_agent = None
                self.registration_orchestrator = None
        else:
            print("‚ö†Ô∏è AgentScope –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥—ã")
            self.element_finder_agent = None
            self.error_recovery_agent = None
            self.form_filler_agent = None
            self.checkbox_agent = None
            self.page_analyzer_agent = None
            self.registration_orchestrator = None
        
    async def register_with_orchestrator(self, referral_link: str):
        """
        –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RegistrationOrchestrator
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
        """
        if not AGENTSCOPE_AVAILABLE or not self.registration_orchestrator:
            print("‚ö†Ô∏è RegistrationOrchestrator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥")
            return await self.register(referral_link)
        
        print("\nüé≠ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ß–ï–†–ï–ó ORCHESTRATOR")
        print("=" * 60)
        
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º URL –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            user_data = {
                "registration_url": referral_link,
                "user_context": self.context.copy()
            }
            
            print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ RegistrationOrchestrator...")
            result = await self.registration_orchestrator.start_registration(
                registration_url=referral_link,
                user_data=user_data
            )
            
            if result.success:
                print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìß Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {result.email_verified}")
                print(f"üîó –§–∏–Ω–∞–ª—å–Ω—ã–π URL: {result.final_url}")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
                for error in result.errors:
                    print(f"   üí• {error}")
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥...")
                return await self.register(referral_link)
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥...")
            return await self.register(referral_link)
        
    async def generate_user_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º email"""
        print("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        print(f"   üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {random_string}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —á–µ—Ä–µ–∑ TempMailAgent
        try:
            print("\nüìß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞...")
            print("   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É temp-mail.io...")
            async with TempMailAgent() as mail_agent:
                temp_email = await mail_agent.create_temp_email()
                if temp_email:
                    self.context["email"] = temp_email.email
                    self.temp_mail_agent = mail_agent
                    print(f"   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π email —Å–æ–∑–¥–∞–Ω: {temp_email.email}")
                    print(f"   ‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {temp_email.expires_at}")
                else:
                    print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —á–µ—Ä–µ–∑ API")
                    # Fallback –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É email
                    domains = ["tempmail.org", "10minutemail.com", "guerrillamail.com"]
                    selected_domain = random.choice(domains)
                    self.context["email"] = f"testuser_{random_string}@{selected_domain}"
                    print(f"   üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback email: {self.context['email']}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email: {e}")
            # Fallback –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É email
            domains = ["tempmail.org", "10minutemail.com", "guerrillamail.com"] 
            selected_domain = random.choice(domains)
            self.context["email"] = f"testuser_{random_string}@{selected_domain}"
            print(f"   üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback email: {self.context['email']}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüõ°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è...")
        self.context["password"] = f"SecurePass{random_string}123!"
        print(f"   ‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)")
        
        print("üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        self.context["username"] = f"user_{random_string}"
        self.context["first_name"] = "Test"
        self.context["last_name"] = "User"
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.context['first_name']} {self.context['last_name']}")
        print(f"   ‚úÖ Username: {self.context['username']}")
        
        print("üìû –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        self.context["phone"] = "+1234567890"
        self.context["company"] = f"Test Company {random_string}"
        self.context["website"] = f"https://test{random_string}.com"
        print(f"   ‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {self.context['phone']}")
        print(f"   ‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {self.context['company']}")
        print(f"   ‚úÖ –°–∞–π—Ç: {self.context['website']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 25 –¥–æ 45 –ª–µ—Ç)
        print("üéÇ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è...")
        age = random.randint(25, 45)
        birth_date = datetime.now() - timedelta(days=age*365)
        self.context["birth_date"] = birth_date.strftime("%m/%d/%Y")
        print(f"   ‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {self.context['birth_date']} (–≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç)")
        
        print("\nüìã –°–í–û–î–ö–ê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
        print("="*50)
        print(f"üìß Email: {self.context['email']}")
        print(f"üõ°Ô∏è Password: {self.context['password']}")
        print(f"üë§ Username: {self.context['username']}")
        print(f"üéÇ Birth Date: {self.context['birth_date']}")
        print(f"üìû Phone: {self.context['phone']}")
        print(f"üè¢ Company: {self.context['company']}")
        print(f"üåê Website: {self.context['website']}")
        print("="*50)
        
    async def simulate_human_behavior(self, page):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("   üé≠ –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        for _ in range(random.randint(2, 4)):
            x = random.randint(100, 1200)
            y = random.randint(100, 600)
            await page.mouse.move(x, y)
            await asyncio.sleep(random.uniform(0.1, 0.3))
        
        # –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        scroll_amount = random.randint(-200, 200)
        await page.evaluate(f"window.scrollBy(0, {scroll_amount})")
        await asyncio.sleep(random.uniform(0.5, 1.0))
    
    async def simulate_page_viewing(self, page):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        print("   üëÄ –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        viewport_height = await page.evaluate("window.innerHeight")
        page_height = await page.evaluate("document.body.scrollHeight")
        
        if page_height > viewport_height:
            # –ú–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            scroll_steps = random.randint(3, 6)
            scroll_per_step = page_height // scroll_steps
            
            for i in range(scroll_steps):
                await page.evaluate(f"window.scrollTo(0, {scroll_per_step * i})")
                await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–≤–µ—Ä—Ö
            await page.evaluate("window.scrollTo(0, 0)")
            await asyncio.sleep(random.uniform(0.5, 1.0))
    
    async def human_like_fill(self, element, text):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫"""
        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ
        await element.click()
        await asyncio.sleep(random.uniform(0.1, 0.3))
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        await element.fill("")
        await asyncio.sleep(random.uniform(0.1, 0.2))
        
        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏
        for char in text:
            await element.type(char, delay=random.randint(50, 150))
            # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
            if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã
                await asyncio.sleep(random.uniform(0.2, 0.5))

    def get_xpath_fallback_selectors(self, action_type: str) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ XPath —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π"""
        
        if action_type == "fill":
            return [
                # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'input[type="email"]', 'input[name*="email"]', '[placeholder*="email"]',
                'input[type="text"]', 'input[name*="name"]', '[placeholder*="name"]',
                'input[type="password"]', 'input[name*="password"]', '[placeholder*="password"]',
                'input[name*="company"]', '[placeholder*="company"]',
                'textarea[name*="message"]', '[placeholder*="message"]',
                # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
                'xpath=//input[@type="email"]',
                'xpath=//input[contains(@name,"email")]',
                'xpath=//input[contains(@placeholder,"email")]',
                'xpath=//input[@type="text"]',
                'xpath=//input[contains(@name,"name")]',
                'xpath=//input[contains(@placeholder,"name")]',
                'xpath=//input[@type="password"]',
                'xpath=//input[contains(@name,"password")]',
                'xpath=//input[contains(@placeholder,"password")]',
                'xpath=//input[contains(@name,"company")]',
                'xpath=//input[contains(@placeholder,"company")]',
                'xpath=//textarea[contains(@name,"message")]',
                'xpath=//textarea[contains(@placeholder,"message")]',
                'xpath=//input[@type="text"][position()=1]',  # –ü–µ—Ä–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                'xpath=//input[@type="text"][position()=last()]'  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            ]
            
        elif action_type == "click":
            return [
                # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'button[type="submit"]',
                '[role="button"]', 
                'button:visible',
                '[aria-label*="next"]',
                '[aria-label*="continue"]',
                '[aria-label*="submit"]',
                '[data-testid*="next"]',
                '[data-testid*="submit"]',
                'button[class*="submit"]',
                'button[class*="next"]',
                'button[class*="continue"]',
                'input[type="submit"]',
                '.submit-button',
                '.next-button',
                '.continue-button',
                # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'xpath=//button[@type="submit"]',
                'xpath=//input[@type="submit"]',
                'xpath=//*[@role="button"]',
                'xpath=//button[contains(@class,"submit")]',
                'xpath=//button[contains(@class,"next")]',
                'xpath=//button[contains(@class,"continue")]',
                'xpath=//button[contains(@aria-label,"next")]',
                'xpath=//button[contains(@aria-label,"continue")]',
                'xpath=//button[contains(@aria-label,"submit")]',
                'xpath=//button[contains(text(),"‚Üí")]',
                'xpath=//button[contains(text(),"Next")]',
                'xpath=//button[contains(text(),"Continue")]',
                'xpath=//button[contains(text(),"Submit")]',
                'xpath=//button[position()=last()]',  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                'xpath=//*[contains(@class,"btn") and contains(@class,"submit")]',
                'xpath=//*[contains(@class,"button") and contains(@class,"primary")]'
            ]
            
        elif action_type == "checkbox":
            return [
                # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'input[type="checkbox"]',
                '[role="checkbox"]',
                'label input[type="checkbox"]',
                # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'xpath=//input[@type="checkbox"]',
                'xpath=//*[@role="checkbox"]',
                'xpath=//label//input[@type="checkbox"]',
                'xpath=//input[@type="checkbox"][position()=1]',
                'xpath=//input[@type="checkbox"][position()=last()]'
            ]
            
        return []
    
    async def human_like_element_click(self, page, element) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ –ø–æ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É"""
        try:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await element.scroll_into_view_if_needed()
            await asyncio.sleep(random.uniform(0.2, 0.4))
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            box = await element.bounding_box()
            if box:
                x = box['x'] + box['width'] / 2 + random.uniform(-3, 3)
                y = box['y'] + box['height'] / 2 + random.uniform(-3, 3)
                await page.mouse.move(x, y)
                await asyncio.sleep(random.uniform(0.1, 0.2))
            
            await element.click(timeout=3000)
            return True
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {e}")
            return False

    async def human_like_click(self, page, selector: str, description: str = "", is_optional: bool = False) -> bool:
        """–£–º–Ω—ã–π –∫–ª–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AgentScope ReAct –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            print(f"   üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–∫–∞...")
            print(f"   üéØ –ù–∞—á–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: '{selector}'")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
            success = await self._try_selector_click(page, selector)
            if success:
                print(f"   ‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º!")
                return True
            
            print(f"   ‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–≥–æ AgentScope –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            if AGENTSCOPE_AVAILABLE and self.element_finder_agent:
                print(f"   ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º ElementFinder Agent...")
                try:
                    search_result = await self.element_finder_agent.find_element(description, "button")
                    
                    if search_result.success and search_result.selector:
                        print(f"   üéØ Agent –Ω–∞—à—ë–ª —Å–µ–ª–µ–∫—Ç–æ—Ä: '{search_result.selector}' (confidence: {search_result.confidence})")
                        success = await self._try_selector_click(page, search_result.selector)
                        if success:
                            print(f"   ‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å Agent —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º!")
                            return True
                        
                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                        for alt_selector in search_result.alternative_selectors:
                            print(f"   üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: '{alt_selector}'")
                            success = await self._try_selector_click(page, alt_selector)
                            if success:
                                print(f"   ‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º!")
                                return True
                    
                    print(f"   üí≠ Agent —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ: {search_result.reasoning}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ ElementFinder Agent: {e}")
            
            # –ï—Å–ª–∏ AgentScope –∞–≥–µ–Ω—Ç –Ω–µ –ø–æ–º–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º Error Recovery Agent
            if AGENTSCOPE_AVAILABLE and self.error_recovery_agent:
                print(f"   üö® –ó–∞–ø—É—Å–∫–∞–µ–º Error Recovery Agent...")
                try:
                    error_context = {
                        'action_type': 'click',
                        'selector': selector,
                        'description': description,
                        'page_url': page.url,
                        'required': not is_optional
                    }
                    
                    recovery_result = await self.error_recovery_agent.recover_from_error(error_context)
                    
                    if recovery_result.success:
                        print(f"   ‚úÖ Recovery Agent —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª: {recovery_result.action_taken}")
                        return True
                    else:
                        print(f"   ‚ö†Ô∏è Recovery Agent –Ω–µ —Å–º–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {recovery_result.action_taken}")
                
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ Recovery Agent: {e}")
            
            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ AgentScope
            if not AGENTSCOPE_AVAILABLE:
                print(f"   üîÑ Fallback: –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
                
                # –ü—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                fallback_selectors = self.get_xpath_fallback_selectors("click")
                for fallback_selector in fallback_selectors:
                    success = await self._try_selector_click(page, fallback_selector)
                    if success:
                        print(f"   ‚úÖ Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_selector}")
                        return True
                
                # –ü—Ä–æ–±—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                try:
                    print(f"   ‚å®Ô∏è –ü—Ä–æ–±—É–µ–º Enter...")
                    original_url = page.url
                    await page.keyboard.press('Enter')
                    await asyncio.sleep(2)
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL
                    current_url = page.url
                    if current_url != original_url:
                        print(f"   ‚úÖ Enter —Å—Ä–∞–±–æ—Ç–∞–ª!")
                        return True
                except:
                    pass
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ
            if is_optional:
                print(f"   ‚ÑπÔ∏è –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return True
            else:
                print(f"   ‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                timestamp = datetime.now().strftime("%H%M%S")
                screenshot_path = f"debug_screenshot_{timestamp}.png"
                await page.screenshot(path=screenshot_path)
                print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
            return is_optional
    
    async def _try_selector_click(self, page, selector: str) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É"""
        try:
            await page.wait_for_selector(selector, timeout=3000, state='visible')
            element = page.locator(selector)
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            await element.scroll_into_view_if_needed()
            await asyncio.sleep(random.uniform(0.2, 0.4))
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            box = await element.bounding_box()
            if box:
                x = box['x'] + box['width'] / 2 + random.uniform(-3, 3)
                y = box['y'] + box['height'] / 2 + random.uniform(-3, 3)
                await page.mouse.move(x, y)
                await asyncio.sleep(random.uniform(0.1, 0.2))
            
            await element.click(timeout=3000)
            return True
            
        except Exception:
            return False
    
    def is_relevant_button(self, button_text: str, description: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        if not button_text:
            return False
            
        button_text = button_text.lower().strip()
        description = description.lower()
        
        # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        exact_matches = [
            ("accept all", ["accept all", "accept cookies"]),
            ("continue without", ["continue without", "skip", "not now", "later"]),
            ("create account", ["create", "sign up", "register", "join"]),
            ("login", ["login", "sign in", "log in"]),
            ("submit", ["submit", "send", "continue", "next"])
        ]
        
        for desc_key, text_variants in exact_matches:
            if desc_key in description:
                for variant in text_variants:
                    if variant in button_text:
                        return True
        
        return False
    
    def get_text_patterns(self, description: str) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = description.lower()
        patterns = []
        
        if "accept all" in description or "accept" in description:
            patterns.extend([
                "Accept All",
                "Accept all cookies",
                "Accept",
                "OK",
                "Agree",
                "I Accept"
            ])
        elif "continue without" in description or "skip" in description:
            patterns.extend([
                "Continue without accepting",
                "Continue without",
                "Skip",
                "Not now",
                "Later",
                "No thanks",
                "Decline"
            ])
        elif "create account" in description or "create" in description:
            patterns.extend([
                "Create account",
                "Create Account",
                "Sign up",
                "Sign Up",
                "Register",
                "Join",
                "Get Started"
            ])
        elif "login" in description:
            patterns.extend([
                "Login",
                "Log in",
                "Sign in",
                "Sign In"
            ])
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns.extend([
                "Continue",
                "Next",
                "Submit",
                "OK",
                "Confirm"
            ])
        
        return patterns
    
    async def debug_available_buttons(self, page):
        """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        print("   üîç –û–¢–õ–ê–î–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
        
        try:
            # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            buttons = await page.query_selector_all("button, [role='button'], input[type='button'], input[type='submit'], a")
            
            for i, button in enumerate(buttons[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                try:
                    is_visible = await button.is_visible()
                    if is_visible:
                        text = await button.text_content()
                        tag_name = await button.evaluate("el => el.tagName")
                        classes = await button.get_attribute("class") or ""
                        aria_label = await button.get_attribute("aria-label") or ""
                        
                        print(f"      {i+1}. {tag_name}: '{text}' (class: {classes[:30]}, aria: {aria_label[:30]})")
                except:
                    continue
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
    
    async def ask_gemini_for_selector(self, screenshot: bytes, page_html: str, description: str, action_type: str) -> str:
        """–ü—Ä–æ—Å–∏—Ç Gemini –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            image = Image.open(io.BytesIO(screenshot))
            
            prompt = f"""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ HTML –∞–Ω–∞–ª–∏–∑—É –∏ —Å–æ–∑–¥–∞–Ω–∏—é XPath —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤. –ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ.
            
            –ó–ê–î–ê–ß–ê: {description}
            –¢–ò–ü –î–ï–ô–°–¢–í–ò–Ø: {action_type}
            
            –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç. –ù–∞–π–¥–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞–π –¢–û–ß–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä.
            
            HTML –∫–æ–¥ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
            {page_html}
            
            –ü–û–®–ê–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:
            1. –ü—Ä–æ—á–∏—Ç–∞–π –í–ï–°–¨ HTML –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            2. –ù–∞–π–¥–∏ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞—á–µ: "{description}"
            3. –ò–∑—É—á–∏ –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞: id, class, data-*, aria-*, type, role, name, value, placeholder
            4. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π
            5. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ –ø–æ—Ö–æ–∂–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            6. –°–æ–∑–¥–∞–π –°–ê–ú–´–ô –¢–û–ß–ù–´–ô –∏ –£–ù–ò–ö–ê–õ–¨–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä
            
            –¢–ò–ü–´ –°–ï–õ–ï–ö–¢–û–†–û–í (–∏—Å–ø–æ–ª—å–∑—É–π –ª—é–±–æ–π, –∫–∞–∫–æ–π –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç):
            
            CSS –°–ï–õ–ï–ö–¢–û–†–´:
            - #unique-id (–ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
            - .class-name
            - [data-testid="value"]
            - [aria-label="text"]
            - input[type="email"]
            - button[class*="submit"]
            - text="—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç"
            - button:has-text("—á–∞—Å—Ç–∏—á–Ω—ã–π")
            
            XPATH –°–ï–õ–ï–ö–¢–û–†–´ (–∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤):
            - xpath=//button[@id='specific-id']
            - xpath=//button[contains(@class,'submit-button')]
            - xpath=//button[text()='–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç']
            - xpath=//button[contains(text(),'–ß–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç')]
            - xpath=//button[contains(@aria-label,'–æ–ø–∏—Å–∞–Ω–∏–µ')]
            - xpath=//div[@class='form']//button[1]
            - xpath=//button[contains(@class,'primary') and contains(@class,'submit')]
            - xpath=//button[contains(@onclick,'function')]
            - xpath=//button[@type='submit' and contains(@class,'btn')]
            - xpath=//*[@role='button'][position()=2]
            - xpath=//form//button[last()]
            - xpath=//div[contains(@class,'actions')]//button[contains(text(),'Next')]
            - xpath=//button[ancestor::div[@class='specific-parent']]
            - xpath=//button[following-sibling::input[@type='text']]
            - xpath=//button[preceding-sibling::label[text()='Company']]
            
            –ü–†–û–î–í–ò–ù–£–¢–´–ï XPATH (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤):
            - xpath=//button[normalize-space(text())='‚Üí']
            - xpath=//button[contains(@style,'background') and not(@disabled)]
            - xpath=//button[count(preceding-sibling::button)=1]
            - xpath=//div[@class='button-container']//button[contains(@class,'primary')]
            - xpath=//form[@id='registration']//button[@type='submit']
            - xpath=//button[contains(@class,'icon') and contains(@aria-label,'continue')]
            
            –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò:
            - –î–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ —Å—Ç—Ä–µ–ª–∫–∞–º–∏: xpath=//button[text()='‚Üí'] –∏–ª–∏ xpath=//button[contains(@aria-label,'next')]
            - –î–ª—è –∏–∫–æ–Ω–æ–∫: xpath=//button[contains(@class,'icon')] –∏–ª–∏ xpath=//*[@role='button'][contains(@class,'icon')]
            - –î–ª—è –ø–æ–∑–∏—Ü–∏–∏: xpath=//button[position()=2] –∏–ª–∏ xpath=//div//button[last()]
            - –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: xpath=//div[@class='actions']//button
            
            –ê–õ–ì–û–†–ò–¢–ú –°–û–ó–î–ê–ù–ò–Ø XPATH:
            1. –ù–∞–π–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç (id, data-testid) - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ
            2. –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–±–∏–Ω–∞—Ü–∏—é class + text/aria-label
            3. –ú–Ω–æ–≥–æ –ø–æ—Ö–æ–∂–∏—Ö? –ò—Å–ø–æ–ª—å–∑—É–π position() –∏–ª–∏ ancestor/descendant
            4. –°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞? –ò—Å–ø–æ–ª—å–∑—É–π –ø—É—Ç—å –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è: //parent//child
            5. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: —Ç–æ—á–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è
            
            –í–ê–ñ–ù–û:
            - –°–æ–∑–¥–∞–≤–∞–π –°–ê–ú–´–ô –ù–ê–î–ï–ñ–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä
            - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            - –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π - –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            - –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ—Ö–æ–∂–∏—Ö - –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
            - XPath –±–æ–ª–µ–µ –º–æ—â–Ω—ã–π —á–µ–º CSS - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            
            –ò–∑—É—á–∏ HTML –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–µ–ª–µ–∫—Ç–æ—Ä, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
            –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏ "NOT_FOUND".
            """
            
            response = self.model.generate_content([prompt, image])
            selector = response.text.strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if '```' in selector:
                selector = selector.split('```')[1].strip()
            
            # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            selector = selector.replace('\n', '').strip()
            
            if selector == "NOT_FOUND" or not selector:
                return None
                
            return selector
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {e}")
            return None
        
    async def register(self, referral_link: str):
        print("\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–¶–ï–°–° –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print("üìù –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        await self.generate_user_data()
        
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±—Ä–∞—É–∑–µ—Ä–∞...")
        await asyncio.sleep(3)
        
        async with async_playwright() as p:
            print("\nüåê –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            browser_args = [
                '--no-first-run',
                '--no-default-browser-check',
                '--disable-blink-features=AutomationControlled',
                '--disable-features=VizDisplayCompositor',
                '--disable-ipc-flooding-protection',
                '--disable-renderer-backgrounding',
                '--disable-backgrounding-occluded-windows',
                '--disable-field-trial-config',
                '--disable-back-forward-cache',
                '--disable-background-timer-throttling',
                '--disable-renderer-backgrounding',
                '--disable-features=TranslateUI',
                '--disable-features=BlinkGenPropertyTrees',
                '--no-sandbox',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--hide-scrollbars',
                '--mute-audio',
                '--disable-background-networking',
                '--disable-default-apps',
                '--disable-extensions',
                '--disable-sync',
                '--disable-translate',
                '--disable-logging',
                '--disable-permissions-api',
                '--disable-client-side-phishing-detection',
                '--disable-component-extensions-with-background-pages',
                '--disable-background-timer-throttling',
                '--disable-ipc-flooding-protection',
                '--disable-hang-monitor',
                '--disable-prompt-on-repost',
                '--disable-domain-reliability',
                '--disable-component-update',
                '--disable-background-networking',
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]
            
            browser = await p.chromium.launch(
                headless=False,
                slow_mo=500,  # –ù–µ–º–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª—è–µ–º –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                args=browser_args,
                channel="chrome"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π Chrome –≤–º–µ—Å—Ç–æ Chromium
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            print("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            context = await browser.new_context(
                viewport={"width": 1366, "height": 768},  # –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                locale="en-US",
                timezone_id="America/New_York",
                geolocation={"latitude": 40.7128, "longitude": -74.0060},  # –ù—å—é-–ô–æ—Ä–∫
                permissions=["geolocation"],
                color_scheme="light",
                extra_http_headers={
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
                    "Accept-Language": "en-US,en;q=0.9",
                    "Accept-Encoding": "gzip, deflate, br",
                    "DNT": "1",
                    "Connection": "keep-alive",
                    "Upgrade-Insecure-Requests": "1",
                    "Sec-Fetch-Dest": "document",
                    "Sec-Fetch-Mode": "navigate",
                    "Sec-Fetch-Site": "none",
                    "Sec-Fetch-User": "?1",
                    "Cache-Control": "max-age=0"
                }
            )
            
            page = await context.new_page()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AgentScope –∞–≥–µ–Ω—Ç–æ–≤
            print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AgentScope –∞–≥–µ–Ω—Ç–æ–≤...")
            self.init_agents(page)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏...")
            
            # –£–¥–∞–ª—è–µ–º webdriver –ø—Ä–∏–∑–Ω–∞–∫–∏
            await page.add_init_script("""
                // –£–¥–∞–ª—è–µ–º webdriver —Ñ–ª–∞–≥–∏
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º permissions
                const originalQuery = window.navigator.permissions.query;
                window.navigator.permissions.query = (parameters) => (
                    parameters.name === 'notifications' ?
                        Promise.resolve({ state: Notification.permission }) :
                        originalQuery(parameters)
                );
                
                // –î–µ–ª–∞–µ–º chrome –æ–±—ä–µ–∫—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º
                window.chrome = {
                    runtime: {},
                    loadTimes: function() {},
                    csi: function() {},
                    app: {}
                };
                
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–≥–∏–Ω—ã
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
                
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en'],
                });
                
                // –≠–º—É–ª–∏—Ä—É–µ–º –±–∞—Ç–∞—Ä–µ—é
                navigator.getBattery = () => Promise.resolve({
                    charging: true,
                    chargingTime: 0,
                    dischargingTime: Infinity,
                    level: 1
                });
            """)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
            await page.set_viewport_size({"width": 1366, "height": 768})
            
            # –≠–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await page.set_extra_http_headers({
                "sec-ch-ua": '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": '"Windows"'
            })
            
            try:
                print(f"\nüîó –®–∞–≥ 3: –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ...")
                print(f"   URL: {referral_link}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                random_delay = random.uniform(2, 5)
                print(f"   ‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ {random_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º...")
                await asyncio.sleep(random_delay)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –¥–≤–∏–≥–∞–µ–º –º—ã—à—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                await self.simulate_human_behavior(page)
                
                await page.goto(referral_link, wait_until='networkidle')
                
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.page_load_delay} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                await asyncio.sleep(self.page_load_delay)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await self.simulate_page_viewing(page)
                
                for step in range(1, 30):
                    print(f"\n{'='*60}")
                    print(f"üìç –®–ê–ì –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò #{step}")
                    print(f"{'='*60}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    current_url = page.url
                    print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    screenshot = await page.screenshot()
                    
                    # –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    print("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ HTML –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    page_html = await page.content()
                    
                    print("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Gemini AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
                    print("   ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
                    
                    # Gemini –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å
                    actions = await self.analyze_and_decide(screenshot, page_html, current_url)
                    
                    if not actions:
                        print("‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print("   ‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API")
                        print("   ‚Ä¢ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        print("   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
                        
                        print(f"\n‚è≥ –ü–∞—É–∑–∞ {self.action_delay * 2} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(self.action_delay * 2)
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if actions.get("completed", False):
                        print("\nüéâ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
                        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                        break
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ –∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
                    print(f"\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞–π–¥–µ–Ω–æ {len(actions.get('actions', []))} –¥–µ–π—Å—Ç–≤–∏–π)...")
                    success = await self.execute_gemini_actions_slowly(page, actions)
                    
                    if not success:
                        print("‚ö†Ô∏è –ù–µ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
                        
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á—Ç–µ–Ω–∏—è
                    reading_time = random.uniform(self.page_load_delay, self.page_load_delay * 2)
                    print(f"\nüìñ –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è ({reading_time:.1f} —Å–µ–∫—É–Ω–¥)...")
                    await asyncio.sleep(reading_time)
                    
                    # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
                    await self.simulate_human_behavior(page)
                    
                else:
                    print(f"\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ ({30})")
                    print("   –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
            except Exception as e:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                error_context = {
                    "url": page.url if 'page' in locals() else "unknown",
                    "step": "registration_process"
                }
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorRecoveryAgent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
                if AGENTSCOPE_AVAILABLE and self.error_recovery_agent:
                    try:
                        print("üö® –ó–∞–ø—É—Å–∫–∞–µ–º Error Recovery Agent...")
                        recovery_result = await self.error_recovery_agent.recover_from_error(error_context)
                        if recovery_result.success:
                            print(f"‚úÖ Recovery Agent: {recovery_result.action_taken}")
                        else:
                            print(f"‚ö†Ô∏è Recovery Agent: {recovery_result.action_taken}")
                    except Exception as recovery_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ Recovery Agent: {recovery_error}")
                else:
                    print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
                
            finally:
                print("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
                input()
                await context.close()
                await browser.close()
                print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")
    
    async def analyze_and_decide(self, screenshot: bytes, page_html: str, current_url: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö (—Å PageAnalyzerAgent)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PageAnalyzerAgent –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if AGENTSCOPE_AVAILABLE and self.page_analyzer_agent:
                print("   ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º PageAnalyzer Agent –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
                try:
                    page_analysis = await self.page_analyzer_agent.analyze_current_page()
                    
                    print(f"   üìÑ –¢–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_analysis.page_type} (confidence: {page_analysis.page_confidence:.2f})")
                    print(f"   üéØ –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {page_analysis.main_action}")
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(page_analysis.interactive_elements)}")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ PageAnalyzer –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è execute_gemini_actions_slowly
                    actions = []
                    
                    if page_analysis.page_type == "registration":
                        # –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                        form_elements = [e for e in page_analysis.interactive_elements if e.element_type in ['input', 'textarea']]
                        for element in form_elements[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            field_value = self._get_value_for_field(element.text, element.attributes)
                            if field_value:
                                actions.append({
                                    "type": "fill",
                                    "selector": element.selector,
                                    "value": field_value,
                                    "description": f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è: {element.text[:30]}",
                                    "required": True
                                })
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ–∫–±–æ–∫—Å–æ–≤
                        checkbox_elements = [e for e in page_analysis.interactive_elements if e.element_type == 'input' and e.attributes.get('type') == 'checkbox']
                        for checkbox in checkbox_elements[:3]:
                            actions.append({
                                "type": "check" if "terms" in checkbox.text.lower() or "privacy" in checkbox.text.lower() else "uncheck",
                                "selector": checkbox.selector,
                                "value": "",
                                "description": f"–ß–µ–∫–±–æ–∫—Å: {checkbox.text[:30]}",
                                "required": False
                            })
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                        button_elements = [e for e in page_analysis.interactive_elements if e.element_type == 'button']
                        if button_elements:
                            actions.append({
                                "type": "click",
                                "selector": button_elements[0].selector,
                                "value": "",
                                "description": f"–ö–Ω–æ–ø–∫–∞: {button_elements[0].text[:30]}",
                                "required": True
                            })
                    
                    elif page_analysis.page_type == "success":
                        return {
                            "page_analysis": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
                            "page_type": "success",
                            "completed": True,
                            "actions": [],
                            "next_step": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                        }
                    
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                        button_elements = [e for e in page_analysis.interactive_elements if e.element_type == 'button']
                        for button in button_elements[:2]:
                            actions.append({
                                "type": "click",
                                "selector": button.selector,
                                "value": "",
                                "description": f"–ö–Ω–æ–ø–∫–∞: {button.text[:30]}",
                                "required": False
                            })
                    
                    return {
                        "page_analysis": page_analysis.reasoning,
                        "page_type": page_analysis.page_type,
                        "completed": page_analysis.page_type == "success",
                        "actions": actions,
                        "detected_elements": {
                            "forms": [str(page_analysis.forms_count)],
                            "buttons": [e.text[:30] for e in page_analysis.interactive_elements if e.element_type == 'button'][:3],
                            "links": page_analysis.navigation_options[:3]
                        },
                        "next_step": page_analysis.next_step_prediction
                    }
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ PageAnalyzer Agent: {e}")
                    # Fallback –∫ Gemini
            
            # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É Gemini –∞–Ω–∞–ª–∏–∑—É
            print("   ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
            image = Image.open(io.BytesIO(screenshot))
            
            prompt = f"""
            –¢—ã - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö.
            
            –¢–µ–∫—É—â–∏–π URL: {current_url}
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º):
            - Email: {self.context['email']}
            - Password: {self.context['password']}
            - Username: {self.context['username']}
            - First Name: {self.context['first_name']}
            - Last Name: {self.context['last_name']}
            - Phone: {self.context['phone']}
            - Birth Date: {self.context['birth_date']}
            - Company: {self.context['company']}
            - Website: {self.context['website']}
            - Country: {self.context['country']}
            - City: {self.context['city']}
            - Zip Code: {self.context['zip_code']}
            - Address: {self.context['address']}
            - Gender: {self.context['gender']}
            
            –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:
            - –î–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (company, website) - –∑–∞–ø–æ–ª–Ω—è–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
            - –î–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤: —Å–æ–≥–ª–∞—à–∞–π—Å—è —Å terms/privacy, –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç marketing/newsletter
            - –î–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞: –≤—ã–±–∏—Ä–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π/trial/free –≤–∞—Ä–∏–∞–Ω—Ç
            - –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "Skip" –∏–ª–∏ "Later" –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë
            - –î–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤: –≤—ã–±–∏—Ä–∞–π –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            
            –í–ê–ñ–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Playwright —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:
            - text="—Ç–æ—á–Ω—ã–π_—Ç–µ–∫—Å—Ç" (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¢–û–ß–ù–û–ú–£ —Ç–µ–∫—Å—Ç—É)
            - button:has-text("—á–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç") (–¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
            - input[type="email"] (CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            - [data-testid="selector"] (data –∞—Ç—Ä–∏–±—É—Ç—ã)
            - [aria-label="—Ç–µ–∫—Å—Ç"] (ARIA –∞—Ç—Ä–∏–±—É—Ç—ã)
            - button[type="submit"] (–∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏)
            - [role="button"] (—ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–æ–ª—å—é –∫–Ω–æ–ø–∫–∏)
            - xpath=//button[contains(text(),'—Ç–µ–∫—Å—Ç')] (XPath –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
            - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π :contains() - —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Playwright!
            
            –ü–†–ò–ú–ï–†–´ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:
            - –î–ª—è –∫–Ω–æ–ø–∫–∏ "Accept All": text="Accept All" –∏–ª–∏ button:has-text("Accept")
            - –î–ª—è –∫–Ω–æ–ø–∫–∏-—Å—Ç—Ä–µ–ª–∫–∏ "‚Üí": xpath=//button[contains(text(),'‚Üí')] –∏–ª–∏ [aria-label*="next"]
            - –î–ª—è –ø–æ–ª—è email: input[type="email"] –∏–ª–∏ [placeholder*="email"]
            - –î–ª—è —á–µ–∫–±–æ–∫—Å–∞: input[type="checkbox"] –∏–ª–∏ [role="checkbox"]
            - –î–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: select –∏–ª–∏ [role="combobox"]
            - –î–ª—è –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: button[type="submit"] –∏–ª–∏ xpath=//button[position()=last()]
            
            –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –∏—â–∏:
            - –¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
            - –¢–∏–ø—ã –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            - Aria-labels –∏ data –∞—Ç—Ä–∏–±—É—Ç—ã
            - –ö–ª–∞—Å—Å—ã –∏ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
            1. –ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
            2. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
            3. –ï—Å—Ç—å –ª–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            
            –û–ß–ï–ù–¨ –í–ê–ñ–ù–û –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:
            - –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
            - –ù–∞–π–¥–∏ –¢–û–ß–ù–´–ô —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            - –ò—Å–ø–æ–ª—å–∑—É–π text="—Ç–æ—á–Ω—ã–π_—Ç–µ–∫—Å—Ç" –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
            - –ò—â–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (data-testid, aria-label, id, class)
            - –ü—Ä–æ–≤–µ—Ä—å HTML –∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            - –î–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: button[type="submit"], [role="button"], xpath
            - –î–ª—è —Å—Ç—Ä–µ–ª–æ–∫ –∏ –∏–∫–æ–Ω–æ–∫: xpath=//button[contains(text(),'‚Üí')] –∏–ª–∏ [aria-label*="next"]
            
            –ü–†–ò–û–†–ò–¢–ï–¢ –°–ï–õ–ï–ö–¢–û–†–û–í:
            1. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID: #unique-id
            2. Data –∞—Ç—Ä–∏–±—É—Ç—ã: [data-testid="value"]  
            3. Aria –∞—Ç—Ä–∏–±—É—Ç—ã: [aria-label="value"]
            4. –¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç: text="exact text"
            5. CSS –∫–ª–∞—Å—Å—ã: [class*="submit"]
            6. Type –∞—Ç—Ä–∏–±—É—Ç—ã: button[type="submit"]
            7. XPath –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: xpath=//button[position()=last()]
            
            HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤):
            {page_html[:3000]}
            
            –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏:
            {{
                "page_analysis": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                "page_type": "registration/login/verification/success/captcha/profile_setup/plan_selection/onboarding/error/other",
                "completed": false,
                "has_optional_fields": false,
                "can_skip": false,
                "actions": [
                    {{
                        "type": "fill/click/select/check/uncheck/wait/scroll/skip",
                        "selector": "–ü–†–ê–í–ò–õ–¨–ù–´–ô Playwright —Å–µ–ª–µ–∫—Ç–æ—Ä",
                        "value": "–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è/–≤—ã–±–æ—Ä–∞",
                        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
                        "required": true/false
                    }}
                ],
                "detected_elements": {{
                    "forms": ["–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"],
                    "buttons": ["—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"],
                    "links": ["–≤–∞–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏"]
                }},
                "next_step": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —à–∞–≥–∞"
            }}
            
            –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:
            - type="fill" - –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            - type="select" - –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
            - type="check"/"uncheck" - –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
            - type="click" - –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Å—Å—ã–ª–æ–∫
            - type="skip" - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
            - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            - –ò—â–∏ –∫–Ω–æ–ø–∫–∏ "Skip", "Later", "Not now", "Continue without"
            """
            
            response = self.model.generate_content([prompt, image])
            json_text = response.text.strip()
            
            # –û—á–∏—Å—Ç–∫–∞ JSON –æ—Ç markdown
            if '```' in json_text:
                parts = json_text.split('```')
                for part in parts:
                    if '{' in part and '}' in part:
                        json_text = part.strip()
                        if json_text.startswith('json'):
                            json_text = json_text[4:].strip()
                        break
            
            actions = json.loads(json_text)
            
            print(f"\nü§ñ Gemini –∞–Ω–∞–ª–∏–∑:")
            print(f"üìÑ –¢–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {actions.get('page_type', 'unknown')}")
            print(f"üí≠ –û–ø–∏—Å–∞–Ω–∏–µ: {actions.get('page_analysis', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            print(f"üîò –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: {'–î–∞' if actions.get('can_skip', False) else '–ù–µ—Ç'}")
            print(f"‚û°Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {actions.get('next_step', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            detected = actions.get('detected_elements', {})
            if detected.get('buttons'):
                print(f"üîò –ö–Ω–æ–ø–∫–∏: {', '.join(detected['buttons'][:3])}")
            
            return actions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Gemini: {e}")
            return None
    
    async def execute_gemini_actions_slowly(self, page, gemini_response: dict) -> bool:
        """–ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        actions = gemini_response.get("actions", [])
        
        if not actions:
            print("üì≠ –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:")
            print("   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
            print("   ‚Ä¢ AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
            return True
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        for i, action in enumerate(actions, 1):
            print(f"   {i}. {action.get('description', '–î–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        success_count = 0
        
        for i, action in enumerate(actions):
            action_type = action.get("type")
            selector = action.get("selector")
            value = action.get("value", "")
            description = action.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            required = action.get("required", True)
            
            print(f"\nüîß –î–ï–ô–°–¢–í–ò–ï {i+1}/{len(actions)}")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            print(f"   üéØ –¢–∏–ø: {action_type}")
            print(f"   üîç –°–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
            if value:
                print(f"   üíæ –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
            if not required:
                print(f"   ‚ÑπÔ∏è –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            print(f"   ‚è≥ –ü–∞—É–∑–∞ {self.action_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º...")
            await asyncio.sleep(self.action_delay)
            
            try:
                if action_type == "fill":
                    print("   üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FormFillerAgent –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if AGENTSCOPE_AVAILABLE and self.form_filler_agent:
                        print("   ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º FormFiller Agent...")
                        try:
                            from src.form_filler_agent import FormFieldInfo
                            field_info = FormFieldInfo(
                                selector=selector,
                                field_type="text",
                                label=description,
                                placeholder="",
                                required=required,
                                validation_pattern=None,
                                confidence=0.8
                            )
                            
                            fill_success = await self.form_filler_agent.fill_specific_field(field_info, value)
                            if fill_success:
                                print(f"   ‚úÖ FormFiller Agent —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª –ø–æ–ª–µ!")
                                success_count += 1
                            else:
                                print(f"   ‚ö†Ô∏è FormFiller Agent –Ω–µ —Å–º–æ–≥ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ FormFiller Agent: {e}")
                            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
                            element = await page.wait_for_selector(selector, timeout=10000)
                            if element:
                                await self.human_like_fill(element, value)
                                success_count += 1
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                        element = await page.wait_for_selector(selector, timeout=10000)
                        if element:
                            print("   ‚úÖ –ü–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ!")
                            print(f"   ‚å®Ô∏è –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: '{value}'")
                            await self.human_like_fill(element, value)
                            print(f"   ‚úÖ –ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                            success_count += 1
                        else:
                            print(f"   ‚ùå –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                            if required:
                                return False
                        
                elif action_type == "select":
                    print("   üîç –ü–æ–∏—Å–∫ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞...")
                    element = await page.wait_for_selector(selector, timeout=10000)
                    if element:
                        print("   ‚úÖ –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω!")
                        print(f"   üìù –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: {value}")
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞
                        try:
                            await element.select_option(value)
                            print("   ‚úÖ –û–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é!")
                        except:
                            try:
                                await page.select_option(selector, label=value)
                                print("   ‚úÖ –û–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É!")
                            except Exception as e:
                                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é: {e}")
                        
                        success_count += 1
                    else:
                        print(f"   ‚ùå –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        if required:
                            return False
                            
                elif action_type == "check":
                    print("   üîç –ü–æ–∏—Å–∫ —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CheckboxAgent –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if AGENTSCOPE_AVAILABLE and self.checkbox_agent:
                        print("   ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Checkbox Agent...")
                        try:
                            checkbox_result = await self.checkbox_agent.handle_specific_checkbox(
                                selector, "check", f"–û—Ç–º–µ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–∞: {description}"
                            )
                            if checkbox_result.success:
                                print(f"   ‚úÖ Checkbox Agent: {checkbox_result.action_taken}")
                                success_count += 1
                            else:
                                print(f"   ‚ö†Ô∏è Checkbox Agent: {checkbox_result.reasoning}")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ Checkbox Agent: {e}")
                            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
                            element = await page.wait_for_selector(selector, timeout=10000)
                            if element and not await element.is_checked():
                                await self.human_like_element_click(page, element)
                                success_count += 1
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                        element = await page.wait_for_selector(selector, timeout=10000)
                        if element:
                            print("   ‚úÖ –ß–µ–∫–±–æ–∫—Å –Ω–∞–π–¥–µ–Ω!")
                            is_checked = await element.is_checked()
                            if not is_checked:
                                print("   ‚òëÔ∏è –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–∞...")
                                await self.human_like_element_click(page, element)
                                print("   ‚úÖ –ß–µ–∫–±–æ–∫—Å –æ—Ç–º–µ—á–µ–Ω!")
                            else:
                                print("   ‚ÑπÔ∏è –ß–µ–∫–±–æ–∫—Å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω")
                            success_count += 1
                            success_count += 1
                        else:
                            print(f"   ‚ùå –ß–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                elif action_type == "uncheck":
                    print("   üîç –ü–æ–∏—Å–∫ —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ—Ç–º–µ—Ç–∫–∏...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CheckboxAgent –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if AGENTSCOPE_AVAILABLE and self.checkbox_agent:
                        print("   ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Checkbox Agent...")
                        try:
                            checkbox_result = await self.checkbox_agent.handle_specific_checkbox(
                                selector, "uncheck", f"–°–Ω—è—Ç–∏–µ –æ—Ç–º–µ—Ç–∫–∏ —á–µ–∫–±–æ–∫—Å–∞: {description}"
                            )
                            if checkbox_result.success:
                                print(f"   ‚úÖ Checkbox Agent: {checkbox_result.action_taken}")
                                success_count += 1
                            else:
                                print(f"   ‚ö†Ô∏è Checkbox Agent: {checkbox_result.reasoning}")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ Checkbox Agent: {e}")
                            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
                            element = await page.wait_for_selector(selector, timeout=10000)
                            if element and await element.is_checked():
                                await self.human_like_element_click(page, element)
                                success_count += 1
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                        element = await page.wait_for_selector(selector, timeout=10000)
                        if element:
                            print("   ‚úÖ –ß–µ–∫–±–æ–∫—Å –Ω–∞–π–¥–µ–Ω!")
                            is_checked = await element.is_checked()
                            if is_checked:
                                print("   ‚òê –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –æ—Ç–º–µ—Ç–∫–∏...")
                                await self.human_like_element_click(page, element)
                                print("   ‚úÖ –û—Ç–º–µ—Ç–∫–∞ —Å–Ω—è—Ç–∞!")
                            else:
                                print("   ‚ÑπÔ∏è –ß–µ–∫–±–æ–∫—Å —É–∂–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω")
                            success_count += 1
                        else:
                            print(f"   ‚ùå –ß–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                elif action_type == "click":
                    print("   üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–∫–∞...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ human_like_click —Å AgentScope –∞–≥–µ–Ω—Ç–∞–º–∏
                    clicked = await self.human_like_click(page, selector, description, not required)
                    if clicked:
                        success_count += 1
                    
                    if not clicked:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞")
                        if required:
                            print(f"   üö® –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            screenshot_path = f"debug_screenshot_{datetime.now().strftime('%H%M%S')}.png"
                            await page.screenshot(path=screenshot_path)
                            print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorAnalyzer –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
                            print(f"   ü§ñ ErrorAnalyzer –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é...")
                            
                            error_context = {
                                "action_type": action_type,
                                "selector": selector,
                                "description": description,
                                "page_url": page.url,
                                "element_not_found": True,
                                "required": required
                            }
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorRecoveryAgent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
                            if AGENTSCOPE_AVAILABLE and self.error_recovery_agent:
                                try:
                                    recovery_result = await self.error_recovery_agent.recover_from_error(error_context)
                                    if recovery_result.success:
                                        print(f"   ‚úÖ Recovery Agent —É—Å–ø–µ—à–µ–Ω: {recovery_result.action_taken}")
                                        success_count += 1
                                    else:
                                        print(f"   ‚ö†Ô∏è Recovery Agent: {recovery_result.action_taken}")
                                except Exception as re:
                                    print(f"   ‚ùå –û—à–∏–±–∫–∞ Recovery Agent: {re}")
                            else:
                                print(f"   ‚ö†Ô∏è Fallback: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                            
                elif action_type == "wait":
                    wait_time = int(value) if value else 3
                    print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(wait_time)
                    print(f"   ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    success_count += 1
                    
                elif action_type == "scroll":
                    scroll_amount = int(value) if value else 500
                    print(f"   üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ {scroll_amount} –ø–∏–∫—Å–µ–ª–µ–π...")
                    await page.evaluate(f"window.scrollBy(0, {scroll_amount})")
                    print(f"   ‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    success_count += 1
                    
                elif action_type == "skip":
                    print("   ‚è≠Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥...")
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
                    skip_selectors = [
                        selector,
                        "text=Skip",
                        "text=Later", 
                        "text=Not now",
                        "button:has-text('Skip')",
                        "button:has-text('Later')",
                        "button:has-text('Not now')",
                        "a:has-text('Skip')",
                        "[data-test*='skip']"
                    ]
                    
                    skipped = False
                    for skip_sel in skip_selectors:
                        try:
                            skip_element = await page.wait_for_selector(skip_sel, timeout=3000)
                            if skip_element:
                                await skip_element.click()
                                print(f"   ‚úÖ –®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                                skipped = True
                                success_count += 1
                                break
                        except:
                            continue
                    
                    if not skipped:
                        print(f"   ‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                        
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                    
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                print(f"   ‚è≥ –ü–∞—É–∑–∞ {self.action_delay/2} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è...")
                await asyncio.sleep(self.action_delay/2)
                    
            except Exception as e:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                error_context = {
                    "action_type": action_type,
                    "selector": selector,
                    "action_number": i+1,
                    "description": description
                }
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorRecoveryAgent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
                if AGENTSCOPE_AVAILABLE and self.error_recovery_agent:
                    try:
                        recovery_result = await self.error_recovery_agent.recover_from_error(error_context)
                        if recovery_result.success:
                            print(f"   ‚úÖ ErrorRecoveryAgent –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª: {recovery_result.action_taken}")
                            success_count += 1
                        else:
                            print(f"   ‚ö†Ô∏è ErrorRecoveryAgent: {recovery_result.action_taken}")
                            if required:
                                print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
                                return False
                    except Exception as recovery_error:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ ErrorRecoveryAgent: {recovery_error}")
                        if required:
                            return False
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                    if required:
                        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è") 
                        return False
        
        print(f"\nüìä –ò–¢–û–ì–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(actions)*100):.1f}%")
        
        return success_count > 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

async def main():
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("GEMINI_API_KEY")
    
    if not api_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á")
        return
    
    agent = IntelligentRegistrationAgent(api_key)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Airtable —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    def _get_value_for_field(self, field_text: str, attributes: dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
        field_text = field_text.lower()
        field_type = attributes.get('type', '').lower()
        field_name = attributes.get('name', '').lower()
        field_class = attributes.get('class', '').lower()
        
        combined = f"{field_text} {field_type} {field_name} {field_class}"
        
        # Email –ø–æ–ª—è
        if any(keyword in combined for keyword in ['email', 'mail', 'e-mail']):
            return self.context.get('email', '')
        
        # –ü–∞—Ä–æ–ª—å
        elif any(keyword in combined for keyword in ['password', 'pass', 'pwd']):
            return self.context.get('password', '')
        
        # –ò–º—è
        elif any(keyword in combined for keyword in ['first', 'fname', 'firstname']):
            return self.context.get('first_name', '')
        elif any(keyword in combined for keyword in ['last', 'lname', 'lastname']):
            return self.context.get('last_name', '')
        elif 'name' in combined and 'user' not in combined:
            return f"{self.context.get('first_name', '')} {self.context.get('last_name', '')}"
        
        # Username
        elif any(keyword in combined for keyword in ['username', 'user', 'login']):
            return self.context.get('username', '')
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        elif any(keyword in combined for keyword in ['phone', 'tel', 'mobile']):
            return self.context.get('phone', '')
        
        # –ö–æ–º–ø–∞–Ω–∏—è
        elif any(keyword in combined for keyword in ['company', 'organization', 'business']):
            return self.context.get('company', '')
        
        # –°–∞–π—Ç
        elif any(keyword in combined for keyword in ['website', 'url', 'site']):
            return self.context.get('website', '')
        
        # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        elif any(keyword in combined for keyword in ['birth', 'born', 'date', 'birthday']):
            return self.context.get('birth_date', '')
        
        return ""  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–ª—è

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    agent = IntelligentRegistrationAgent(
        gemini_api_key=os.getenv("GEMINI_API_KEY")
    )
    
    referral_link = "https://airtable.com/invite/r/ovoAP1zR"
    print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {referral_link}")
    
    await agent.register(referral_link)

if __name__ == "__main__":
    asyncio.run(main())