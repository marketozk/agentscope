import os
import json
import asyncio
from dotenv import load_dotenv

# –ê–ª—å—Ñ–∞/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Google GenAI SDK —Å Computer Use
from google import genai as genai_new
from google.genai import types as genai_types

from playwright.async_api import async_playwright


async def execute_tool_call(page, tool_call):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π safety_decision –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
    if not hasattr(tool_call, 'function_call') or not tool_call.function_call:
        return {"status": "ERROR", "message": "–ù–µ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏.", "url": page.url}

    command = tool_call.function_call.name
    args = dict(tool_call.function_call.args)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    safety_decision = args.get("safety_decision")
    if safety_decision and safety_decision.get("decision") == "require_confirmation":
        print("  ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º.")
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
        args.pop("safety_decision", None)

    print(f"  ‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}")

    try:
        if command in ("navigate_to", "navigate"):
            url = args.get("url", "").strip()
            if not url:
                return {"status": "ERROR", "message": "URL –Ω–µ —É–∫–∞–∑–∞–Ω", "url": page.url}
            await page.goto(url)
        elif command == "open_web_browser":
            url = args.get("url", "https://www.google.com").strip()
            await page.goto(url)
        elif command == "click_at":
            x = args.get("x")
            y = args.get("y")
            if x is None or y is None:
                return {"status": "ERROR", "message": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã x/y –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "url": page.url}
            await page.mouse.click(x, y)
        elif command == "type_at":
            x = args.get("x")
            y = args.get("y")
            text = args.get("text", "")
            if x is None or y is None:
                return {"status": "ERROR", "message": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã x/y –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "url": page.url}
            await page.mouse.click(x, y)
            await page.keyboard.type(text, delay=50)  # –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞
        else:
            return {"status": "ERROR", "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}", "url": page.url}

        await page.wait_for_load_state("networkidle")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "status": "SUCCESS",
            "url": page.url
        }

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º safety_decision, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if safety_decision:
            response["safety_decision_acknowledged"] = True

        return response

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        response = {
            "status": "ERROR",
            "message": str(e),
            "url": page.url
        }
        if safety_decision:
            response["safety_decision_acknowledged"] = True
        return response


async def main_async():
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(headless=False)
    page = await browser.new_page()

    client = genai_new.Client(api_key=api_key)
    model_name = "models/gemini-2.5-computer-use-preview-10-2025"

    tool = genai_types.Tool(
        computer_use=genai_types.ComputerUse(
            environment=genai_types.Environment.ENVIRONMENT_BROWSER
        )
    )
    config = genai_types.GenerateContentConfig(
        tools=[tool],
        temperature=0.2,
        max_output_tokens=2048,
    )

    prompt = (
        "–û—Ç–∫—Ä–æ–π —Å–∞–π—Ç yandex.ru –∏ –Ω–∞–π–¥–∏ '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞'. "
        "–ö–æ–≥–¥–∞ —É–≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—ë—Ç–∫–æ –Ω–∞–ø–∏—à–∏: '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: [–∑–Ω–∞—á–µ–Ω–∏–µ]' –∏ –∑–∞–≤–µ—Ä—à–∏ —Ä–∞–±–æ—Ç—É."
    )
    print(f"üöÄ –ó–∞–¥–∞—á–∞: {prompt}\n")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Part(text=...), –∞ –Ω–µ from_text()
    history = [genai_types.Content(role="user", parts=[genai_types.Part(text=prompt)])]

    try:
        for step in range(15):
            print(f"üß† –®–∞–≥ {step + 1}: –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")

            await page.wait_for_load_state("domcontentloaded")
            screenshot = await page.screenshot(type="png")

            image_part = genai_types.Part(
                inline_data=genai_types.Blob(mime_type="image/png", data=screenshot)
            )

            current_request = history + [
                genai_types.Content(role="user", parts=[image_part])
            ]

            resp = client.models.generate_content(
                model=model_name,
                contents=current_request,
                config=config,
            )

            if not resp.candidates or not resp.candidates[0].content.parts:
                print("\n[–û–®–ò–ë–ö–ê] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")
                break

            part = resp.candidates[0].content.parts[0]
            model_content = resp.candidates[0].content
            model_content.role = "model"
            history.append(model_content)

            if hasattr(part, 'function_call') and part.function_call:
                tool_result = await execute_tool_call(page, part)
                tool_response_part = genai_types.Part.from_function_response(
                    name=part.function_call.name,
                    response=tool_result
                )
                history.append(genai_types.Content(role="tool", parts=[tool_response_part]))

            elif hasattr(part, 'text') and part.text.strip():
                text = part.text.strip()
                print("\nüí¨ –ú–æ–¥–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç:")
                print(text)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ —è–≤–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if any(kw in text.lower() for kw in ["–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞", "–∫—É—Ä—Å:", "usd", "–¥–æ–ª–ª–∞—Ä"]):
                    print("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    break
                else:
                    print("  ‚Üí –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∞—é...")
                    # –ù–µ –≤—ã—Ö–æ–¥–∏–º ‚Äî –∂–¥—ë–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

            else:
                print("\n[–û–®–ò–ë–ö–ê] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.")
                break

        else:
            print("\n[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ (15).")

    except Exception as e:
        print(f"\n[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] {e}")
        import traceback
        traceback.print_exc()

    finally:
        await browser.close()
        await playwright.stop()
        print("\n–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")


if __name__ == "__main__":
    try:
        asyncio.run(main_async())
    except RuntimeError as e:
        if "Event loop is closed" not in str(e):
            raise