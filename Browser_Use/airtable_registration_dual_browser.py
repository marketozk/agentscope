"""
üß† –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Airtable —Å –î–í–£–ú–Ø –±—Ä–∞—É–∑–µ—Ä–∞–º–∏ –≤ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏
–ê–≥–µ–Ω—Ç –°–ê–ú —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:
- –ë—Ä–∞—É–∑–µ—Ä 1 –∏ –ë—Ä–∞—É–∑–µ—Ä 2 –¥–æ—Å—Ç—É–ø–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ê–≥–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ (email, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
- –ú–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏, –∫–ª–∏–∫–∞—Ç—å ‚Äî –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞
- –¶–µ–ª—å: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Airtable –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
"""
import asyncio
import os
import re
from pathlib import Path
from browser_use import Agent
from browser_use.browser.profile import BrowserProfile
from dotenv import load_dotenv
from datetime import datetime
from typing import Any, Optional, Tuple
from pydantic import BaseModel, Field

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å rate limiting
from config import (
    get_app_config,
    get_llm,
    get_profile_path,
    wait_for_rate_limit,
    register_api_request,
    print_api_stats
)

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from browser_use_helpers import extract_email_from_result

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_PATH = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=ENV_PATH)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STEP_TIMEOUT = 180
BROWSER_KEEP_ALIVE = 86400


# ==================== –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–•–ï–ú–ê –í–´–í–û–î–ê ====================

class RegistrationResult(BaseModel):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    status: str = Field(
        description="–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 'success', 'partial', –∏–ª–∏ 'failed'"
    )
    email: str = Field(
        description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: wayedip717@gamegta.com)"
    )
    confirmed: bool = Field(
        description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞ —á–µ—Ä–µ–∑ –ø–∏—Å—å–º–æ –æ—Ç Airtable"
    )
    notes: str = Field(
        description="–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ"
    )


# ==================== –û–ë–ï–†–¢–ö–ê –î–õ–Ø LLM –° RATE LIMIT ====================

class RateLimitedLLM:
    """–û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ LLM –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è rate limit –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤"""
    
    def __init__(self, llm):
        self.llm = llm
        self._call_count = 0
    
    async def ainvoke(self, input: Any, config: Any = None, **kwargs) -> Any:
        """–û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ ainvoke —Å rate limit –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
        if not await wait_for_rate_limit():
            raise Exception("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API")
        
        register_api_request()
        self._call_count += 1
        
        print(f"   üî∑ LLM –≤—ã–∑–æ–≤ #{self._call_count}")
        
        if config is not None:
            return await self.llm.ainvoke(input, config, **kwargs)
        else:
            return await self.llm.ainvoke(input, **kwargs)
    
    def __getattr__(self, name):
        return getattr(self.llm, name)


# ==================== –ü–ê–†–°–ò–ù–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================

def _extract_text_from_action(action: Any) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ ActionResult"""
    for attr in ("text", "extracted_content", "output"):
        try:
            val = getattr(action, attr, None)
            if isinstance(val, str) and val.strip():
                return val
        except Exception:
            pass
    try:
        if isinstance(action, dict):
            for key in ("text", "extracted_content", "output"):
                val = action.get(key)
                if isinstance(val, str) and val.strip():
                    return val
    except Exception:
        pass
    return None


def parse_agent_result(result: Any) -> dict:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Agent"""
    parsed = {
        "is_done": None,
        "success": None,
        "error": None,
        "done_text": None,
        "raw_text": str(result) if result is not None else ""
    }

    try:
        all_results = getattr(result, "all_results", None)
        if isinstance(all_results, (list, tuple)) and all_results:
            final = None
            for item in reversed(all_results):
                try:
                    if getattr(item, "is_done", False):
                        final = item
                        break
                except Exception:
                    continue
            if final is None:
                final = all_results[-1]

            try:
                parsed["is_done"] = getattr(final, "is_done", None)
            except Exception:
                pass
            try:
                parsed["success"] = getattr(final, "success", None)
            except Exception:
                pass
            try:
                err = getattr(final, "error", None)
                parsed["error"] = str(err) if err else None
            except Exception:
                pass
            
            parsed["done_text"] = _extract_text_from_action(final)
            if not parsed["done_text"]:
                parsed["done_text"] = _extract_text_from_action(result) or None

    except Exception:
        pass

    return parsed


class DualBrowserRegistration:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∞–≥–µ–Ω—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤—É–º—è –±—Ä–∞—É–∑–µ—Ä–∞–º–∏"""

    def __init__(self, llm, referral_url: str = "https://airtable.com/invite/r/ovoAP1zR"):
        self.llm = llm
        self.referral_url = referral_url
        self.temp_email: Optional[str] = None
        self.status: str = "unknown"
        self.confirmed: bool = False
        self.notes: str = ""
        self.rate_limited_llm: Optional[RateLimitedLLM] = None

    def build_master_mission(self) -> str:
        """–ï–¥–∏–Ω–∞—è –º–∏—Å—Å–∏—è: –∞–≥–µ–Ω—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        return f"""

MISSION GOAL:
  Register a new Airtable account using {self.referral_url} and a temporary email from temp-mail.org,
  then confirm the account via email. 

NOTE: Two tabs are already open for you:
  - Tab 1: https://temp-mail.org/en/ (temporary email service)
  - Tab 2: {self.referral_url} (Airtable registration page)

CRITICAL WORKFLOW WITH TIMING:
  üìß PHASE 1: GET TEMPORARY EMAIL (Tab 1)
  -------------------------------------------
  - STEP 1: Switch to temp-mail tab (Tab 1)
  - STEP 2: WAIT 20 seconds for page to fully load and email to generate
  - STEP 3: FIND the email address on the page
    * Try method 1: Extract text from the email display area
    * Try method 2: Use JavaScript: document.querySelector('#mail').textContent
    * Try method 3: Use vision to read the email from screenshot
  - STEP 4: MEMORIZE the exact email (write: "Temporary email obtained: xyz@domain.com")
  - STEP 5: VERIFY you have the email before proceeding
  
  üìù PHASE 2: REGISTER ON AIRTABLE (Tab 2)
  -------------------------------------------
  - STEP 6: Switch to Airtable registration tab (Tab 2)
  - STEP 7: WAIT 5 seconds for registration form to fully load
  - STEP 8: Fill the registration form CAREFULLY:
    * Email field: Type the EXACT temp-mail address from Phase 1 (DO NOT INVENT!)
    * Full Name field: Generate realistic name (e.g., "Sarah Mitchell")
    * Password field: Generate strong password (e.g., "SecureP@ss2024!")
    * Checkboxes: Check all required boxes (Terms of Service, Privacy Policy)
  
  - STEP 9: BEFORE submitting - DOUBLE CHECK:
    * Email field contains the correct temp-mail address
    * Name and password are filled
    * All checkboxes are checked
  
  - STEP 10: Click "Create account" button ONCE
  - STEP 11: WAIT 10 seconds and observe the result:
    * Success: URL changed to dashboard or verification page
    * Loading: Button disabled with spinner ‚Üí wait 10 more seconds
    * Error: Read error message and decide next action
  
  ‚úâÔ∏è PHASE 3: CONFIRM EMAIL (Tab 1)
  -------------------------------------------
  - STEP 12: Switch back to temp-mail tab (Tab 1)
  - STEP 13: WAIT 30 seconds for confirmation email to arrive
  - STEP 14: Look for email from Airtable with subject about verification
  - STEP 15: Open the email from Airtable
  - STEP 16: Find and click the confirmation/verification link in the email
  - STEP 17: WAIT 5 seconds for confirmation to process
  - STEP 18: Check if account is now verified (look for success message)

ANTI-LOOP PROTECTION:
  If you repeat the same action 3+ times without progress:
  ‚õî STOP and ANALYZE:
    - What am I trying to do?
    - What's blocking me?
    - Did my last action succeed? (Check URL, page state, elements)
  
  üîÑ TRY DIFFERENT APPROACH:
    - Email not found on temp-mail? ‚Üí Refresh page or get new email
    - Registration button not working? ‚Üí Check for inline error messages
    - Email domain blocked by Airtable? ‚Üí Go back, get NEW email with different domain
    - Confirmation email not arriving? ‚Üí Wait longer (up to 60 seconds)
    - Action succeeded but system says "Failure"? ‚Üí Ignore verdict, check actual page state
  
  ‚ùå NEVER:
    - Click same button more than 3 times
    - Fill same field more than 2 times (if filled successfully, move on!)
    - Wait indefinitely (max wait: 60 seconds for any step)
  
  ‚úÖ WHEN STUCK:
    1. PAUSE (stop current action)
    2. OBSERVE (read current page state, URL, errors)
    3. DECIDE (what's the next best action?)
    4. EXECUTE (try new approach)

OUTPUT FORMAT (MANDATORY):
  When task is complete, you MUST return structured data in this exact format:
  {{
    "status": "success|partial|failed",
    "email": "<the-temp-email-you-used>",
    "confirmed": true|false,
    "notes": "Brief explanation of what happened"
  }}
  
  Examples:
  - Full success: {{"status":"success","email":"user123@gamegta.com","confirmed":true,"notes":"Account created and verified"}}
  - Partial success: {{"status":"partial","email":"user456@tempmail.com","confirmed":false,"notes":"Account created but email not yet confirmed"}}
  - Failure: {{"status":"failed","email":"user789@mail.tm","confirmed":false,"notes":"Email domain blocked by Airtable"}}

"""

    async def run_agent_with_timeout(self, agent: Agent, timeout: int) -> Any:
        return await asyncio.wait_for(agent.run(), timeout=timeout)

    async def run(self):
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –∞–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤—É–º—è –±—Ä–∞—É–∑–µ—Ä–∞–º–∏")
        print("=" * 60)

        try:
            self.rate_limited_llm = RateLimitedLLM(self.llm)

            # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –î–í–£–º –±—Ä–∞—É–∑–µ—Ä–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            # Agent –≤ browser-use –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ browser_context
            profile_1 = BrowserProfile(
                keep_alive=True,
                disable_security=False,  # –û—Å—Ç–∞–≤–ª—è–µ–º security –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            )
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            initial_actions = [
                {'navigate': {'url': 'https://temp-mail.org/en/', 'new_tab': True}},    # –í–∫–ª–∞–¥–∫–∞ 1: temp-mail
                {'navigate': {'url': self.referral_url, 'new_tab': True}},              # –í–∫–ª–∞–¥–∫–∞ 2: Airtable
            ]
            
            # –°–æ–∑–¥–∞—ë–º timestamp –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            conversation_path = Path(f"logs/airtable_registration_{timestamp}.json")
            conversation_path.parent.mkdir(exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
            task_id = f"airtable_reg_{timestamp}"
            
            print("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞:")
            print(f"   üìù Task ID: {task_id}")
            print(f"   üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤: {conversation_path}")
            print(f"   üé¨ GIF –∞–Ω–∏–º–∞—Ü–∏—è: logs/registration_{timestamp}.gif")
            print(f"   üëÅÔ∏è  Vision API: –≤–∫–ª—é—á–µ–Ω (auto)")
            print(f"   ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç —à–∞–≥–∞: {STEP_TIMEOUT}s")
            print(f"   üîÑ –ú–∞–∫—Å. –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —à–∞–≥: 15")
            print(f"   ‚ùå –ú–∞–∫—Å. –æ—à–∏–±–æ–∫: 20")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            agent = Agent(
                task=self.build_master_mission(),
                llm=self.rate_limited_llm,
                browser_profile=profile_1,
                
                # === –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
                use_vision=True,                        # –í–∫–ª—é—á–∞–µ–º Vision API –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                max_failures=20,                        # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π
                initial_actions=initial_actions,        # –°—Ä–∞–∑—É –æ—Ç–∫—Ä–æ–µ—Ç –æ–±–µ –≤–∫–ª–∞–¥–∫–∏
                
                # === –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –í–´–í–û–î ===
                output_model_schema=RegistrationResult, # –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                
                # === –¢–ê–ô–ú–ò–ù–ì–ò ===
                step_timeout=STEP_TIMEOUT,              # 180 —Å–µ–∫—É–Ω–¥ –Ω–∞ —à–∞–≥
                llm_timeout=60,                         # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ LLM –∑–∞–ø—Ä–æ—Å
                
                # === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–´ ===
                max_actions_per_step=15,                # –ë–æ–ª—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –æ–¥–∏–Ω —à–∞–≥
                use_thinking=True,                      # –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
                flash_mode=False,                       # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                
                # === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–õ–ê–î–ö–ê ===
                save_conversation_path=str(conversation_path),  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                generate_gif=f"logs/registration_{timestamp}.gif",  # GIF –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                task_id=task_id,                        # ID –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
                source="airtable_registration_dual_browser",  # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                
                # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ò–ß–ò ===
                include_recent_events=True,             # –í–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                calculate_cost=True,                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
                display_files_in_done_text=True,        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ done()
                final_response_after_failure=True,      # –î–∞–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ
                
                # === –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø ===
                vision_detail_level='high',             # –í—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Vision API
                include_attributes=['data-testid', 'name', 'id', 'type'],  # –í–∞–∂–Ω—ã–µ HTML –∞—Ç—Ä–∏–±—É—Ç—ã
            )
            
            print("\n‚úÖ –í–∫–ª–∞–¥–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã:")
            print("   üìß Tab 1: https://temp-mail.org/en/")
            print(f"   üìù Tab 2: {self.referral_url}")
            print("   ü§ñ –ê–≥–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏...\n")

            result = await self.run_agent_with_timeout(agent, timeout=STEP_TIMEOUT)
            parsed = parse_agent_result(result)
            text = (parsed.get("done_text") or parsed.get("raw_text") or "").strip()

            print(f"\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞ (—É—Å–µ—á–µ–Ω–æ): {text[:400]}")

            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (RegistrationResult)
                if hasattr(result, 'model_output') and result.model_output:
                    structured_output = result.model_output
                    self.status = str(structured_output.status).lower()
                    self.temp_email = structured_output.email
                    self.confirmed = bool(structured_output.confirmed)
                    self.notes = str(structured_output.notes)
                    print("\n‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞")
                else:
                    # Fallback: –ø–∞—Ä—Å–∏–º JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    json_match = re.search(r'\{[\s\S]*\}', text)
                    if json_match:
                        import json
                        data = json.loads(json_match.group(0))
                        self.status = str(data.get("status", "unknown")).lower()
                        self.temp_email = data.get("email") or extract_email_from_result(text)
                        self.confirmed = bool(data.get("confirmed", False))
                        self.notes = str(data.get("notes", ""))
                        print("\n‚ö†Ô∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ JSON")
            except Exception as e:
                print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {e}")
                # Fallback –ø–∞—Ä—Å–∏–Ω–≥
                pass
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
            if not self.temp_email:
                self.temp_email = extract_email_from_result(text)
            
            if not self.status or self.status == "unknown":
                up = text.upper()
                if "SUCCESS" in up or "VERIFIED" in up:
                    self.status = "success"
                    self.confirmed = "VERIFIED" in up or "CONFIRMED" in up
                elif "PARTIAL" in up:
                    self.status = "partial"
                else:
                    self.status = "failed"
                self.notes = self.notes or "fallback parse"

            print("\n" + "=" * 60)
            print("‚úÖ –ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print("=" * 60)
            print(f"üìß Email: {self.temp_email}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {self.status}, confirmed={self.confirmed}")
            if self.notes:
                print(f"üìù Notes: {self.notes[:200]}")
            total_llm = getattr(self.rate_limited_llm, "_call_count", "n/a")
            print(f"üìà –í—Å–µ–≥–æ LLM –≤—ã–∑–æ–≤–æ–≤: {total_llm}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª–∞—Å—å
            if hasattr(result, 'cost_info') and result.cost_info:
                print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {result.cost_info}")
            
            print("=" * 60)

            self.save_credentials()

            # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º
            print(f"\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ {BROWSER_KEEP_ALIVE // 3600} —á–∞—Å–æ–≤")
            print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            await asyncio.sleep(BROWSER_KEEP_ALIVE)
            await agent.close()

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.save_credentials()
            raise
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.save_credentials()
            raise

    def save_credentials(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"airtable_registration_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE (DUAL BROWSER) ===\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Email: {self.temp_email}\n")
            f.write(f"–°—Ç–∞—Ç—É—Å: {self.status}\n")
            f.write(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {self.confirmed}\n")
            if self.notes:
                f.write(f"–ó–∞–º–µ—Ç–∫–∏: {self.notes}\n")
            f.write("=" * 50 + "\n")
        
        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


async def main():
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path("logs").mkdir(exist_ok=True)
    
    try:
        config = get_app_config()
        config.print_config()
        
        llm = get_llm()
        profile_path = get_profile_path()
    except ValueError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    can_run = await wait_for_rate_limit()
    if not can_run:
        print("‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    registration = DualBrowserRegistration(llm)
    
    try:
        await registration.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print_api_stats()


if __name__ == "__main__":
    asyncio.run(main())
