"""
üß† –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Airtable —Å –î–í–£–ú–Ø –±—Ä–∞—É–∑–µ—Ä–∞–º–∏ –≤ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏
–ê–≥–µ–Ω—Ç –°–ê–ú —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:
- –ë—Ä–∞—É–∑–µ—Ä 1 –∏ –ë—Ä–∞—É–∑–µ—Ä 2 –¥–æ—Å—Ç—É–ø–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ê–≥–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ (email, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
- –ú–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏, –∫–ª–∏–∫–∞—Ç—å ‚Äî –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞
- –¶–µ–ª—å: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Airtable –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
"""
import asyncio
import os
import re
from pathlib import Path
from browser_use import Agent
from browser_use.browser.profile import BrowserProfile
from dotenv import load_dotenv
from datetime import datetime
from typing import Any, Optional, Tuple
from pydantic import BaseModel, Field

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å rate limiting
from config import (
    get_app_config,
    get_llm,
    get_profile_path,
    wait_for_rate_limit,
    register_api_request,
    print_api_stats
)

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from browser_use_helpers import extract_email_from_result

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_PATH = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=ENV_PATH)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STEP_TIMEOUT = 180
BROWSER_KEEP_ALIVE = 86400


# ==================== –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–•–ï–ú–ê –í–´–í–û–î–ê ====================

class RegistrationResult(BaseModel):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    status: str = Field(
        description="–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 'success', 'partial', –∏–ª–∏ 'failed'"
    )
    email: str = Field(
        description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: wayedip717@gamegta.com)"
    )
    confirmed: bool = Field(
        description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞ —á–µ—Ä–µ–∑ –ø–∏—Å—å–º–æ –æ—Ç Airtable"
    )
    notes: str = Field(
        description="–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ"
    )


# ==================== –û–ë–ï–†–¢–ö–ê –î–õ–Ø LLM –° RATE LIMIT ====================

class RateLimitedLLM:
    """–û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ LLM –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è rate limit –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤"""
    
    def __init__(self, llm):
        self.llm = llm
        self._call_count = 0
    
    async def ainvoke(self, input: Any, config: Any = None, **kwargs) -> Any:
        """–û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ ainvoke —Å rate limit –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
        if not await wait_for_rate_limit():
            raise Exception("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API")
        
        register_api_request()
        self._call_count += 1
        
        print(f"   üî∑ LLM –≤—ã–∑–æ–≤ #{self._call_count}")
        
        if config is not None:
            return await self.llm.ainvoke(input, config, **kwargs)
        else:
            return await self.llm.ainvoke(input, **kwargs)
    
    def __getattr__(self, name):
        return getattr(self.llm, name)


# ==================== –ü–ê–†–°–ò–ù–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================

def _extract_text_from_action(action: Any) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ ActionResult"""
    for attr in ("text", "extracted_content", "output"):
        try:
            val = getattr(action, attr, None)
            if isinstance(val, str) and val.strip():
                return val
        except Exception:
            pass
    try:
        if isinstance(action, dict):
            for key in ("text", "extracted_content", "output"):
                val = action.get(key)
                if isinstance(val, str) and val.strip():
                    return val
    except Exception:
        pass
    return None


def parse_agent_result(result: Any) -> dict:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Agent"""
    parsed = {
        "is_done": None,
        "success": None,
        "error": None,
        "done_text": None,
        "raw_text": str(result) if result is not None else ""
    }

    try:
        all_results = getattr(result, "all_results", None)
        if isinstance(all_results, (list, tuple)) and all_results:
            final = None
            for item in reversed(all_results):
                try:
                    if getattr(item, "is_done", False):
                        final = item
                        break
                except Exception:
                    continue
            if final is None:
                final = all_results[-1]

            try:
                parsed["is_done"] = getattr(final, "is_done", None)
            except Exception:
                pass
            try:
                parsed["success"] = getattr(final, "success", None)
            except Exception:
                pass
            try:
                err = getattr(final, "error", None)
                parsed["error"] = str(err) if err else None
            except Exception:
                pass
            
            parsed["done_text"] = _extract_text_from_action(final)
            if not parsed["done_text"]:
                parsed["done_text"] = _extract_text_from_action(result) or None

    except Exception:
        pass

    return parsed


class EmailParserResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ email —Å temp-mail.org"""
    email: str = Field(
        description="–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: user123@gamegta.com)"
    )
    success: bool = Field(
        description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–ª—É—á–µ–Ω email"
    )
    notes: str = Field(
        description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    )


class DualBrowserRegistration:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∞–≥–µ–Ω—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤—É–º—è –±—Ä–∞—É–∑–µ—Ä–∞–º–∏"""

    def __init__(self, llm, referral_url: str = "https://airtable.com/invite/r/ovoAP1zR"):
        self.llm = llm
        self.referral_url = referral_url
        self.temp_email: Optional[str] = None
        self.status: str = "unknown"
        self.confirmed: bool = False
        self.notes: str = ""
        self.rate_limited_llm: Optional[RateLimitedLLM] = None

    def build_email_parser_mission(self) -> str:
        """–®–ê–ì 1: –ú–∏—Å—Å–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ email —Å temp-mail.org"""
        return """
MISSION: Get temporary email from temp-mail.org

YOUR TASK:
  You need to extract a temporary email address from https://temp-mail.org/en/

CRITICAL STEPS:
  1. WAIT 20 seconds after page loads (email needs time to generate)
  2. LOCATE the email address on the page using one of these methods:
     - Method A: Extract text from the main email display area
     - Method B: Use JavaScript: document.querySelector('#mail').textContent
     - Method C: Use vision API to read email from screenshot
     - Method D: Look for any visible text matching email pattern (xxx@yyy.zzz)
  
  3. VERIFY you found a valid email (must contain @ and domain)
  4. RETURN the email in structured format

ANTI-LOOP RULES:
  - If email not visible after 20s ‚Üí Refresh page ONCE
  - If still not visible ‚Üí Try different selector or JavaScript
  - Maximum 3 attempts total
  - DO NOT click random elements hoping to find email

OUTPUT FORMAT (MANDATORY):
  {
    "email": "the-extracted-email@domain.com",
    "success": true,
    "notes": "Email successfully extracted using method X"
  }

IMPORTANT:
  - Email MUST be valid format (xxx@domain.com)
  - DO NOT invent or guess email
  - If you can't find email after 3 attempts, set success=false
"""

    def build_registration_mission(self, email: str) -> str:
        """–®–ê–ì 2: –ú–∏—Å—Å–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º email"""
        return f"""
MISSION: Register on Airtable using provided email

YOUR EMAIL: {email}
REGISTRATION URL: {self.referral_url}

YOUR TASK:
  Register a new Airtable account using the email above and confirm via email.

CRITICAL WORKFLOW:
  üìù PHASE 1: REGISTER ON AIRTABLE
  -------------------------------------------
  - STEP 1: Navigate to {self.referral_url}
  - STEP 2: WAIT 5 seconds for form to load
  - STEP 3: Fill registration form:
    * Email: {email} (EXACTLY this email, DO NOT MODIFY!)
    * Full Name: Generate realistic name (e.g., "Sarah Mitchell")
    * Password: Generate strong password (e.g., "SecureP@ss2024!")
    * Checkboxes: Check all required (Terms, Privacy Policy)
  
  - STEP 4: VERIFY before submitting:
    * Email field = {email}
    * Name and password filled
    * Checkboxes checked
  
  - STEP 5: Click "Create account" ONCE
  - STEP 6: WAIT 10 seconds and check result:
    * Success: URL changed to dashboard/verification page
    * Loading: Wait 10 more seconds
    * Error: Read message and report

  ‚úâÔ∏è PHASE 2: CONFIRM EMAIL
  -------------------------------------------
  - STEP 7: Open NEW TAB with https://temp-mail.org/en/
  - STEP 8: WAIT 30 seconds for confirmation email from Airtable
  - STEP 9: Look for email with "verify" or "confirm" in subject
  - STEP 10: Open that email
  - STEP 11: Click the confirmation/verification link
  - STEP 12: WAIT 5 seconds for confirmation
  - STEP 13: Check for success message

ANTI-LOOP PROTECTION:
  If stuck repeating same action 3+ times:
  ‚õî STOP ‚Üí ANALYZE ‚Üí TRY DIFFERENT APPROACH
  
  Common issues:
  - Button not working? ‚Üí Check for error messages first
  - Email not arriving? ‚Üí Wait up to 60s total, check spam
  - Wrong email domain? ‚Üí Report error, don't retry blindly
  
  ‚ùå NEVER:
    - Click same button 3+ times
    - Fill field twice if already filled successfully
    - Wait indefinitely (max 60s per wait)

OUTPUT FORMAT (MANDATORY):
  {{
    "status": "success|partial|failed",
    "email": "{email}",
    "confirmed": true|false,
    "notes": "Brief explanation"
  }}

REMEMBER: Use EXACT email {email} - do not modify or invent new one!
"""

    async def run_agent_with_timeout(self, agent: Agent, timeout: int) -> Any:
        return await asyncio.wait_for(agent.run(), timeout=timeout)

    async def run_step1_get_email(self) -> Tuple[bool, Optional[str]]:
        """–®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìß –®–ê–ì 1: –ü–ê–†–°–ò–ù–ì EMAIL –° TEMP-MAIL.ORG")
        print("=" * 60)
        
        try:
            profile = BrowserProfile(
                keep_alive=True,
                disable_security=False,
            )
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            conversation_path = Path(f"logs/step1_email_parser_{timestamp}.json")
            conversation_path.parent.mkdir(exist_ok=True)
            task_id = f"email_parser_{timestamp}"
            
            print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ (–®–ê–ì 1):")
            print(f"   üìù Task ID: {task_id}")
            print(f"   üíæ –ò—Å—Ç–æ—Ä–∏—è: {conversation_path}")
            print(f"   üé¨ GIF: logs/step1_email_{timestamp}.gif")
            print(f"   üåê URL: https://temp-mail.org/en/")
            
            agent = Agent(
                task=self.build_email_parser_mission(),
                llm=self.rate_limited_llm,
                browser_profile=profile,
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                use_vision=True,
                max_failures=10,
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                output_model_schema=EmailParserResult,
                
                # –¢–∞–π–º–∏–Ω–≥–∏
                step_timeout=120,  # 2 –º–∏–Ω—É—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email
                llm_timeout=60,
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                max_actions_per_step=10,
                use_thinking=True,
                flash_mode=False,
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                save_conversation_path=str(conversation_path),
                generate_gif=f"logs/step1_email_{timestamp}.gif",
                task_id=task_id,
                source="email_parser_step1",
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                include_recent_events=True,
                calculate_cost=True,
                display_files_in_done_text=True,
                final_response_after_failure=True,
                vision_detail_level='high',
                include_attributes=['data-testid', 'name', 'id', 'type', 'class'],
            )
            
            print("\nü§ñ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ email...\n")
            
            result = await self.run_agent_with_timeout(agent, timeout=120)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            email = None
            success = False
            
            try:
                if hasattr(result, 'model_output') and result.model_output:
                    structured = result.model_output
                    email = structured.email
                    success = structured.success
                    notes = structured.notes
                    print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:")
                    print(f"   üìß Email: {email}")
                    print(f"   ‚úì Success: {success}")
                    print(f"   üìù Notes: {notes}")
                else:
                    # Fallback –ø–∞—Ä—Å–∏–Ω–≥
                    parsed = parse_agent_result(result)
                    text = parsed.get("done_text") or parsed.get("raw_text") or ""
                    email = extract_email_from_result(text)
                    success = bool(email and "@" in email)
                    print(f"\n‚ö†Ô∏è  Fallback –ø–∞—Ä—Å–∏–Ω–≥:")
                    print(f"   üìß Email: {email}")
                    print(f"   ‚úì Success: {success}")
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç
            await agent.close()
            
            if success and email:
                print("\n" + "=" * 60)
                print(f"‚úÖ –®–ê–ì 1 –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û")
                print(f"üìß –ü–æ–ª—É—á–µ–Ω–Ω—ã–π email: {email}")
                print("=" * 60)
                return True, email
            else:
                print("\n" + "=" * 60)
                print(f"‚ùå –®–ê–ì 1 –ù–ï –£–î–ê–õ–°–Ø")
                print(f"   Email –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π")
                print("=" * 60)
                return False, None
                
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –®–ê–ì 1: {e}")
            return False, None

    async def run_step2_register(self, email: str) -> bool:
        """–®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º email"""
        print("\n" + "=" * 60)
        print("üìù –®–ê–ì 2: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE")
        print("=" * 60)
        print(f"üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º email: {email}")
        
        try:
            profile = BrowserProfile(
                keep_alive=True,
                disable_security=False,
            )
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            conversation_path = Path(f"logs/step2_registration_{timestamp}.json")
            conversation_path.parent.mkdir(exist_ok=True)
            task_id = f"registration_{timestamp}"
            
            print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ (–®–ê–ì 2):")
            print(f"   üìù Task ID: {task_id}")
            print(f"   üíæ –ò—Å—Ç–æ—Ä–∏—è: {conversation_path}")
            print(f"   üé¨ GIF: logs/step2_registration_{timestamp}.gif")
            print(f"   üåê URL: {self.referral_url}")
            
            agent = Agent(
                task=self.build_registration_mission(email),
                llm=self.rate_limited_llm,
                browser_profile=profile,
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                use_vision=True,
                max_failures=20,
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                output_model_schema=RegistrationResult,
                
                # –¢–∞–π–º–∏–Ω–≥–∏
                step_timeout=STEP_TIMEOUT,
                llm_timeout=60,
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                max_actions_per_step=15,
                use_thinking=True,
                flash_mode=False,
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                save_conversation_path=str(conversation_path),
                generate_gif=f"logs/step2_registration_{timestamp}.gif",
                task_id=task_id,
                source="registration_step2",
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                include_recent_events=True,
                calculate_cost=True,
                display_files_in_done_text=True,
                final_response_after_failure=True,
                vision_detail_level='high',
                include_attributes=['data-testid', 'name', 'id', 'type', 'class'],
            )
            
            print("\nü§ñ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n")
            
            result = await self.run_agent_with_timeout(agent, timeout=STEP_TIMEOUT)
            parsed = parse_agent_result(result)
            text = (parsed.get("done_text") or parsed.get("raw_text") or "").strip()
            
            print(f"\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞ (—É—Å–µ—á–µ–Ω–æ): {text[:400]}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                if hasattr(result, 'model_output') and result.model_output:
                    structured = result.model_output
                    self.status = str(structured.status).lower()
                    self.temp_email = structured.email
                    self.confirmed = bool(structured.confirmed)
                    self.notes = str(structured.notes)
                    print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
                else:
                    # Fallback –ø–∞—Ä—Å–∏–Ω–≥
                    json_match = re.search(r'\{[\s\S]*\}', text)
                    if json_match:
                        import json
                        data = json.loads(json_match.group(0))
                        self.status = str(data.get("status", "unknown")).lower()
                        self.temp_email = email
                        self.confirmed = bool(data.get("confirmed", False))
                        self.notes = str(data.get("notes", ""))
                        print("\n‚ö†Ô∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ JSON")
            except Exception as e:
                print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                self.temp_email = email
                self.status = "unknown"
                
            # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ 1 —á–∞—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            await asyncio.sleep(3600)  # 1 —á–∞—Å
            await agent.close()
            
            return self.status == "success"
            
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –®–ê–ì 2: {e}")
            return False

    async def run(self):
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        print("=" * 60)

        try:
            self.rate_limited_llm = RateLimitedLLM(self.llm)
            
            # –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º email
            success_step1, email = await self.run_step1_get_email()
            
            if not success_step1 or not email:
                print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email")
                print("   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ email")
                self.status = "failed"
                self.notes = "Failed to get temporary email"
                self.save_credentials()
                return
            
            self.temp_email = email
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            print("\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏...")
            await asyncio.sleep(5)
            
            # –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º email
            success_step2 = await self.run_step2_register(email)
            
            print("\n" + "=" * 60)
            print("‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 60)
            print(f"üìß Email: {self.temp_email}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {self.status}")
            print(f"‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {self.confirmed}")
            if self.notes:
                print(f"üìù Notes: {self.notes[:200]}")
            total_llm = getattr(self.rate_limited_llm, "_call_count", "n/a")
            print(f"üìà –í—Å–µ–≥–æ LLM –≤—ã–∑–æ–≤–æ–≤: {total_llm}")
            print("=" * 60)
            
            self.save_credentials()

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.save_credentials()
            raise
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.save_credentials()
            raise

    def save_credentials(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"airtable_registration_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE (DUAL BROWSER) ===\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Email: {self.temp_email}\n")
            f.write(f"–°—Ç–∞—Ç—É—Å: {self.status}\n")
            f.write(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {self.confirmed}\n")
            if self.notes:
                f.write(f"–ó–∞–º–µ—Ç–∫–∏: {self.notes}\n")
            f.write("=" * 50 + "\n")
        
        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


async def main():
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path("logs").mkdir(exist_ok=True)
    
    try:
        config = get_app_config()
        config.print_config()
        
        llm = get_llm()
        profile_path = get_profile_path()
    except ValueError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    can_run = await wait_for_rate_limit()
    if not can_run:
        print("‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    registration = DualBrowserRegistration(llm)
    
    try:
        await registration.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print_api_stats()


if __name__ == "__main__":
    asyncio.run(main())
