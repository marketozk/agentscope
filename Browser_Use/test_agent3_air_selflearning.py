"""
–†–ê–ë–û–¢–ê–ï–¢!!!!!!!
üéØ –¢–µ—Å—Ç gemini-2.5-computer-use-preview-10-2025 —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SDK google.genai
–ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è browser-use Agent - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ API –∏ Playwright.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç Playwright –±—Ä–∞—É–∑–µ—Ä
2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Computer Use –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ google.genai.Client
3. –ú–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ tool_calls
4. –¶–∏–∫–ª: —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí –º–æ–¥–µ–ª—å ‚Üí tool_call ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç

–ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø AIRTABLE REGISTRATION:
- –î–æ–±–∞–≤–ª–µ–Ω—ã custom functions –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
- –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ email + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import os
import json
import asyncio
import base64
import re
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from typing import Optional
from urllib.parse import urlparse
import httpx

# –ù–æ–≤—ã–π SDK Google Generative AI (unified SDK)
from google import genai
from google.genai.types import (
    Tool, ComputerUse, 
    GenerateContentConfig,
    Content, Part, Blob,
    FunctionCall, FunctionResponse,
    FunctionDeclaration
)

# Playwright –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º
from playwright.async_api import async_playwright

# Stealth –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
try:
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í playwright-stealth 2.0.0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å Stealth
    from playwright_stealth import Stealth
    stealth_instance = Stealth()
    stealth_async = stealth_instance.apply_stealth_async
    print("‚úÖ Playwright Stealth 2.0.0 –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    # Fallback –µ—Å–ª–∏ stealth –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    stealth_async = None
    print(f"‚ö†Ô∏è  Playwright Stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")


# ==================== SELF-LEARNING CORE (drop-in) ====================
import sqlite3
import random
import atexit
from time import perf_counter

class SelfLearnStore:
    def __init__(self, path="selflearn_airtable.sqlite3", epsilon_env_var="AUTOLEARN_EPS"):
        self.conn = sqlite3.connect(path, check_same_thread=False)
        self.cur = self.conn.cursor()
        self._init_schema()
        self.current_run_id = None
        self.step_counter = 0
        # –≠–ø—Å–∏–ª–æ–Ω –¥–ª—è exploration
        try:
            self.epsilon = float(os.getenv(epsilon_env_var, "0.12"))
        except Exception:
            self.epsilon = 0.12

    def _init_schema(self):
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS runs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                ts TEXT,
                phase TEXT,
                email TEXT,
                result_status TEXT,
                confirmed INTEGER,
                total_ms INTEGER,
                notes TEXT
            )
        """)
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS actions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                run_id INTEGER,
                step INTEGER,
                action TEXT,
                domain TEXT,
                url TEXT,
                params TEXT,
                success INTEGER,
                error TEXT,
                duration_ms INTEGER,
                created_at TEXT
            )
        """)
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS params (
                key TEXT,
                context TEXT,
                value TEXT,
                n INTEGER,
                success INTEGER,
                tot_ms INTEGER,
                last_ts TEXT,
                PRIMARY KEY (key, context, value)
            )
        """)
        self.conn.commit()

    def start_run(self, phase: str, email: str | None = None, extra: dict | None = None):
        ts = datetime.now().isoformat()
        self.cur.execute(
            "INSERT INTO runs (ts, phase, email, result_status, confirmed, total_ms, notes) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (ts, phase, email or "", "", 0, 0, json.dumps(extra or {}, ensure_ascii=False))
        )
        self.current_run_id = self.cur.lastrowid
        self.step_counter = 0
        self.conn.commit()
        return self.current_run_id

    def finish_run(self, status: str, confirmed: bool = False, notes: str = "", total_ms: int | None = None):
        if self.current_run_id is None:
            return
        self.cur.execute(
            "UPDATE runs SET result_status=?, confirmed=?, notes=?, total_ms=? WHERE id=?",
            (status or "", int(bool(confirmed)), notes or "", int(total_ms or 0), self.current_run_id)
        )
        self.conn.commit()

    def log_action(self, action: str, domain: str | None, url: str | None, params: dict | None,
                   success: bool, duration_ms: int, error: str | None = None, selector: str | None = None):
        self.step_counter += 1
        self.cur.execute(
            "INSERT INTO actions (run_id, step, action, domain, url, params, success, error, duration_ms, created_at) "
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (
                self.current_run_id, self.step_counter, action,
                (domain or ""), (url or ""),
                json.dumps(params or {}, ensure_ascii=False),
                int(bool(success)), (error or "")[:4000],
                int(duration_ms or 0), datetime.now().isoformat()
            )
        )
        if selector:
            # –û—Ç–¥–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º ¬´–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å¬ª —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            self.record_param_outcome("selector_ok", f"{domain}:{selector}", "used", success=int(bool(success)), duration_ms=duration_ms)
        self.conn.commit()

    def record_param_outcome(self, key: str, context: str, value, success: bool, duration_ms: int):
        self.cur.execute("""
            INSERT INTO params (key, context, value, n, success, tot_ms, last_ts)
            VALUES (?, ?, ?, 1, ?, ?, ?)
            ON CONFLICT(key, context, value) DO UPDATE SET
                n = n + 1,
                success = success + excluded.success,
                tot_ms = tot_ms + excluded.tot_ms,
                last_ts = excluded.last_ts
        """, (key, context or "", str(value), int(bool(success)), int(duration_ms or 0), datetime.now().isoformat()))
        self.conn.commit()

    def _stats_for(self, key: str, context: str):
        self.cur.execute("SELECT value, n, success, tot_ms FROM params WHERE key=? AND context=?", (key, context or ""))
        rows = self.cur.fetchall()
        stats = {}
        for v, n, s, tot in rows:
            stats[v] = {"n": n, "success": s, "tot_ms": tot, "avg_ms": (tot / (n or 1))}
        return stats

    def choose_option(self, key: str, context: str, options: list, default=None, minimize_time_weight: float = 0.25):
        # epsilon-greedy –ø–æ reward = success_rate - w * normalized_time
        options = list(options)
        stats = self._stats_for(key, context)
        unexplored = [o for o in options if str(o) not in stats]

        if unexplored:
            choice = random.choice(unexplored)
        else:
            if random.random() < self.epsilon:
                choice = random.choice(options)
            else:
                best = None
                best_score = -1e9
                for o in options:
                    s = stats.get(str(o), {"n": 0, "success": 0, "avg_ms": 2000})
                    n = s["n"]; succ = s["success"]; avg_ms = s["avg_ms"]
                    succ_rate = (succ / n) if n > 0 else 0.5
                    time_penalty = minimize_time_weight * (avg_ms / 5000.0)
                    score = succ_rate - time_penalty
                    if score > best_score:
                        best_score = score
                        best = o
                choice = best if best is not None else (default if default in options else options[0])
        return choice

    def choose_numeric(self, key: str, context: str, candidates: list[int | float], default=None):
        val = self.choose_option(key, context, candidates, default=default)
        try:
            return int(val)
        except Exception:
            return float(val)

    def rank_methods(self, key: str, context: str, default_order: list[str]):
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        stats = self._stats_for(key, context)
        def score(m):
            s = stats.get(m, {"n": 0, "success": 0, "avg_ms": 2500})
            n = s["n"]; succ = s["success"]; avg = s["avg_ms"]
            succ_rate = (succ / n) if n > 0 else 0.5
            return succ_rate - 0.2 * (avg / 5000.0)
        known = [m for m in default_order if m in stats]
        unknown = [m for m in default_order if m not in stats]
        ordered = sorted(known, key=lambda m: score(m), reverse=True) + unknown
        # –ù–µ–±–æ–ª—å—à–∞—è —ç–∫—Å–ø–ª–æ—Ä–∞—Ü–∏—è: –∏–Ω–æ–≥–¥–∞ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–æ–ø-2
        if len(ordered) >= 2 and random.random() < 0.1:
            ordered[0], ordered[1] = ordered[1], ordered[0]
        return ordered

def _domain_from_url(url: str | None) -> str:
    try:
        if not url:
            return ""
        return (urlparse(url).hostname or "").lower()
    except Exception:
        return ""

LEARN = SelfLearnStore("selflearn_airtable.sqlite3")
atexit.register(lambda: getattr(LEARN, "conn", None) and LEARN.conn.close())
# ======================================================================


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∂–µ—Å—Ç–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
ALLOWED_DOMAINS = (
    "airtable.com",
    "temp-mail.org",
)

def is_allowed_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.
    –†–∞–∑—Ä–µ—à–µ–Ω—ã:
      - about:* (about:blank –∏ —Ç.–ø.)
      - –õ—é–±—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã airtable.com
      - –õ—é–±—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã temp-mail.org
    """
    if not url:
        return False
    try:
        if url.startswith("about:"):
            return True
        parsed = urlparse(url)
        host = (parsed.hostname or "").lower()
        if not host:
            return False
        for d in ALLOWED_DOMAINS:
            d = d.lower()
            if host == d or host.endswith("." + d):
                return True
        return False
    except Exception:
        return False

def extract_email_from_text(text: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏.
    
    –ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
    - xxx@domain.com
    - Email: xxx@domain.com
    - "email": "xxx@domain.com"
    """
    if not text:
        return None
    
    # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è email
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    matches = re.findall(email_pattern, text)
    
    if matches:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π email
        return matches[0]
    
    return None


async def get_random_user_data() -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –∏–∑ API randomdatatools.ru
    
    Returns:
        dict: {
            'name': '–ò–º—è –§–∞–º–∏–ª–∏—è',
            'password': '–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        }
    """
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get("https://api.randomdatatools.ru/?gender=man")
            response.raise_for_status()
            data = response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è (FirstName + LastName)
            first_name = data.get('FirstName', '–ò–≤–∞–Ω')
            last_name = data.get('LastName', '–ò–≤–∞–Ω–æ–≤')
            full_name = f"{first_name} {last_name}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ API –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            api_password = data.get('Password', 'default123')
            # Airtable —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–∏–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            password = f"{api_password}!@"
            
            user_data = {
                'name': full_name,
                'password': password
            }
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {full_name}, –ø–∞—Ä–æ–ª—å: {password}")
            return user_data
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}. –ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        # Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return {
            'name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            'password': 'SecurePass2024!'
        }


async def safe_screenshot(page, full_page: bool = False, timeout_ms: int = 10000) -> Optional[bytes]:
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —É—á—ë—Ç–æ–º —Å–∞–º–æ–æ–±—É—á–∞—é—â–µ–≥–æ—Å—è —Ç–∞–π–º–∞—É—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # –ü–æ–¥–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
    domain = _domain_from_url(getattr(page, "url", ""))
    chosen_timeout = LEARN.choose_numeric("screenshot_timeout_ms", domain or "any", [6000, 8000, 10000, 12000, 15000], default=timeout_ms)
    t0 = perf_counter()
    try:
        img = await page.screenshot(type="png", full_page=full_page, timeout=chosen_timeout)
        dt = int((perf_counter() - t0) * 1000)
        LEARN.log_action("screenshot", domain, getattr(page, "url", ""), {"full_page": full_page, "timeout_ms": chosen_timeout}, True, dt)
        LEARN.record_param_outcome("screenshot_timeout_ms", domain or "any", chosen_timeout, True, dt)
        return img
    except Exception as e:
        dt = int((perf_counter() - t0) * 1000)
        LEARN.log_action("screenshot", domain, getattr(page, "url", ""), {"full_page": full_page, "timeout_ms": chosen_timeout}, False, dt, error=str(e))
        LEARN.record_param_outcome("screenshot_timeout_ms", domain or "any", chosen_timeout, False, dt)
        print(f"‚ö†Ô∏è Screenshot failed: {e}. Skipping image for this turn.")
        return None


async def detect_cloudflare_block(page) -> tuple[bool, str]:
    """NO-OP: Cloudflare detection disabled by request."""
    return False, ""


def log_cloudflare_event(phase: str, step: int, action: str, url: str, signal: str):
    """NO-OP logger: disabled."""
    return


def save_registration_result(email: str, status: str, confirmed: bool, notes: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª —Å timestamp.
    
    Args:
        email: Email –∞–¥—Ä–µ—Å
        status: –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (success/partial/failed)
        confirmed: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞
        notes: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    """
    # –°–æ–æ–±—â–∞–µ–º LEARN –æ–± –∏—Ç–æ–≥–∞—Ö —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    try:
        LEARN.finish_run(status=status, confirmed=bool(confirmed), notes=notes or "")
    except Exception:
        pass
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"airtable_registration_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE ===\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Email: {email}\n")
        f.write(f"–°—Ç–∞—Ç—É—Å: {status}\n")
        f.write(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}\n")
        if notes:
            f.write(f"–ó–∞–º–µ—Ç–∫–∏: {notes}\n")
        f.write("=" * 50 + "\n")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")


async def extract_verification_link_from_page(page) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç verification link —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∏—Å—å–º–∞ Airtable —Å –æ–±—É—á–∞–µ–º—ã–º –ø–æ—Ä—è–¥–∫–æ–º –º–µ—Ç–æ–¥–æ–≤."""
    domain = _domain_from_url(getattr(page, "url", ""))
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    default_order = ["regex", "js_links", "selector", "click_then_regex", "click_then_js"]
    order = LEARN.rank_methods("verify_extract_order", "airtable_email", default_order)
    print(f"  üîç –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {order}")

    patterns = [
        r'https://airtable\.com/auth/verifyEmail/[^\s"<>\']+',
        r'https://airtable\.com/verify[^\s"<>\']+',
        r'https://[^/]*airtable\.com/[^\s"<>\']*verify[^\s"<>\']*',
    ]

    async def try_regex(source="page"):
        t0 = perf_counter()
        html = await page.content()
        for pattern in patterns:
            match = re.search(pattern, html)
            if match:
                url = match.group(0)
                dt = int((perf_counter() - t0) * 1000)
                LEARN.log_action("verify_extract_regex", domain, page.url, {"source": source}, True, dt)
                LEARN.record_param_outcome("verify_extract_order", "airtable_email", "regex", True, dt)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL —á–µ—Ä–µ–∑ regex: {url}")
                return url
        dt = int((perf_counter() - t0) * 1000)
        LEARN.log_action("verify_extract_regex", domain, page.url, {"source": source}, False, dt)
        return None

    async def try_js_links(source="page"):
        t0 = perf_counter()
        try:
            links = await page.evaluate('''() => {
                return Array.from(document.querySelectorAll('a'))
                    .map(a => a.href)
                    .filter(href => href && (
                        href.includes('airtable.com/auth') || 
                        href.includes('verifyEmail') ||
                        href.includes('airtable.com/verify')
                    ));
            }''')
            if links and len(links) > 0:
                dt = int((perf_counter() - t0) * 1000)
                LEARN.log_action("verify_extract_js_links", domain, page.url, None, True, dt)
                LEARN.record_param_outcome("verify_extract_order", "airtable_email", "js_links", True, dt)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL —á–µ—Ä–µ–∑ JS: {links[0]}")
                return links[0]
        except Exception as e:
            pass
        dt = int((perf_counter() - t0) * 1000)
        LEARN.log_action("verify_extract_js_links", domain, page.url, None, False, dt)
        return None

    async def try_selector():
        t0 = perf_counter()
        try:
            link = await page.query_selector('a[href*="verifyEmail"]')
            if link:
                url = await link.get_attribute('href')
                if url:
                    dt = int((perf_counter() - t0) * 1000)
                    LEARN.log_action("verify_extract_selector", domain, page.url, {"selector": 'a[href*="verifyEmail"]'}, True, dt, selector='a[href*="verifyEmail"]')
                    LEARN.record_param_outcome("verify_extract_order", "airtable_email", "selector", True, dt)
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {url}")
                    return url
        except Exception:
            pass
        dt = int((perf_counter() - t0) * 1000)
        LEARN.log_action("verify_extract_selector", domain, page.url, {"selector": 'a[href*="verifyEmail"]'}, False, dt)
        return None

    async def try_click_then_regex():
        print("  üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ Airtable –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å regex...")
        t0 = perf_counter()
        try:
            clicked = await page.evaluate('''() => {
                const isVisible = (el) => !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
                const nodes = Array.from(document.querySelectorAll('a, div, span, li'));
                const candidates = nodes.filter(el => {
                    const t = (el.textContent || '').toLowerCase();
                    return isVisible(el) && (
                        t.includes('airtable') ||
                        t.includes('confirm your email') ||
                        t.includes('please confirm') ||
                        t.includes('confirm email')
                    );
                });
                for (const el of candidates) { try { el.click(); return true; } catch (e) {} }
                return false;
            }''')
            await asyncio.sleep(2)
            url = await try_regex(source="after_click")
            dt = int((perf_counter() - t0) * 1000)
            if url:
                LEARN.log_action("verify_click_then_regex", domain, page.url, None, True, dt)
                LEARN.record_param_outcome("verify_extract_order", "airtable_email", "click_then_regex", True, dt)
                return url
            else:
                LEARN.log_action("verify_click_then_regex", domain, page.url, None, False, dt)
        except Exception as e:
            dt = int((perf_counter() - t0) * 1000)
            LEARN.log_action("verify_click_then_regex", domain, page.url, None, False, dt, error=str(e))
        return None

    async def try_click_then_js():
        print("  üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ Airtable –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å JS-–ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫...")
        t0 = perf_counter()
        try:
            await page.evaluate('''() => {
                const isVisible = (el) => !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
                const nodes = Array.from(document.querySelectorAll('a, div, span, li'));
                const candidates = nodes.filter(el => {
                    const t = (el.textContent || '').toLowerCase();
                    return isVisible(el) && (t.includes('airtable') || t.includes('confirm'));
                });
                for (const el of candidates) { try { el.click(); return true; } catch (e) {} }
                return false;
            }''')
            await asyncio.sleep(2)
            url = await try_js_links(source="after_click")
            dt = int((perf_counter() - t0) * 1000)
            if url:
                LEARN.log_action("verify_click_then_js", domain, page.url, None, True, dt)
                LEARN.record_param_outcome("verify_extract_order", "airtable_email", "click_then_js", True, dt)
                return url
            else:
                LEARN.log_action("verify_click_then_js", domain, page.url, None, False, dt)
        except Exception as e:
            dt = int((perf_counter() - t0) * 1000)
            LEARN.log_action("verify_click_then_js", domain, page.url, None, False, dt, error=str(e))
        return None

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ –æ–±—É—á–∞–µ–º–æ–º—É –ø–æ—Ä—è–¥–∫—É
    for method in order:
        if method == "regex":
            url = await try_regex()
        elif method == "js_links":
            url = await try_js_links()
        elif method == "selector":
            url = await try_selector()
        elif method == "click_then_regex":
            url = await try_click_then_regex()
        elif method == "click_then_js":
            url = await try_click_then_js()
        else:
            url = None
        if url:
            return url

    return "ERROR: Verification link not found on page. Make sure you opened the email."


def get_custom_function_declarations():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ custom functions –¥–ª—è Computer Use –º–æ–¥–µ–ª–∏.
    
    Returns:
        List of FunctionDeclaration –æ–±—ä–µ–∫—Ç–æ–≤
    """
    return [
        FunctionDeclaration(
            name="switch_to_mail_tab",
            description=(
                "Switch focus to the temp-mail.org tab. "
                "Use this function when you need to interact with the email inbox "
                "(e.g., to click on an email, read messages, or extract verification links). "
                "After calling this, all subsequent actions (click, scroll, type) will be performed on the mail tab."
            ),
            parameters={
                "type": "object",
                "properties": {},
                "required": []
            }
        ),
        FunctionDeclaration(
            name="switch_to_airtable_tab",
            description=(
                "Switch focus to the Airtable registration tab. "
                "Use this function when you need to interact with Airtable.com "
                "(e.g., to fill the registration form, click buttons, navigate pages). "
                "After calling this, all subsequent actions will be performed on the Airtable tab."
            ),
            parameters={
                "type": "object",
                "properties": {},
                "required": []
            }
        ),
        FunctionDeclaration(
            name="extract_verification_link",
            description=(
                "Extracts the email verification link from the current page. "
                "Use this function when you are viewing an email on temp-mail.org "
                "that contains an Airtable verification link. "
                "IMPORTANT: You must call switch_to_mail_tab BEFORE this function "
                "to ensure you are on the correct tab. "
                "The function will parse the HTML and return the full verification URL. "
                "You should call this AFTER opening the email from Airtable."
            ),
            parameters={
                "type": "object",
                "properties": {},  # –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                "required": []
            }
        ),
        FunctionDeclaration(
            name="extract_email_from_page",
            description=(
                "Extracts the temporary email address from temp-mail.org page. "
                "Use this function when you are on https://temp-mail.org/en/ homepage "
                "and need to get the email address that is displayed in the textbox. "
                "The function will read the email from the page using JavaScript."
            ),
            parameters={
                "type": "object",
                "properties": {},
                "required": []
            }
        )
    ]


async def extract_email_from_tempmail_page(page) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç email —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã temp-mail.org —Å —Å–∞–º–æ–æ–±—É—á–∞–µ–º—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    domain = _domain_from_url(getattr(page, "url", "https://temp-mail.org/en/"))
    total_wait_ms = LEARN.choose_numeric("email_initial_wait_ms", "temp-mail", [8000, 10000, 12000, 15000, 20000], default=15000)
    attempts = max(1, int(total_wait_ms / 500))
    print(f"  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ email (–¥–æ ~{int(total_wait_ms/1000)} —Å–µ–∫, {attempts} –ø–æ–ø—ã—Ç–æ–∫)...")

    # –ú–µ—Ç–æ–¥ 1: –ê–∫—Ç–∏–≤–Ω—ã–π JS-–ø–æ–∏—Å–∫
    t0 = perf_counter()
    for attempt in range(attempts):
        try:
            email = await page.evaluate('''() => {
                let input = document.querySelector('#mail');
                if (input && input.value && input.value.includes('@')) return input.value;
                let inputs = document.querySelectorAll('input');
                for (let inp of inputs) {
                    if (inp.value && inp.value.includes('@') && (!inp.placeholder || !inp.placeholder.includes('@'))) {
                        return inp.value;
                    }
                }
                let elements = document.querySelectorAll('[class*="mail"], [class*="email"], [id*="mail"], [id*="email"]');
                for (let el of elements) {
                    if (el.value && el.value.includes('@')) return el.value;
                    if (el.innerText && el.innerText.includes('@')) return el.innerText;
                }
                return null;
            }''')
            if email and '@' in email and '.' in email:
                dt = int((perf_counter() - t0) * 1000)
                LEARN.log_action("email_extract_js", domain, page.url, {"attempt": attempt+1, "total_wait_ms": total_wait_ms}, True, dt)
                LEARN.record_param_outcome("email_extract_method", "temp-mail", "js", True, dt)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email —á–µ—Ä–µ–∑ JavaScript: {email}")
                return email
        except Exception as e_js:
            pass
        await asyncio.sleep(0.5)
    dt_js = int((perf_counter() - t0) * 1000)
    LEARN.log_action("email_extract_js", domain, page.url, {"attempts": attempts, "total_wait_ms": total_wait_ms}, False, dt_js)
    LEARN.record_param_outcome("email_initial_wait_ms", "temp-mail", total_wait_ms, False, dt_js)

    # –ú–µ—Ç–æ–¥ 2: Regex
    try:
        t1 = perf_counter()
        html = await page.content()
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        matches = re.findall(email_pattern, html)
        for match in matches:
            if 'example.com' not in match and 'test.com' not in match:
                dt = int((perf_counter() - t1) * 1000)
                LEARN.log_action("email_extract_regex", domain, page.url, None, True, dt)
                LEARN.record_param_outcome("email_extract_method", "temp-mail", "regex", True, dt)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email —á–µ—Ä–µ–∑ regex: {match}")
                return match
        dt = int((perf_counter() - t1) * 1000)
        LEARN.log_action("email_extract_regex", domain, page.url, None, False, dt)
    except Exception as e:
        pass

    # –ú–µ—Ç–æ–¥ 3: –°–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
    try:
        t2 = perf_counter()
        input_field = await page.query_selector('#mail, input[type="email"], input[type="text"]')
        if input_field:
            email = await input_field.input_value()
            if email and '@' in email and '.' in email:
                dt = int((perf_counter() - t2) * 1000)
                LEARN.log_action("email_extract_selector", domain, page.url, {"selector": "#mail | input"}, True, dt, selector="#mail")
                LEARN.record_param_outcome("email_extract_method", "temp-mail", "selector", True, dt)
                return email
        dt = int((perf_counter() - t2) * 1000)
        LEARN.log_action("email_extract_selector", domain, page.url, {"selector": "#mail | input"}, False, dt)
    except Exception:
        pass

    # –ú–µ—Ç–æ–¥ 4: –û–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ inputs
    try:
        t3 = perf_counter()
        all_emails = await page.evaluate('''() => {
            const inputs = document.querySelectorAll('input');
            for (let inp of inputs) {
                if (inp.value && inp.value.includes('@')) return inp.value;
            }
            return null;
        }''')
        if all_emails and '@' in all_emails:
            dt = int((perf_counter() - t3) * 1000)
            LEARN.log_action("email_extract_all_inputs", domain, page.url, None, True, dt)
            LEARN.record_param_outcome("email_extract_method", "temp-mail", "all_inputs", True, dt)
            return all_emails
        dt = int((perf_counter() - t3) * 1000)
        LEARN.log_action("email_extract_all_inputs", domain, page.url, None, False, dt)
    except:
        pass

    return "ERROR: Email not found. Make sure page is fully loaded and email is visible."


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö TOOL CALLS ====================

async def execute_computer_use_action(page, function_call: FunctionCall, screen_width: int, screen_height: int, page_mail=None, page_airtable=None) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ Computer Use –≤ –±—Ä–∞—É–∑–µ—Ä–µ Playwright.
    
    –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    https://ai.google.dev/gemini-api/docs/computer-use
    
    Args:
        page: Playwright Page –æ–±—ä–µ–∫—Ç (—Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        function_call: FunctionCall –æ—Ç –º–æ–¥–µ–ª–∏
        screen_width: –®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        screen_height: –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        page_mail: (optional) –í–∫–ª–∞–¥–∫–∞ —Å temp-mail (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
        page_airtable: (optional) –í–∫–ª–∞–¥–∫–∞ —Å Airtable (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    action = function_call.name
    args = dict(function_call.args) if function_call.args else {}
    
    print(f"  üîß –î–µ–π—Å—Ç–≤–∏–µ: {action}")
    print(f"     –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {json.dumps(args, indent=2, ensure_ascii=False)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ safety_decision
    if 'safety_decision' in args:
        safety = args['safety_decision']
        if safety.get('decision') == 'require_confirmation':
            print(f"  ‚ö†Ô∏è  Safety Warning: {safety.get('explanation', 'N/A')}")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (auto-approve)
            # –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å safety_acknowledgement –ò url
            return {
                "success": True, 
                "message": "Safety confirmation (auto-approved for testing)", 
                "safety_acknowledgement": "true",
                "url": page.url  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Computer Use!
            }
    
    try:
        # ==================== –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö ====================
        
        if action == "switch_to_mail_tab":
            if page_mail is None:
                return {"success": False, "message": "Mail tab not available", "url": page.url}
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            await page_mail.bring_to_front()
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –∂–¥—ë–º —á—Ç–æ–±—ã –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –í–ò–î–ò–ú–û–ô
            # Computer Use API —Å–∫—Ä–∏–Ω—à–æ—Ç–∏—Ç –¢–ï–ö–£–©–£–Æ –≤–∏–¥–∏–º—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response
            try:
                await page_mail.wait_for_load_state("domcontentloaded", timeout=5000)
            except:
                pass  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            # SELF-LEARNING: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            tab_wait_ms = LEARN.choose_numeric("tab_switch_wait_ms", "tabs", [300, 600, 800, 1000, 1200, 1500], default=1000)
            t0 = perf_counter()
            await asyncio.sleep(tab_wait_ms / 1000)
            LEARN.log_action("switch_tab", _domain_from_url(page_mail.url), page_mail.url, {"target": "mail", "wait_ms": tab_wait_ms}, True, int((perf_counter()-t0)*1000))
            LEARN.record_param_outcome("tab_switch_wait_ms", "tabs", tab_wait_ms, True, tab_wait_ms)
            print(f"  ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É temp-mail: {page_mail.url}")
            return {
                "success": True, 
                "message": f"Switched to mail tab: {page_mail.url}",
                "url": page_mail.url
            }
        
        elif action == "switch_to_airtable_tab":
            if page_airtable is None:
                return {"success": False, "message": "Airtable tab not available", "url": page.url}
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            await page_airtable.bring_to_front()
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –∂–¥—ë–º —á—Ç–æ–±—ã –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –í–ò–î–ò–ú–û–ô
            # Computer Use API —Å–∫—Ä–∏–Ω—à–æ—Ç–∏—Ç –¢–ï–ö–£–©–£–Æ –≤–∏–¥–∏–º—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response
            try:
                await page_airtable.wait_for_load_state("domcontentloaded", timeout=5000)
            except:
                pass  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            # SELF-LEARNING: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            tab_wait_ms = LEARN.choose_numeric("tab_switch_wait_ms", "tabs", [300, 600, 800, 1000, 1200, 1500], default=1000)
            t0 = perf_counter()
            await asyncio.sleep(tab_wait_ms / 1000)
            LEARN.log_action("switch_tab", _domain_from_url(page_airtable.url), page_airtable.url, {"target": "airtable", "wait_ms": tab_wait_ms}, True, int((perf_counter()-t0)*1000))
            LEARN.record_param_outcome("tab_switch_wait_ms", "tabs", tab_wait_ms, True, tab_wait_ms)
            print(f"  ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É Airtable: {page_airtable.url}")
            return {
                "success": True, 
                "message": f"Switched to Airtable tab: {page_airtable.url}",
                "url": page_airtable.url
            }
        
        # ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================
        
        if action == "open_web_browser":
            # –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
            return {"success": True, "message": "–ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç", "url": page.url}
        
        elif action == "navigate":
            url = args.get("url", "")
            if not is_allowed_url(url):
                return {"success": False, "message": f"Navigation blocked by policy: {url}", "url": page.url}
            domain = _domain_from_url(url)
            # SELF-LEARNING: –í—ã–±–æ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
            strategy = LEARN.choose_option("nav_strategy", domain, ["domcontentloaded", "load", "minimal"], default="domcontentloaded")
            after_wait_ms = LEARN.choose_numeric("nav_after_wait_ms", domain, [500, 1000, 1500, 2000, 3000], default=1500)
            selector_timeout_ms = LEARN.choose_numeric("selector_timeout_ms", domain, [5000, 8000, 10000, 12000, 15000], default=10000)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            await page.wait_for_timeout(LEARN.choose_numeric("pre_nav_pause_ms", domain, [500, 800, 1000, 1200], default=1000))

            tried = []
            success = False
            err_msgs = []
            t_nav0 = perf_counter()

            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: –≤—ã–±—Ä–∞–Ω–Ω–∞—è + 2 –∑–∞–ø–∞—Å–Ω—ã—Ö
            strategies = [strategy] + [s for s in ["domcontentloaded", "load", "minimal"] if s != strategy]
            for strat in strategies:
                tried.append(strat)
                try:
                    print(f"  üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ {url} (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strat})...")
                    if strat == "domcontentloaded":
                        await page.goto(url, wait_until="domcontentloaded", timeout=20000)
                    elif strat == "load":
                        await page.goto(url, wait_until="load", timeout=15000)
                    else:
                        nav_task = page.goto(url, wait_until=None)
                        await asyncio.sleep(LEARN.choose_numeric("nav_minimal_wait_ms", domain, [1500, 2000, 3000], default=3000) / 1000)
                        await asyncio.wait_for(nav_task, timeout=5)

                    await page.wait_for_timeout(after_wait_ms)
                    print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {page.url}")
                    # –î–æ–ø. –æ–∂–∏–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ –¥–æ–º–µ–Ω—É
                    try:
                        if "temp-mail" in url or "tempmail" in url.lower():
                            t_sel = perf_counter()
                            await page.wait_for_selector("#mail, input[type='email']", timeout=selector_timeout_ms)
                            dt_sel = int((perf_counter() - t_sel)*1000)
                            LEARN.log_action("selector_wait", domain, page.url, {"selector": "#mail, input[type='email']"}, True, dt_sel, selector="#mail")
                            LEARN.record_param_outcome("selector_timeout_ms", domain, selector_timeout_ms, True, dt_sel)
                        elif "airtable" in url:
                            t_sel = perf_counter()
                            await page.wait_for_selector("input, button, form, [role='main']", timeout=selector_timeout_ms)
                            dt_sel = int((perf_counter() - t_sel)*1000)
                            LEARN.log_action("selector_wait", domain, page.url, {"selector": "input, button, form, [role='main']"}, True, dt_sel)
                            LEARN.record_param_outcome("selector_timeout_ms", domain, selector_timeout_ms, True, dt_sel)
                        else:
                            await page.wait_for_selector("body", timeout=5000)
                    except Exception as e_sel:
                        # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
                        LEARN.log_action("selector_wait", domain, page.url, {"selector": "(domain-default)"}, False, 0, error=str(e_sel))

                    success = True
                    break
                except Exception as e_try:
                    msg = str(e_try)
                    err_msgs.append(f"{strat}: {msg[:80]}")
                    print(f"  ‚ö†Ô∏è  –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strat} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ({msg[:80]}) ‚Üí –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é...")

            dt_nav = int((perf_counter() - t_nav0) * 1000)
            LEARN.log_action("navigate", domain, url, {"tried": tried, "chosen": strategy, "after_wait_ms": after_wait_ms}, success, dt_nav, error=" | ".join(err_msgs))
            LEARN.record_param_outcome("nav_strategy", domain, strategy, success, dt_nav)
            LEARN.record_param_outcome("nav_after_wait_ms", domain, after_wait_ms, success, dt_nav)

            if not success:
                return {"success": False, "message": f"Navigate failed ({' | '.join(err_msgs)})", "url": page.url}

            return {"success": True, "message": f"–ü–µ—Ä–µ—à–µ–ª –Ω–∞ {page.url}", "url": page.url}
        
        elif action == "search":
            # –î–µ–π—Å—Ç–≤–∏–µ 'search' –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            return {"success": False, "message": "Search action is disabled for this task", "url": page.url}
        
        elif action == "go_back":
            await page.go_back(wait_until="networkidle")
            return {"success": True, "message": "–í–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", "url": page.url}
        
        elif action == "go_forward":
            await page.go_forward(wait_until="networkidle")
            return {"success": True, "message": "–ü–µ—Ä–µ—à–µ–ª –≤–ø–µ—Ä–µ–¥", "url": page.url}
        
        # ==================== –ö–õ–ò–ö–ò –ò –ù–ê–í–ï–î–ï–ù–ò–ï ====================
        
        elif action == "click_at":
            # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (0-999 ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏)
            x = args.get("x", 0)
            y = args.get("y", 0)
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            await page.mouse.click(actual_x, actual_y)
            await page.wait_for_load_state("networkidle", timeout=5000)
            
            return {"success": True, "message": f"–ö–ª–∏–∫ –ø–æ ({x}, {y}) ‚Üí ({actual_x}, {actual_y})px", "url": page.url}
        
        elif action == "hover_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            await page.mouse.move(actual_x, actual_y)
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
            
            return {"success": True, "message": f"–ù–∞–≤–µ–ª –∫—É—Ä—Å–æ—Ä –Ω–∞ ({x}, {y}) ‚Üí ({actual_x}, {actual_y})px", "url": page.url}
        
        # ==================== –í–í–û–î –¢–ï–ö–°–¢–ê ====================
        
        elif action == "type_text_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            text = args.get("text", "")
            press_enter = args.get("press_enter", True)
            clear_before = args.get("clear_before_typing", True)
            
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é
            await page.mouse.click(actual_x, actual_y)
            await asyncio.sleep(0.3)
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if clear_before:
                await page.keyboard.press("Control+A")
                await page.keyboard.press("Backspace")
            
            # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
            await page.keyboard.type(text, delay=50)  # delay –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            
            # Enter (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if press_enter:
                await page.keyboard.press("Enter")
                await page.wait_for_load_state("networkidle", timeout=5000)
            
            return {"success": True, "message": f"–í–≤–µ–ª —Ç–µ–∫—Å—Ç '{text[:50]}...' at ({x}, {y})", "url": page.url}
        
        # ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ====================
        
        elif action == "key_combination":
            keys = args.get("keys", "")
            await page.keyboard.press(keys)
            await asyncio.sleep(0.5)
            
            return {"success": True, "message": f"–ù–∞–∂–∞–ª –∫–ª–∞–≤–∏—à–∏: {keys}", "url": page.url}
        
        # ==================== –°–ö–†–û–õ–õ–ò–ù–ì ====================
        
        elif action == "scroll_document":
            direction = args.get("direction", "down")
            scroll_amount = 500
            
            if direction == "down":
                await page.mouse.wheel(0, scroll_amount)
            elif direction == "up":
                await page.mouse.wheel(0, -scroll_amount)
            elif direction == "right":
                await page.mouse.wheel(scroll_amount, 0)
            elif direction == "left":
                await page.mouse.wheel(-scroll_amount, 0)
            
            await asyncio.sleep(0.5)
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É {direction}", "url": page.url}
        
        elif action == "scroll_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            direction = args.get("direction", "down")
            magnitude = args.get("magnitude", 800)
            
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            actual_magnitude = int(magnitude / 1000 * screen_height)
            
            # –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            await page.mouse.move(actual_x, actual_y)
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å
            if direction == "down":
                await page.mouse.wheel(0, actual_magnitude)
            elif direction == "up":
                await page.mouse.wheel(0, -actual_magnitude)
            elif direction == "right":
                await page.mouse.wheel(actual_magnitude, 0)
            elif direction == "left":
                await page.mouse.wheel(-actual_magnitude, 0)
            
            await asyncio.sleep(0.5)
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∏–ª —ç–ª–µ–º–µ–Ω—Ç at ({x}, {y}) {direction} –Ω–∞ {magnitude}", "url": page.url}
        
        # ==================== DRAG & DROP ====================
        
        elif action == "drag_and_drop":
            x = args.get("x", 0)
            y = args.get("y", 0)
            dest_x = args.get("destination_x", 0)
            dest_y = args.get("destination_y", 0)
            
            start_x = int(x / 1000 * screen_width)
            start_y = int(y / 1000 * screen_height)
            end_x = int(dest_x / 1000 * screen_width)
            end_y = int(dest_y / 1000 * screen_height)
            
            # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            await page.mouse.move(start_x, start_y)
            await page.mouse.down()
            await asyncio.sleep(0.2)
            await page.mouse.move(end_x, end_y, steps=10)
            await asyncio.sleep(0.2)
            await page.mouse.up()
            
            return {"success": True, "message": f"–ü–µ—Ä–µ—Ç–∞—â–∏–ª –∏–∑ ({x}, {y}) –≤ ({dest_x}, {dest_y})", "url": page.url}
        
        # ==================== –û–ñ–ò–î–ê–ù–ò–ï ====================
        
        elif action == "wait_5_seconds":
            await asyncio.sleep(5)
            return {"success": True, "message": "–ñ–¥–∞–ª 5 —Å–µ–∫—É–Ω–¥", "url": page.url}
        
        # ==================== CUSTOM FUNCTIONS ====================
        
        elif action == "extract_verification_link":
            print("  üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ verification link –∏–∑ HTML...")
            url = await extract_verification_link_from_page(page)
            if url.startswith("ERROR"):
                return {"success": False, "error": url, "url": page.url}
            else:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")
                return {
                    "success": True,
                    "verification_url": url,
                    "message": f"Verification link extracted: {url}",
                    "url": page.url
                }
        
        elif action == "extract_email_from_page":
            print("  üìß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞ –∏–∑ HTML...")
            email = await extract_email_from_tempmail_page(page)
            if email.startswith("ERROR"):
                return {"success": False, "error": email, "url": page.url}
            else:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email: {email}")
                return {
                    "success": True,
                    "email": email,
                    "message": f"Email extracted: {email}",
                    "url": page.url
                }
        
        # ==================== –ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –î–ï–ô–°–¢–í–ò–ï ====================
        
        else:
            return {"success": False, "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}", "url": page.url}
    
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {str(e)}"
        print(f"  ‚ùå {error_msg}")
        return {"success": False, "message": error_msg, "url": page.url}


# ==================== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ê–ì–ï–ù–¢–ê ====================

async def run_computer_use_agent(task: str, max_steps: int = 20):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å Computer Use –º–æ–¥–µ–ª—å—é.
    
    Args:
        task: –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç)
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    print("=" * 70)
    print("üöÄ –ó–∞–ø—É—Å–∫ Computer Use –∞–≥–µ–Ω—Ç–∞")
    print("=" * 70)
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    print(f"‚öôÔ∏è  –ú–æ–¥–µ–ª—å: gemini-2.5-computer-use-preview-10-2025")
    print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {max_steps}")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Google Generative AI
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use tool
    config = GenerateContentConfig(
        tools=[
            Tool(
                computer_use=ComputerUse(
                    environment=genai.types.Environment.ENVIRONMENT_BROWSER
                )
            )
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1440x900 –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Playwright —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False,  # –í–∏–¥–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        args=[
            '--start-maximized',
            '--disable-blink-features=AutomationControlled'
        ]
    )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow',
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        extra_http_headers={
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        },
        java_script_enabled=True,  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º JS
    )
    
    # üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if stealth_async:
        print("üïµÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º playwright-stealth...")
        await stealth_async(context)
    
    # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    pages = context.pages
    if pages:
        page = pages[0]
        print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É (–≤—Å–µ–≥–æ: {len(pages)})")
    else:
        page = await context.new_page()
        print("üìÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    await page.goto("about:blank")
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = []
    
    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å –∑–∞–¥–∞—á–µ–π
    initial_prompt = f"""
–¢—ã - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

{task}

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Computer Use tool –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–æ–º.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: navigate, click, type, scroll, press_key, wait, get_text.

–ü–ª–∞–Ω–∏—Ä—É–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–π –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ —Å–æ–æ–±—â–∞–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
–ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–ø–∏—à–∏ –∏—Ç–æ–≥ –∏ –∑–∞–≤–µ—Ä—à–∞–π —Ä–∞–±–æ—Ç—É.
"""
    
    print(f"\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    try:
        step = 0
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –∑–∞–¥–∞—á–∞ + –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_bytes = await page.screenshot(type="png", full_page=False)
        history = [
            Content(
                role="user",
                parts=[
                    Part.from_text(text=initial_prompt),
                    Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                ]
            )
        ]
        
        while step < max_steps:
            step += 1
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print(f"{'=' * 70}")
            
            # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if not response.candidates or not response.candidates[0].content.parts:
                print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            model_content = response.candidates[0].content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ parts –≤ –æ—Ç–≤–µ—Ç–µ
            has_tool_calls = False
            has_text = False
            tool_responses = []
            
            for part in model_content.parts:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç –º–æ–¥–µ–ª–∏
                if hasattr(part, 'text') and part.text:
                    has_text = True
                    print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                    print(f"   {part.text[:500]}...")
                
                # Tool call (–¥–µ–π—Å—Ç–≤–∏–µ)
                if hasattr(part, 'function_call') and part.function_call:
                    has_tool_calls = True
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
                    result = await execute_computer_use_action(
                        page, 
                        part.function_call,
                        SCREEN_WIDTH,
                        SCREEN_HEIGHT
                    )
                    
                    print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('message', result)}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    tool_responses.append(
                        Part.from_function_response(
                            name=part.function_call.name,
                            response=result
                        )
                    )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    await asyncio.sleep(1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            history.append(model_content)
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ tool_calls, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            if tool_responses:
                # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º function_response + —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –æ–¥–∏–Ω user turn
                history.append(
                    Content(
                        role="user",
                        parts=tool_responses + [
                            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                        ]
                    )
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                print("\n" + "=" * 70)
                print("‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                print("=" * 70)
                print(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(part.text)
                break
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ tool_calls
            if not has_text and not has_tool_calls:
                print("\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –¥–µ–π—Å—Ç–≤–∏–π")
                break
        
        else:
            print(f"\n‚è±Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = Path("logs") / f"computer_use_final_{timestamp}.png"
        screenshot_path.parent.mkdir(exist_ok=True)
        await page.screenshot(path=str(screenshot_path), full_page=True)
        print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        await asyncio.sleep(3600)  # 1 —á–∞—Å
    
    except KeyboardInterrupt:
        print("\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print("\nüßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        await browser.close()
        await playwright.stop()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ")


# ==================== AIRTABLE REGISTRATION ====================

async def run_email_extraction(max_steps: int = 15) -> Optional[str]:
    """
    –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —Å temp-mail.org
    
    Args:
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (15 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    
    Returns:
        Email –∞–¥—Ä–µ—Å –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    task = """
MISSION: Extract temporary email address from temp-mail.org

üéØ IMPORTANT: The page https://temp-mail.org/en/ is ALREADY OPEN!
   - You can see it in the screenshot
   - DO NOT navigate again - just work with current page

YOUR TASK:
  Get the temporary email address from the current page (temp-mail.org).

STEP-BY-STEP WORKFLOW:
  1. ‚úÖ Page is ALREADY open - check the screenshot
  
  2. ‚ö†Ô∏è CRITICAL: WAIT 10 seconds for email to fully load
     - The email does NOT appear immediately!
     - Textbox shows "Loading..." at first, then email appears
     - Use wait_5_seconds action TWICE (5s + 5s = 10s total)
  
  3. Extract email using the CUSTOM FUNCTION:
     ‚≠ê CALL: extract_email_from_page()
     - This function will parse HTML and get the email
     - It returns the email address as a string
     - DO NOT try to read email from screenshot manually!
  
  4. After getting email from function, IMMEDIATELY RETURN result:
     - Simply state: "The temporary email is: xxx@domain.com"
     - DO NOT do any other actions after getting email
  
  5. STOP as soon as email is extracted

ANTI-LOOP RULES:
  - Maximum 3 attempts total
  - If extract_email_from_page() returns error ‚Üí WAIT 5s and try again
  - DO NOT navigate to temp-mail again (already there!)
  - DO NOT click random elements hoping to find email

SUCCESS CHECK:
  ‚úÖ Email extracted = Contains @ and domain name
  ‚ùå Failed = Function returns ERROR

REMEMBER:
  - Page is ALREADY OPEN - don't navigate
  - ALWAYS use extract_email_from_page() function
  - DO NOT try to read visually from screenshot
  - STOP immediately after getting email
"""
    
    print("\n" + "=" * 70)
    print("üìß –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ù–û–ì–û EMAIL")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use + Custom Functions
    config = GenerateContentConfig(
        tools=[
            Tool(computer_use=ComputerUse(
                environment=genai.types.Environment.ENVIRONMENT_BROWSER
            )),
            Tool(function_declarations=get_custom_function_declarations())
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False, 
        args=[
            '--start-maximized',
            '--disable-blink-features=AutomationControlled'
        ]
    )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow',
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        extra_http_headers={
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        },
        java_script_enabled=True,  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º JS
    )
    
    # üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if stealth_async:
        print("üïµÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º playwright-stealth...")
        await stealth_async(context)
    
    # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    # Chromium –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    pages = context.pages
    if pages:
        page = pages[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
        print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É (–≤—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(pages)})")
    else:
        page = await context.new_page()  # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–∫
        print("üìÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
    
    # üéØ –°–†–ê–ó–£ –û–¢–ö–†–´–í–ê–ï–ú temp-mail.org –≤–º–µ—Å—Ç–æ about:blank
    # –≠—Ç–æ –¥–∞–µ—Ç –∞–≥–µ–Ω—Ç—É —É–∂–µ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
    print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É temp-mail.org...")
    await page.goto("https://temp-mail.org/en/", wait_until="domcontentloaded")
    await page.wait_for_timeout(10000)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É")
    
    history = []
    screenshot_bytes = await safe_screenshot(page, full_page=False, timeout_ms=10000)
    
    history.append(
        Content(role="user", parts=[
            Part(text=task),
            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
        ])
    )
    
    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    extracted_email = None
    
    try:
        for step in range(1, max_steps + 1):
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print("=" * 70)
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            candidate = response.candidates[0]
            model_content = candidate.content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ tool_calls
            has_text = any(hasattr(part, 'text') and part.text for part in model_content.parts)
            has_tool_calls = any(hasattr(part, 'function_call') and part.function_call for part in model_content.parts)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏
            if has_text:
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                        print(f"   {part.text[:300]}...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º tool_calls
            tool_responses = []
            if has_tool_calls:
                for part in model_content.parts:
                    if hasattr(part, 'function_call') and part.function_call:
                        fc = part.function_call
                        result = await execute_computer_use_action(page, fc, SCREEN_WIDTH, SCREEN_HEIGHT)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if fc.name == "extract_email_from_page" and result.get("success"):
                            extracted_email = result.get("email")
                            print(f"\n‚úÖ EMAIL –ü–û–õ–£–ß–ï–ù: {extracted_email}")
                        
                        tool_responses.append(
                            Part(function_response=FunctionResponse(
                                name=fc.name,
                                response=result
                            ))
                        )
            
            history.append(model_content)
            
            if tool_responses:
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                history.append(
                    Content(role="user", parts=tool_responses + [
                        Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                    ])
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ email –∏–∑–≤–ª–µ—á–µ–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º
            if extracted_email:
                print(f"\n‚úÖ –®–ê–ì 1 –ó–ê–í–ï–†–®–Å–ù: Email = {extracted_email}")
                break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å email –∏–∑ —Ç–µ–∫—Å—Ç–∞
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        extracted_email = extract_email_from_text(part.text)
                        if extracted_email:
                            print(f"\n‚úÖ Email –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞: {extracted_email}")
                            break
                break
        
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –®–ê–ì 2!
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –®–ê–ì 2...")
        return extracted_email
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –®–ê–ì 1: {e}")
        await browser.close()
        await playwright.stop()
        return None


async def run_airtable_registration(email: str, max_steps: int = 35) -> dict:
    """
    –®–ê–ì 2: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Airtable + –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
    
    Args:
        email: Email –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ –®–ê–ì 1
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (35 –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {status, email, confirmed, notes}
    """
    task = f"""
MISSION: Register on Airtable and confirm email

YOUR EMAIL: {email}
REGISTRATION URL: https://airtable.com/invite/r/LzgpVACU

YOUR TASK:
  Complete full Airtable registration using the email above, including email verification.

CRITICAL WORKFLOW:
  üìù PHASE 1: AIRTABLE REGISTRATION FORM
  -------------------------------------------
  STEP 1: Navigate to https://airtable.com/invite/r/LzgpVACU
  
  STEP 2: WAIT 5 seconds for form to load
  
  STEP 3: Fill registration form with these EXACT details:
    * Email: {email} (EXACTLY this email, DO NOT MODIFY!)
    * Full Name: "Maria Rodriguez" (or any realistic name)
    * Password: "SecurePass2024!" (minimum 8 characters)
    
    IMPORTANT NOTES:
    - Submit button "Create account" is DISABLED initially
    - It only enables when ALL fields are valid
    - If button stays disabled ‚Üí check email format is correct
  
  STEP 4: Click "Create account" button ONCE (only one click!)
  
  STEP 5: ‚ö†Ô∏è CRITICAL - After clicking submit, you MUST:
    1. **WAIT 10 seconds** for page to process
    2. **CHECK current URL** - THIS IS THE SUCCESS INDICATOR!
       ‚úÖ SUCCESS = URL changed from "/invite/r/..." to "https://airtable.com/" (base domain)
       ‚úÖ SUCCESS = URL contains "/workspace" or "/verify"
       ‚ùå FAIL = URL still contains "/invite/"
    3. **IF URL DID NOT CHANGE**:
       - Check page for error messages
       - Read what the error says
       - Report error and STOP
    4. **IF URL CHANGED TO https://airtable.com/**:
       - Registration is SUCCESSFUL!
       - Proceed immediately to PHASE 2

  ‚úâÔ∏è PHASE 2: EMAIL VERIFICATION
  -------------------------------------------
  STEP 6: Navigate to https://temp-mail.org/en/
    * This is where you got the email originally
  
  STEP 7: WAIT 15 seconds for email to arrive
    * Airtable sends confirmation email within ~15 seconds
    * Email subject: "Please confirm your email"
    * Sender: Airtable <noreply@airtable.com>
  
  STEP 8: Refresh temp-mail page if needed
    * If inbox still shows "Your inbox is empty"
    * Reload the page or wait longer
  
  STEP 9: Find and CLICK on the Airtable email to open it
    * Click on subject line to view email content
  
  STEP 10: Extract verification URL using CUSTOM FUNCTION
    ‚≠ê CALL: extract_verification_link()
    - This function will parse HTML and find the verification URL
    - It returns the full URL as a string
    - DO NOT try to click the link visually!
  
  STEP 11: Navigate to verification URL
    * After getting URL from extract_verification_link()
    * Use navigate(url=<the_url_from_function>)
    * This opens it in SAME tab (not new tab!)
  
  STEP 12: WAIT 5 seconds for verification to process
  
  STEP 13: CHECK verification success
    * Look for success message or redirect to workspace
    * Account should now be confirmed

ANTI-LOOP PROTECTION:
  ‚õî If you repeat the same action 3+ times ‚Üí STOP and analyze
  
  Common issues & solutions:
  - ‚ùå Submit button disabled? 
    ‚Üí Check all fields are filled correctly
    ‚Üí Email must be valid format
  
  - ‚ùå URL not changing after submit?
    ‚Üí WAIT full 10 seconds before checking
    ‚Üí Look for error messages on page
  
  - ‚ùå Email not arriving?
    ‚Üí WAIT up to 30 seconds total
    ‚Üí Refresh temp-mail page
  
  - ‚ùå Can't find verification link?
    ‚Üí Use extract_verification_link() function
    ‚Üí DO NOT try to click visually
  
  NEVER:
    - Click "Create account" more than once
    - Check URL before waiting 10 seconds
    - Click verification link (use navigate instead)
    - Wait indefinitely (max 30s for email)

SUCCESS INDICATORS:
  ‚úÖ Registration successful:
    - URL changes from "/invite/r/xxx" to "https://airtable.com/"
  
  ‚úÖ Email verification successful:
    - After opening verify URL, page shows success or workspace

FINAL OUTPUT:
  When done, clearly state:
  - "Registration successful" or "Registration failed"
  - "Email confirmed" or "Email not confirmed"
"""
    
    print("\n" + "=" * 70)
    print("üìù –®–ê–ì 2: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE + –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
    print("=" * 70)
    print(f"üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º email: {email}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use + Custom Functions
    config = GenerateContentConfig(
        tools=[
            Tool(computer_use=ComputerUse(
                environment=genai.types.Environment.ENVIRONMENT_BROWSER
            )),
            Tool(function_declarations=get_custom_function_declarations())
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–Ω–æ–≤—ã–π –¥–ª—è –®–ê–ì 2)
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False, 
        args=[
            '--start-maximized',
            '--disable-blink-features=AutomationControlled'
        ]
    )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow',
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        extra_http_headers={
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        },
        java_script_enabled=True,  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º JS
    )
    
    # üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if stealth_async:
        print("üïµÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º playwright-stealth...")
        await stealth_async(context)
    
    # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    pages = context.pages
    if pages:
        page = pages[0]
        print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É (–≤—Å–µ–≥–æ: {len(pages)})")
    else:
        page = await context.new_page()
        print("üìÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
    
    await page.goto("about:blank")
    
    history = []
    screenshot_bytes = await page.screenshot(type="png", full_page=False)
    
    history.append(
        Content(role="user", parts=[
            Part(text=task),
            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
        ])
    )
    
    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    result = {
        "status": "unknown",
        "email": email,
        "confirmed": False,
        "notes": ""
    }
    
    try:
        for step in range(1, max_steps + 1):
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print("=" * 70)
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            candidate = response.candidates[0]
            model_content = candidate.content
            
            has_text = any(hasattr(part, 'text') and part.text for part in model_content.parts)
            has_tool_calls = any(hasattr(part, 'function_call') and part.function_call for part in model_content.parts)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏
            if has_text:
                final_text = ""
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                        print(f"   {part.text[:300]}...")
                        final_text += part.text
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if "registration successful" in final_text.lower() or "account created" in final_text.lower():
                    result["status"] = "success"
                if "email confirmed" in final_text.lower() or "email verified" in final_text.lower():
                    result["confirmed"] = True
                if "failed" in final_text.lower() or "error" in final_text.lower():
                    result["status"] = "failed"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º tool_calls
            tool_responses = []
            if has_tool_calls:
                for part in model_content.parts:
                    if hasattr(part, 'function_call') and part.function_call:
                        fc = part.function_call
                        exec_result = await execute_computer_use_action(page, fc, SCREEN_WIDTH, SCREEN_HEIGHT)
                        tool_responses.append(
                            Part(function_response=FunctionResponse(
                                name=fc.name,
                                response=exec_result
                            ))
                        )
            
            history.append(model_content)
            
            if tool_responses:
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                history.append(
                    Content(role="user", parts=tool_responses + [
                        Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                    ])
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                print("\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                result["notes"] = final_text[:200] if 'final_text' in locals() else "Registration completed"
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = Path("logs") / f"airtable_registration_{timestamp}.png"
        screenshot_path.parent.mkdir(exist_ok=True)
        await page.screenshot(path=str(screenshot_path), full_page=True)
        print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º 60 —Å–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(60)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –®–ê–ì 2: {e}")
        result["status"] = "failed"
        result["notes"] = f"Error: {str(e)}"
    
    finally:
        await browser.close()
        await playwright.stop()
    
    return result


async def run_email_extraction_on_page(page, client, config, max_steps: int = 15) -> Optional[str]:
    """
    –®–ê–ì 1 (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —Å temp-mail.org –Ω–∞ –£–ñ–ï –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ.

    Args:
        page: –í–∫–ª–∞–¥–∫–∞ Playwright c temp-mail (–∏–ª–∏ about:blank)
        client: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π genai.Client
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GenerateContentConfig —Å Computer Use + custom functions
        max_steps: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∞–≥–æ–≤

    Returns:
        –°—Ç—Ä–æ–∫–∞ email –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
    """
    task = """
MISSION: Extract temporary email address from temp-mail.org

YOUR TASK:
  Get a temporary email address from https://temp-mail.org/en/ that will be used for Airtable registration.

RULES (Unified Session):
  - Work ONLY in this tab for temp-mail actions
  - DO NOT close this tab under any circumstances
  - You may refresh or navigate within temp-mail.org, but keep this tab focused on inbox

STEP-BY-STEP WORKFLOW:
  1. Navigate to https://temp-mail.org/en/
  2. WAIT 10 seconds after page loads (email appears with delay)
  3. Call extract_email_from_page() to get the email from HTML
  4. As soon as you have the email, return it in text and STOP

ANTI-LOOP RULES:
  - Max 3 attempts
  - If function returns error ‚Üí WAIT 5s and retry

SUCCESS CHECK:
  ‚úÖ Contains '@' and a domain
"""

    model_name = "gemini-2.5-computer-use-preview-10-2025"
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    history = []
    screenshot_bytes = await safe_screenshot(page, full_page=False, timeout_ms=10000)
    parts = [Part(text=task)]
    if screenshot_bytes:
        parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
    history.append(Content(role="user", parts=parts))

    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (email extraction, unified) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

    extracted_email = None

    for step in range(1, max_steps + 1):
        print(f"\n{'=' * 70}")
        print(f"üîÑ –®–ê–ì {step}/{max_steps} (email)")
        print("=" * 70)
        print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")

        response = await asyncio.to_thread(
            client.models.generate_content,
            model=model_name,
            contents=history,
            config=config
        )
        if response is None or not getattr(response, 'candidates', None):
            print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (email), –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ 2—Å...")
            await asyncio.sleep(2)
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            if response is None or not getattr(response, 'candidates', None):
                print("‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ (email)")
                break

        candidate = response.candidates[0]
        model_content = candidate.content

        # –ü–µ—á–∞—Ç—å –º—ã—Å–ª–µ–π –º–æ–¥–µ–ª–∏
        for part in model_content.parts:
            if hasattr(part, 'text') and part.text:
                print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:\n   {part.text[:300]}...")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        tool_responses = []
        for part in model_content.parts:
            if hasattr(part, 'function_call') and part.function_call:
                fc = part.function_call
                result = await execute_computer_use_action(page, fc, SCREEN_WIDTH, SCREEN_HEIGHT)
                # Cloudflare –¥–µ—Ç–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —à–∞–≥–∞ email
                # Cloudflare check –æ—Ç–∫–ª—é—á–µ–Ω
                if fc.name == "extract_email_from_page" and result.get("success"):
                    extracted_email = result.get("email")
                    print(f"\n‚úÖ EMAIL –ü–û–õ–£–ß–ï–ù (unified): {extracted_email}")
                tool_responses.append(
                    Part(function_response=FunctionResponse(name=fc.name, response=result))
                )

        history.append(model_content)

        if tool_responses:
            screenshot_bytes = await safe_screenshot(page, full_page=False, timeout_ms=10000)
            parts = tool_responses.copy()
            if screenshot_bytes:
                parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
            history.append(Content(role="user", parts=parts))

        if extracted_email:
            return extracted_email

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å email –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if all(not getattr(p, 'function_call', None) for p in model_content.parts):
            for p in model_content.parts:
                if hasattr(p, 'text') and p.text:
                    maybe_email = extract_email_from_text(p.text)
                    if maybe_email:
                        print(f"\n‚úÖ EMAIL –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ (unified): {maybe_email}")
                        return maybe_email
            break

    return None


async def run_airtable_registration_on_pages(email: str, user_data: dict, page_mail, page_airtable, client, config, max_steps: int = 40) -> dict:
    """
    –®–ê–ì 2 (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable –Ω–∞ –û–¢–î–ï–õ–¨–ù–û–ô –≤–∫–ª–∞–¥–∫–µ, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—á—Ç—É –æ—Ç–∫—Ä—ã—Ç–æ–π.

    –ü—Ä–∞–≤–∏–ª–æ: –≤–∫–ª–∞–¥–∫–∞ —Å temp-mail (page_mail) –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –Ω–µ —Ç–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –§—É–Ω–∫—Ü–∏—é extract_verification_link() –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ—á—Ç—ã, –∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ verify URL ‚Äî –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Airtable.
    
    Args:
        email: Email –∞–¥—Ä–µ—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        user_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (name, password, birthdate)
        page_mail: Playwright page –æ–±—ä–µ–∫—Ç –¥–ª—è temp-mail
        page_airtable: Playwright page –æ–±—ä–µ–∫—Ç –¥–ª—è Airtable
        client: Google AI client
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    """
    full_name = user_data.get('name', 'John Smith')
    password = user_data.get('password', 'SecurePass2024!')
    
    task = f"""
MISSION: Register on Airtable and confirm email (Two-tab workflow)

YOUR EMAIL: {email}
YOUR FULL NAME: {full_name}
YOUR PASSWORD: {password}
REGISTRATION URL: https://airtable.com/invite/r/LzgpVACU

YOU HAVE TWO BROWSER TABS AVAILABLE:
  1. Airtable tab (currently active) - for registration
  2. Temp-mail tab (already open) - for checking verification email

AVAILABLE TAB SWITCHING FUNCTIONS:
  - switch_to_mail_tab() - switches to temp-mail inbox
  - switch_to_airtable_tab() - switches to Airtable registration page

CRITICAL WORKFLOW (MUST COMPLETE ALL STEPS):
  1) [AIRTABLE TAB - already active] Navigate to https://airtable.com/invite/r/LzgpVACU and complete signup:
     - Email: {email}
     - Full Name: {full_name}
     - Password: {password}
     - Click "Create account" button ONCE
     - Wait 10 seconds to see if URL changes from /invite/

  2) [SWITCH TO MAIL TAB] Use switch_to_mail_tab() to view the inbox
     - Wait up to 30 seconds for Airtable email (subject: "Please confirm your email")
     - If email not visible, wait and refresh
     - Click on the email to open it
     - ‚ö†Ô∏è If click fails with timeout - TRY AGAIN! Wait 3 seconds and retry
     - ‚ö†Ô∏è If screenshot fails - CONTINUE ANYWAY! Try next action

  3) [MAIL TAB] Call extract_verification_link() to get the verification URL from email content
     - This will return the full https://airtable.com/auth/verifyEmail/... URL
     - If extraction fails - try clicking email again and retry

  4) [SWITCH TO AIRTABLE TAB] Use switch_to_airtable_tab() to go back
     - Navigate to the verification URL using navigate(url=...)
     - ‚ö†Ô∏è IMPORTANT: After navigation to verification URL, system will AUTO-WAIT 10 seconds
     - Email verification happens AUTOMATICALLY - just wait, don't look for confirmation
     - After 10 seconds, onboarding questions will appear automatically
     - You can then say task complete - onboarding will be handled separately

CRITICAL SUCCESS CRITERIA (DO NOT STOP UNTIL ALL ARE MET):
  ‚úÖ MUST: Email verification link extracted from mail
  ‚úÖ MUST: Navigated to verification URL on Airtable tab
  ‚úÖ AFTER navigation to verification URL - task is COMPLETE (10 sec auto-wait will happen)
  ‚ùå You DON'T need to confirm verification manually - it's automatic
  ‚ùå You DON'T need to handle onboarding questions - separate process will do it

HANDLING ERRORS - VERY IMPORTANT:
  ‚ö†Ô∏è If action fails with timeout - RETRY at least 2-3 times
  ‚ö†Ô∏è If screenshot fails - IGNORE and continue with next action
  ‚ö†Ô∏è If click doesn't work - try clicking slightly different coordinates
  ‚ö†Ô∏è If page doesn't load - wait 5 seconds and try again
  ‚ùå NEVER say "task complete" unless ALL critical steps are verified
  ‚ùå NEVER stop if verification link not extracted yet
  ‚ùå NEVER stop if email not confirmed yet

IMPORTANT RULES:
  - ALWAYS use switch_to_mail_tab() BEFORE clicking on emails or calling extract_verification_link()
  - ALWAYS use switch_to_airtable_tab() BEFORE navigating to Airtable pages
  - The mail tab must stay open throughout the entire process
  - After switching tabs, ALL subsequent actions happen on that tab until you switch again
  - BE PERSISTENT - retry failed actions, don't give up after first error
"""

    model_name = "gemini-2.5-computer-use-preview-10-2025"
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    history = []
    screenshot_bytes = await safe_screenshot(page_airtable, full_page=False, timeout_ms=10000)
    parts = [Part(text=task)]
    if screenshot_bytes:
        parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
    history.append(Content(role="user", parts=parts))

    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (airtable registration, unified) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

    result = {
        "status": "unknown",
        "email": email,
        "confirmed": False,
        "notes": "",
        "verification_link_extracted": False,
        "navigated_to_verification": False
    }

    final_text = ""
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    # –ù–∞—á–∏–Ω–∞–µ–º —Å Airtable, —Ç.–∫. —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    current_active_page = page_airtable

    for step in range(1, max_steps + 1):
        print(f"\n{'=' * 70}")
        print(f"üîÑ –®–ê–ì {step}/{max_steps} (registration)")
        print("=" * 70)
        print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")

        response = await asyncio.to_thread(
            client.models.generate_content,
            model=model_name,
            contents=history,
            config=config
        )
        if response is None or not getattr(response, 'candidates', None):
            print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏, –∂–¥—É 2—Å –∏ –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
            await asyncio.sleep(2)
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            if response is None or not getattr(response, 'candidates', None):
                print("‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–µ—Ä—ã–≤–∞—é.")
                result["status"] = "failed"
                result["notes"] = "Model returned empty response"
                break

        candidate = response.candidates[0]
        model_content = candidate.content

        has_tool_calls = any(hasattr(p, 'function_call') and p.function_call for p in model_content.parts)

        # –ü–µ—á–∞—Ç—å –º—ã—Å–ª–µ–π –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for part in model_content.parts:
            if hasattr(part, 'text') and part.text:
                print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:\n   {part.text[:400]}...")
                final_text += part.text + "\n"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: switch_to_* –º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ç–µ–∫—É—â–µ–π
        # current_active_page —Ö—Ä–∞–Ω–∏—Ç—Å—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ —Ü–∏–∫–ª–∞)
        tool_responses = []
        
        for part in model_content.parts:
            if hasattr(part, 'function_call') and part.function_call:
                fc = part.function_call
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ switch_to_* —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—è–µ—Ç current_active_page
                if fc.name == "switch_to_mail_tab":
                    exec_result = await execute_computer_use_action(
                        page_mail, fc, SCREEN_WIDTH, SCREEN_HEIGHT, 
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    current_active_page = page_mail  # –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—á—Ç–∞
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                elif fc.name == "switch_to_airtable_tab":
                    exec_result = await execute_computer_use_action(
                        page_airtable, fc, SCREEN_WIDTH, SCREEN_HEIGHT, 
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    current_active_page = page_airtable  # –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω Airtable
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                elif fc.name == "extract_verification_link":
                    # –Ø–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
                    await page_mail.bring_to_front()
                    current_active_page = page_mail
                    exec_result = await execute_computer_use_action(
                        page_mail, fc, SCREEN_WIDTH, SCREEN_HEIGHT,
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞
                    if exec_result.get("success") and exec_result.get("url"):
                        result["verification_link_extracted"] = True
                        print(f"  ‚úÖ –°—Å—ã–ª–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∞: {exec_result.get('url')[:50]}...")
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                elif fc.name == "navigate":
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    exec_result = await execute_computer_use_action(
                        current_active_page, fc, SCREEN_WIDTH, SCREEN_HEIGHT,
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –æ—Ç–º–µ—á–∞–µ–º –∏ –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
                    if result["verification_link_extracted"] and exec_result.get("success"):
                        url = fc.args.get("url", "")
                        if "verifyEmail" in url or "verify" in url.lower():
                            result["navigated_to_verification"] = True
                            print("  ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            print("  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è + –∑–∞–≥—Ä—É–∑–∫–∞ onboarding)...")
                            await asyncio.sleep(10)
                            print("  ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤–æ –∫ onboarding")
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º
                            result["confirmed"] = True
                    
                else:
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                    exec_result = await execute_computer_use_action(
                        current_active_page, fc, SCREEN_WIDTH, SCREEN_HEIGHT,
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))

        history.append(model_content)

        if tool_responses:
            # –í–ê–ñ–ù–û: –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏ Computer Use API –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫—É—é –≤–∫–ª–∞–¥–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∏—Ç—å. –ù—É–∂–Ω–æ –í–†–£–ß–ù–£–Æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏!
            
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ current_active_page –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
            await current_active_page.bring_to_front()
            await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            
            screenshot_bytes = await safe_screenshot(current_active_page, full_page=False, timeout_ms=10000)
            parts = tool_responses.copy()
            if screenshot_bytes:
                parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
            else:
                print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏!")
            history.append(Content(role="user", parts=parts))

        # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
        lower = final_text.lower()
        if "registration successful" in lower or "account created" in lower:
            result["status"] = "success"
        if "email confirmed" in lower or "email verified" in lower or "verification successful" in lower:
            result["confirmed"] = True
        if "failed" in lower or "error" in lower:
            result["status"] = "failed"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ—à–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if "navigate" in [p.function_call.name for p in model_content.parts if hasattr(p, 'function_call') and p.function_call]:
            if result["verification_link_extracted"]:
                result["navigated_to_verification"] = True
                print("  ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏
        if not has_tool_calls and final_text.strip():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            critical_steps_completed = (
                result["verification_link_extracted"] and 
                result["navigated_to_verification"]
            )
            
            if critical_steps_completed:
                print("\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê (unified) - –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                result["notes"] = final_text[:400]
                break
            else:
                # –ú–æ–¥–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è, –Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                missing_steps = []
                if not result["verification_link_extracted"]:
                    missing_steps.append("–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                if not result["navigated_to_verification"]:
                    missing_steps.append("–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                
                print(f"\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è, –Ω–æ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {', '.join(missing_steps)}")
                print(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ... (—à–∞–≥ {step}/{max_steps})")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                reminder = f"""
‚ö†Ô∏è CRITICAL REMINDER: Task is NOT complete yet!

Missing steps:
{chr(10).join(f'  ‚ùå {step}' for step in missing_steps)}

You MUST complete these steps:
1. Switch to mail tab (switch_to_mail_tab)
2. Click on the Airtable verification email
3. Extract verification link (extract_verification_link)
4. Switch to Airtable tab (switch_to_airtable_tab)
5. Navigate to the verification URL (navigate)

After step 5, the system will AUTO-WAIT 10 seconds and task will be complete.

DO NOT SAY "task complete" until you've done navigate() to the verification URL!
Continue with the next action now.
"""
                history.append(Content(role="user", parts=[Part(text=reminder)]))
                continue

    # –°–∫—Ä–∏–Ω—à–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Airtable
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    screenshot_path = Path("logs") / f"airtable_registration_unified_{timestamp}.png"
    screenshot_path.parent.mkdir(exist_ok=True)
    try:
        img = await safe_screenshot(page_airtable, full_page=True, timeout_ms=15000)
        with open(screenshot_path, 'wb') as f:
            f.write(img)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (unified): {e}")
    print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (unified): {screenshot_path}")

    return result


async def run_airtable_onboarding(page_airtable, client, config, max_steps: int = 10) -> dict:
    """
    –®–ê–ì 3 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π): –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ onboarding –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Airtable.
    
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email, Airtable –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:
    - –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω Airtable (—Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    - –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    - –¢–∏–ø —Ç–∞–±–ª–∏—Ü –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã
    - –®–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±–∞–∑—ã
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    - Tutorial/tour –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    - –ò –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    Args:
        page_airtable: Playwright page –æ–±—ä–µ–∫—Ç –¥–ª—è Airtable
        client: Google AI client
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ onboarding)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {status, completed_steps, notes}
    """
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è onboarding
    import random
    
    use_cases = [
        "Project Management", "Content Planning", "Product Development", 
        "Event Planning", "CRM", "Inventory Tracking", "Task Management",
        "Marketing Campaigns", "Product Roadmap", "Team Collaboration"
    ]
    
    team_sizes = ["Just me", "2-10 people", "11-50 people", "51-200 people"]
    
    roles = [
        "Product Manager", "Developer", "Marketing", "Designer", "Operations",
        "Sales", "HR", "Finance", "Customer Success", "Founder", "Consultant"
    ]
    
    companies = [
        "TechCorp", "InnovateLab", "Digital Solutions", "Creative Studio",
        "StartupHub", "DataWorks", "CloudTech", "AppFactory", "WebStudio",
        "SoftwarePro", "DevTeam", "AgileWorks", "SmartSystems"
    ]
    
    industries = [
        "Technology", "Marketing", "Healthcare", "Finance", "Education",
        "E-commerce", "Media", "Real Estate", "Consulting", "Manufacturing"
    ]
    
    teams = [
        "Engineering", "Marketing", "Product", "Design", "Operations",
        "Sales", "Support", "HR", "Finance", "Research"
    ]
    
    workspace_names = [
        "My Workspace", "Project Hub", "Team Base", "Work Central",
        "Productivity Hub", "Task Center", "Collaboration Space", "Main Workspace"
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    random_use_case = random.choice(use_cases)
    random_team_size = random.choice(team_sizes)
    random_role = random.choice(roles)
    random_company = random.choice(companies)
    random_industry = random.choice(industries)
    random_team = random.choice(teams)
    random_workspace = random.choice(workspace_names)
    
    print(f"  üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è onboarding:")
    print(f"     - Use case: {random_use_case}")
    print(f"     - Company: {random_company}")
    print(f"     - Industry: {random_industry}")
    print(f"     - Team: {random_team}")
    print(f"     - Team size: {random_team_size}")
    print(f"     - Role: {random_role}")
    print(f"     - Workspace: {random_workspace}")
    
    task = f"""
MISSION: Complete FULL Airtable onboarding setup (up to 10 steps)

CONTEXT: You have successfully registered and verified email on Airtable.
Now you need to complete the ENTIRE initial setup wizard/onboarding process.

YOUR TASK:
  Go through ALL onboarding questions and complete ALL setup steps until you reach the main workspace.

TYPICAL AIRTABLE ONBOARDING FLOW (complete ALL steps):
  
  1Ô∏è‚É£ "What will you use Airtable for?" / "How do you plan to use Airtable?"
     ‚Üí Answer: "{random_use_case}"
  
  2Ô∏è‚É£ "First, where do you work?" / "Company name?"
     ‚Üí Answer: "{random_company}"
  
  3Ô∏è‚É£ "What industry is your company in?"
     ‚Üí Answer: "{random_industry}"
  
  4Ô∏è‚É£ "Which team are you on?" / "What team?"
     ‚Üí Answer: "{random_team}"
  
  5Ô∏è‚É£ "How big is your team?" / "Team size?"
     ‚Üí Answer: "{random_team_size}"
  
  6Ô∏è‚É£ "What role best describes you?"
     ‚Üí Answer: "{random_role}"
  
  7Ô∏è‚É£ "Would you like to start with a template?"
     ‚Üí Select "Start from scratch" or choose any template
  
  8Ô∏è‚É£ "Create your first base" / "Name your workspace"
     ‚Üí Answer: "{random_workspace}"
  
  9Ô∏è‚É£ "Add tables to your base"
     ‚Üí Create or confirm table names (use default or type: "Tasks", "Projects")
  
  üîü "Add fields to your table"
     ‚Üí Add or confirm field types (use defaults or add: Text, Number, Date, etc.)
  
  1Ô∏è‚É£1Ô∏è‚É£ Tutorial/Tour prompts ("Let's show you around", "Take a tour")
     ‚Üí Complete the tour OR click "Skip tour" to skip it
  
  1Ô∏è‚É£2Ô∏è‚É£ "Invite team members" / "Share your workspace"
     ‚Üí Click "Skip" or "Maybe later" to skip invitations
  
  1Ô∏è‚É£3Ô∏è‚É£ Additional setup steps
     ‚Üí Complete any remaining prompts until you reach the main workspace

IMPORTANT RULES:
  ‚úì Complete ALL steps - don't stop early!
  ‚úì Use the EXACT values specified above (in curly braces) for each question
  ‚úì Type or select the specified answers - don't make up different values
  ‚úì If you need to type text, use the exact value shown (e.g., "{random_company}", "{random_workspace}")
  ‚úì If you need to select from options, choose the closest match to the specified value
  ‚úì Click "Next", "Continue", "Get Started", "Skip" buttons to progress
  ‚úì If you see "Skip tour" or "Skip tutorial" - you can skip it to save time
  ‚úì Goal is to reach the main Airtable workspace/dashboard WITH a created base
  ‚úì Complete up to 10 steps total to ensure FULL onboarding is done
  ‚úì STOP ONLY when you see the main workspace with your created base/table visible

SUCCESS INDICATORS (when to stop):
  ‚úÖ You see main Airtable interface with your created workspace/base
  ‚úÖ URL contains "/workspace" or shows base/table view (e.g., /tblXXXX)
  ‚úÖ Onboarding wizard is no longer visible - no more setup questions
  ‚úÖ You can see your base name and table(s) you created
  ‚úÖ You can see navigation menu, workspace name, "Create" buttons, table grid
  ‚úÖ Page looks like a functional Airtable workspace, not a setup wizard

REMEMBER: Complete ALL onboarding steps - up to 10 total!
Be thorough but efficient. The goal is a FULLY configured workspace.
"""

    model_name = "gemini-2.5-computer-use-preview-10-2025"
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    history = [Content(role="user", parts=[Part(text=task)])]

    print("\nüí¨ –ü—Ä–æ–º–ø—Ç onboarding –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

    result = {
        "status": "unknown",
        "completed_steps": 0,
        "notes": ""
    }

    for step in range(1, max_steps + 1):
        print(f"\n{'=' * 70}")
        print(f"üîÑ –®–ê–ì ONBOARDING {step}/{max_steps}")
        print(f"{'=' * 70}")

        # –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        screenshot_bytes = await safe_screenshot(page_airtable, full_page=False, timeout_ms=10000)
        if screenshot_bytes:
            history.append(Content(role="user", parts=[
                Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
            ]))

        print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç onboarding...")
        response = await asyncio.to_thread(
            client.models.generate_content,
            model=model_name,
            contents=history,
            config=config
        )

        if response is None or not getattr(response, 'candidates', None):
            print("‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (onboarding)")
            break

        candidate = response.candidates[0]
        model_content = candidate.content

        # –ü–µ—á–∞—Ç—å –º—ã—Å–ª–µ–π –º–æ–¥–µ–ª–∏
        has_text = False
        has_tool_calls = False
        final_text = ""

        for part in model_content.parts:
            if hasattr(part, 'text') and part.text:
                has_text = True
                final_text += part.text + " "
                print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏ (onboarding):\n   {part.text[:300]}...")
            if hasattr(part, 'function_call') and part.function_call:
                has_tool_calls = True

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        tool_responses = []
        for part in model_content.parts:
            if hasattr(part, 'function_call') and part.function_call:
                fc = part.function_call
                print(f"  üîß –î–µ–π—Å—Ç–≤–∏–µ: {fc.name}")
                exec_result = await execute_computer_use_action(
                    page_airtable, fc, SCREEN_WIDTH, SCREEN_HEIGHT
                )
                tool_responses.append(
                    Part(function_response=FunctionResponse(name=fc.name, response=exec_result))
                )
                result["completed_steps"] += 1

        history.append(model_content)

        if tool_responses:
            screenshot_bytes = await safe_screenshot(page_airtable, full_page=False, timeout_ms=10000)
            parts = tool_responses.copy()
            if screenshot_bytes:
                parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
            history.append(Content(role="user", parts=parts))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        lower = final_text.lower()
        if any(keyword in lower for keyword in ["workspace", "main interface", "setup complete", "onboarding complete", "dashboard"]):
            result["status"] = "success"
            result["notes"] = "Onboarding completed successfully"
            print("\n‚úÖ ONBOARDING –ó–ê–í–ï–†–®–Å–ù")
            break

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
        if not has_tool_calls and has_text:
            result["status"] = "completed"
            result["notes"] = final_text[:300]
            print("\n‚úÖ Onboarding –∑–∞–≤–µ—Ä—à—ë–Ω (–º–æ–¥–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å)")
            break

    return result


async def main_airtable_registration_unified():
    """
    –ï–î–ò–ù–´–ô –ü–û–¢–û–ö: –æ–¥–∏–Ω –±—Ä–∞—É–∑–µ—Ä, –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏ (temp-mail + Airtable).
    –ü–æ—á—Ç–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–π –∂–µ.
    """
    print("=" * 70)
    print("üöÄ –ê–í–¢–û-–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE (–µ–¥–∏–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä, 2 –≤–∫–ª–∞–¥–∫–∏)")
    print("=" * 70)
    print("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ airtable.com –∏ temp-mail.org")
    
    # –°—Ç–∞—Ä—Ç —Å–∞–º–æ–æ–±—É—á–∞—é—â–µ–≥–æ—Å—è ¬´–∑–∞–±–µ–≥–∞¬ª (run)
    try:
        LEARN.start_run(phase="unified", email=None, extra={"script": "test_agent3_air"})
    except Exception:
        pass

    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    client = genai.Client(api_key=api_key)
    config = GenerateContentConfig(
        tools=[
            Tool(computer_use=ComputerUse(environment=genai.types.Environment.ENVIRONMENT_BROWSER)),
            Tool(function_declarations=get_custom_function_declarations())
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )

    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    # –û–¥–∏–Ω –±—Ä–∞—É–∑–µ—Ä, –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–ï–ó persistent (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏).
    # –í–∫–ª—é—á–∏—Ç—å persistent –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è AS_USE_PERSISTENT=1
    playwright = await async_playwright().start()
    use_persistent = os.getenv('AS_USE_PERSISTENT', '0') == '1'
    if use_persistent:
        user_data_dir = os.getenv("PLAYWRIGHT_USER_DATA_DIR") or os.getenv("BROWSER_USE_USER_DATA_DIR")
        if not user_data_dir:
            user_data_dir = str(Path.cwd() / "profiles" / "unified_default")
        Path(user_data_dir).mkdir(parents=True, exist_ok=True)
        print(f"üóÇÔ∏è  –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (persistent): {user_data_dir}")
        context = await playwright.chromium.launch_persistent_context(
            user_data_dir=user_data_dir,
            headless=False,
            viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            extra_http_headers={
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Cache-Control': 'max-age=0',
            },
            args=['--start-maximized', '--disable-blink-features=AutomationControlled']
        )
    else:
        print("üóÇÔ∏è  –†–µ–∂–∏–º –±–µ–∑ persistent –ø—Ä–æ—Ñ–∏–ª—è (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–∞—Ö)")
        browser = await playwright.chromium.launch(
            headless=False,
            args=['--start-maximized', '--disable-blink-features=AutomationControlled']
        )
        context = await browser.new_context(
            viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            extra_http_headers={
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Cache-Control': 'max-age=0',
            },
        )

    # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    if stealth_async:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í playwright-stealth 2.0.0 –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç context
        await stealth_async(context)
        print("üïµÔ∏è Stealth mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–æ–±—Ö–æ–¥ Cloudflare –∏ bot-detection)")
    else:
        print("‚ö†Ô∏è  Stealth mode –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (playwright_stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright-stealth")
    
    # üé≠ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Sec-Fetch-* headers (–∫–∞–∫ –≤ working test)
    await context.set_extra_http_headers({
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
    })
    print("üé≠ Sec-Fetch-* headers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ working test)")

    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏: –°–¢–ê–†–¢–£–ï–ú –° –û–î–ù–û–ô (–ø–æ—á—Ç–∞), –≤—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–¥–∏–º –ü–û–¢–û–ú ===
    # –í persistent-–ø—Ä–æ—Ñ–∏–ª–µ Chromium –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ about:blank
    # –ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ 1 –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—É—é –≤–∫–ª–∞–¥–∫—É
    existing = list(context.pages)
    print(f"üß≠ –í–∫–ª–∞–¥–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞: {len(existing)} ‚Üí –∑–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –∏ —Å–æ–∑–¥–∞—é 1 (–ø–æ—á—Ç–∞)")
    for p in existing:
        try:
            await p.close()
        except Exception:
            pass

    # –°–æ–∑–¥–∞—ë–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É: –¥–ª—è –ø–æ—á—Ç—ã (temp-mail)
    page_mail = await context.new_page()
    if page_mail.url == "" or not page_mail.url:
        await page_mail.goto("about:blank")
    print(f"üìÑ –¢–µ–∫—É—â–∏—Ö –≤–∫–ª–∞–¥–æ–∫: {len(context.pages)} (—Ç–æ–ª—å–∫–æ mail)")

    try:
        # –®–ê–ì 1: –ø–æ–ª—É—á–∞–µ–º email –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ—á—Ç—ã (–≤–∫–ª–∞–¥–∫–∞ –ø–æ—á—Ç—ã –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π)
        print("\nüìß –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email (–≤–∫–ª–∞–¥–∫–∞ –ø–æ—á—Ç—ã –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π)...")
        email = await run_email_extraction_on_page(page_mail, client, config, max_steps=15)

        if not email:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email")
            save_registration_result(email="None", status="failed", confirmed=False, notes="Failed to get temporary email (unified)")
            return

        print(f"\n‚úÖ Email –ø–æ–ª—É—á–µ–Ω: {email}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüé≤ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_data = await get_random_user_data()

        # –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ–¥ Airtable
        page_airtable = await context.new_page()
        if page_airtable.url == "" or not page_airtable.url:
            await page_airtable.goto("about:blank")
        print(f"ü™ü –û—Ç–∫—Ä—ã—Ç–∞ –≤—Ç–æ—Ä–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è Airtable. –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(context.pages)}")

        # –®–ê–ì 2: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –≤–∫–ª–∞–¥–æ–∫
        print("\nüìù –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable (–ø–æ—á—Ç–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è)...")
        result = await run_airtable_registration_on_pages(email, user_data, page_mail, page_airtable, client, config, max_steps=40)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        save_registration_result(
            email=result.get("email", email),
            status=result.get("status", "unknown"),
            confirmed=result.get("confirmed", False),
            notes=result.get("notes", "")
        )

        # –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥
        print("\n" + "=" * 70)
        print("‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (unified) –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 70)
        print(f"üìß Email: {result.get('email', email)}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result.get('confirmed', False)}")
        if result.get('notes'):
            print(f"üìù –ó–∞–º–µ—Ç–∫–∏: {result['notes'][:200]}")

        # –®–ê–ì 3: Onboarding - –ø—Ä–æ—Ö–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if result.get('status') in ['success', 'unknown'] and result.get('confirmed', False):
            print("\n" + "=" * 70)
            print("üéØ –®–ê–ì 3: –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ onboarding (–¥–æ 10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤)")
            print("=" * 70)
            print("üí° –¶–µ–ª—å: –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã Airtable –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
            
            onboarding_result = await run_airtable_onboarding(page_airtable, client, config, max_steps=10)
            
            print("\n" + "=" * 70)
            print("‚úÖ ONBOARDING –ó–ê–í–ï–†–®–Å–ù")
            print("=" * 70)
            print(f"üìä –°—Ç–∞—Ç—É—Å: {onboarding_result.get('status', 'unknown')}")
            print(f"üî¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {onboarding_result.get('completed_steps', 0)}")
            if onboarding_result.get('notes'):
                print(f"üìù –ó–∞–º–µ—Ç–∫–∏: {onboarding_result['notes'][:200]}")
        else:
            print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º onboarding - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –í–∫–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã 30 —Å–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(30)

    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        print("\nüßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä (unified, persistent context)...")
        await context.close()
        await playwright.stop()

    return


async def main_airtable_registration():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Airtable
    """
    print("=" * 70)
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE")
    print("=" * 70)
    
    try:
        # –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ email
        print("\nüìß –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email...")
        email = await run_email_extraction(max_steps=15)
        
        if not email:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email")
            save_registration_result(
                email="None",
                status="failed",
                confirmed=False,
                notes="Failed to get temporary email"
            )
            return
        
        print(f"\n‚úÖ Email –ø–æ–ª—É—á–µ–Ω: {email}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
        print("\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...")
        await asyncio.sleep(5)
        
        # –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        print("\nüìù –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable...")
        result = await run_airtable_registration(email, max_steps=35)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        save_registration_result(
            email=result["email"],
            status=result["status"],
            confirmed=result["confirmed"],
            notes=result["notes"]
        )
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 70)
        print("‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 70)
        print(f"üìß Email: {result['email']}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result['confirmed']}")
        if result['notes']:
            print(f"üìù –ó–∞–º–µ—Ç–∫–∏: {result['notes'][:200]}")
        print("=" * 70)
        
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


# ==================== –ó–ê–ü–£–°–ö ====================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–µ–º–æ —Å Yandex"""
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    task = """
–û—Ç–∫—Ä–æ–π —Å–∞–π—Ç yandex.ru –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é.
–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å –∫—É—Ä—Å, —Å–æ–æ–±—â–∏ –º–Ω–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
"""
    
    await run_computer_use_agent(task, max_steps=15)


if __name__ == "__main__":
    import sys
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: –¥–µ–º–æ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Airtable
    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        print("üéØ –†–µ–∂–∏–º: –î–µ–º–æ (–æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –¥–æ–º–µ–Ω—ã)")
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        except RuntimeError as e:
            if "Event loop is closed" not in str(e):
                raise
    else:
        print("üéØ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ airtable.com –∏ temp-mail.org")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –¥–≤—É–º—è –≤–∫–ª–∞–¥–∫–∞–º–∏, —á—Ç–æ–±—ã –ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ—á—Ç—É
            asyncio.run(main_airtable_registration_unified())
        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        except RuntimeError as e:
            if "Event loop is closed" not in str(e):
                raise