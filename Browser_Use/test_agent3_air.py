"""
–†–ê–ë–û–¢–ê–ï–¢!!!!!!!
üéØ –¢–µ—Å—Ç gemini-2.5-computer-use-preview-10-2025 —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SDK google.genai
–ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è browser-use Agent - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ API –∏ Playwright.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç Playwright –±—Ä–∞—É–∑–µ—Ä
2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Computer Use –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ google.genai.Client
3. –ú–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ tool_calls
4. –¶–∏–∫–ª: —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí –º–æ–¥–µ–ª—å ‚Üí tool_call ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç

–ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø AIRTABLE REGISTRATION:
- –î–æ–±–∞–≤–ª–µ–Ω—ã custom functions –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
- –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ email + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import os
import json
import asyncio
import base64
import re
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from typing import Optional
from urllib.parse import urlparse

# –ù–æ–≤—ã–π SDK Google Generative AI (unified SDK)
from google import genai
from google.genai.types import (
    Tool, ComputerUse, 
    GenerateContentConfig,
    Content, Part, Blob,
    FunctionCall, FunctionResponse,
    FunctionDeclaration
)

# Playwright –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º
from playwright.async_api import async_playwright

# Stealth –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
try:
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í playwright-stealth 2.0.0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å Stealth
    from playwright_stealth import Stealth
    stealth_instance = Stealth()
    stealth_async = stealth_instance.apply_stealth_async
    print("‚úÖ Playwright Stealth 2.0.0 –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    # Fallback –µ—Å–ª–∏ stealth –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    stealth_async = None
    print(f"‚ö†Ô∏è  Playwright Stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∂–µ—Å—Ç–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
ALLOWED_DOMAINS = (
    "airtable.com",
    "temp-mail.org",
)

def is_allowed_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.
    –†–∞–∑—Ä–µ—à–µ–Ω—ã:
      - about:* (about:blank –∏ —Ç.–ø.)
      - –õ—é–±—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã airtable.com
      - –õ—é–±—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã temp-mail.org
    """
    if not url:
        return False
    try:
        if url.startswith("about:"):
            return True
        parsed = urlparse(url)
        host = (parsed.hostname or "").lower()
        if not host:
            return False
        for d in ALLOWED_DOMAINS:
            d = d.lower()
            if host == d or host.endswith("." + d):
                return True
        return False
    except Exception:
        return False

def extract_email_from_text(text: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏.
    
    –ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
    - xxx@domain.com
    - Email: xxx@domain.com
    - "email": "xxx@domain.com"
    """
    if not text:
        return None
    
    # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è email
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    matches = re.findall(email_pattern, text)
    
    if matches:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π email
        return matches[0]
    
    return None


async def safe_screenshot(page, full_page: bool = False, timeout_ms: int = 10000) -> Optional[bytes]:
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –Ω–∞–¥—ë–∂–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ 1x1 PNG,
    —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤/—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
    """
    try:
        return await page.screenshot(type="png", full_page=full_page, timeout=timeout_ms)
    except Exception as e:
        print(f"‚ö†Ô∏è Screenshot failed: {e}. Skipping image for this turn.")
        return None


async def detect_cloudflare_block(page) -> tuple[bool, str]:
    """NO-OP: Cloudflare detection disabled by request."""
    return False, ""


def log_cloudflare_event(phase: str, step: int, action: str, url: str, signal: str):
    """NO-OP logger: disabled."""
    return


def save_registration_result(email: str, status: str, confirmed: bool, notes: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª —Å timestamp.
    
    Args:
        email: Email –∞–¥—Ä–µ—Å
        status: –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (success/partial/failed)
        confirmed: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞
        notes: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"airtable_registration_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE ===\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Email: {email}\n")
        f.write(f"–°—Ç–∞—Ç—É—Å: {status}\n")
        f.write(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}\n")
        if notes:
            f.write(f"–ó–∞–º–µ—Ç–∫–∏: {notes}\n")
        f.write("=" * 50 + "\n")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")


async def extract_verification_link_from_page(page) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç verification link –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã temp-mail.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤:
    1. –ü–æ–∏—Å–∫ –≤ HTML –ø–æ regex
    2. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    3. JavaScript evaluation
    
    Args:
        page: Playwright Page –æ–±—ä–µ–∫—Ç
    
    Returns:
        URL verification —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        # –ú–µ—Ç–æ–¥ 1: Regex –ø–æ–∏—Å–∫ –≤ HTML
        html = await page.content()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Airtable verification URL
        patterns = [
            r'https://airtable\.com/auth/verifyEmail/[^\s"<>\']+',
            r'https://airtable\.com/verify[^\s"<>\']+',
            r'https://[^/]*airtable\.com/[^\s"<>\']*verify[^\s"<>\']*',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, html)
            if match:
                url = match.group(0)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL —á–µ—Ä–µ–∑ regex: {url}")
                return url
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ —Å airtable.com/auth
        try:
            links = await page.evaluate('''() => {
                return Array.from(document.querySelectorAll('a'))
                    .map(a => a.href)
                    .filter(href => href && (
                        href.includes('airtable.com/auth') || 
                        href.includes('verifyEmail') ||
                        href.includes('airtable.com/verify')
                    ));
            }''')
            
            if links and len(links) > 0:
                url = links[0]
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL —á–µ—Ä–µ–∑ JavaScript: {url}")
                return url
        except Exception as e:
            print(f"  ‚ö†Ô∏è  JavaScript –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        try:
            link = await page.query_selector('a[href*="verifyEmail"]')
            if link:
                url = await link.get_attribute('href')
                if url:
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {url}")
                    return url
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Selector –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

        # –ú–µ—Ç–æ–¥ 4: –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ –æ—Ç Airtable –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        try:
            print("  üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ –æ—Ç Airtable –≤ —Å–ø–∏—Å–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö...")
            clicked = await page.evaluate('''() => {
                const isVisible = (el) => !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
                const nodes = Array.from(document.querySelectorAll('a, div, span, li'));
                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∏—Å—å–º–æ–º Airtable
                const candidates = nodes.filter(el => {
                    const t = (el.textContent || '').toLowerCase();
                    return isVisible(el) && (
                        t.includes('airtable') ||
                        t.includes('confirm your email') ||
                        t.includes('please confirm') ||
                        t.includes('confirm email')
                    );
                });
                for (const el of candidates) {
                    try { el.click(); return true; } catch (e) {}
                }
                return false;
            }''')
            if clicked:
                # –î–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                await asyncio.sleep(2)
                try:
                    html = await page.content()
                    for pattern in patterns:
                        match = re.search(pattern, html)
                        if match:
                            url = match.group(0)
                            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∏—Å—å–º–∞: {url}")
                            return url
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π JS-–ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
                    links = await page.evaluate('''() => {
                        return Array.from(document.querySelectorAll('a'))
                            .map(a => a.href)
                            .filter(href => href && (
                                href.includes('airtable.com/auth') || 
                                href.includes('verifyEmail') ||
                                href.includes('airtable.com/verify')
                            ));
                    }''')
                    if links and len(links) > 0:
                        url = links[0]
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {url}")
                        return url
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {e}")
            else:
                print("  ‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–∏—Å—å–º–æ Airtable –≤ —Å–ø–∏—Å–∫–µ")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ –ø–æ –ø–∏—Å—å–º—É: {e}")
        
        return "ERROR: Verification link not found on page. Make sure you opened the email."
    
    except Exception as e:
        return f"ERROR: Exception while extracting link: {str(e)}"


def get_custom_function_declarations():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ custom functions –¥–ª—è Computer Use –º–æ–¥–µ–ª–∏.
    
    Returns:
        List of FunctionDeclaration –æ–±—ä–µ–∫—Ç–æ–≤
    """
    return [
        FunctionDeclaration(
            name="switch_to_mail_tab",
            description=(
                "Switch focus to the temp-mail.org tab. "
                "Use this function when you need to interact with the email inbox "
                "(e.g., to click on an email, read messages, or extract verification links). "
                "After calling this, all subsequent actions (click, scroll, type) will be performed on the mail tab."
            ),
            parameters={
                "type": "object",
                "properties": {},
                "required": []
            }
        ),
        FunctionDeclaration(
            name="switch_to_airtable_tab",
            description=(
                "Switch focus to the Airtable registration tab. "
                "Use this function when you need to interact with Airtable.com "
                "(e.g., to fill the registration form, click buttons, navigate pages). "
                "After calling this, all subsequent actions will be performed on the Airtable tab."
            ),
            parameters={
                "type": "object",
                "properties": {},
                "required": []
            }
        ),
        FunctionDeclaration(
            name="extract_verification_link",
            description=(
                "Extracts the email verification link from the current page. "
                "Use this function when you are viewing an email on temp-mail.org "
                "that contains an Airtable verification link. "
                "IMPORTANT: You must call switch_to_mail_tab BEFORE this function "
                "to ensure you are on the correct tab. "
                "The function will parse the HTML and return the full verification URL. "
                "You should call this AFTER opening the email from Airtable."
            ),
            parameters={
                "type": "object",
                "properties": {},  # –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                "required": []
            }
        ),
        FunctionDeclaration(
            name="extract_email_from_page",
            description=(
                "Extracts the temporary email address from temp-mail.org page. "
                "Use this function when you are on https://temp-mail.org/en/ homepage "
                "and need to get the email address that is displayed in the textbox. "
                "The function will read the email from the page using JavaScript."
            ),
            parameters={
                "type": "object",
                "properties": {},
                "required": []
            }
        )
    ]


async def extract_email_from_tempmail_page(page) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∞–¥—Ä–µ—Å —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã temp-mail.org.
    
    –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: email –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫!
    
    Args:
        page: Playwright Page –æ–±—ä–µ–∫—Ç
    
    Returns:
        Email –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        # üîë –ú–ï–¢–û–î 1: –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        # Email –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–æ 15 —Å–µ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ email (–¥–æ 15 —Å–µ–∫)...")
        
        for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ √ó 0.5 —Å–µ–∫ = 15 —Å–µ–∫ –º–∞–∫—Å
            # üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ email —á–µ—Ä–µ–∑ JS
            email = await page.evaluate('''() => {
                // –°–ø–æ—Å–æ–± 1: –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ #mail
                let input = document.querySelector('#mail');
                if (input && input.value && input.value.includes('@')) {
                    return input.value;
                }
                
                // –°–ø–æ—Å–æ–± 2: –ø–æ–∏—Å–∫ –≤—Å–µ—Ö input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                let inputs = document.querySelectorAll('input');
                for (let inp of inputs) {
                    if (inp.value && inp.value.includes('@') && inp.value.includes('.')) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º placeholder'—ã
                        if (!inp.placeholder || !inp.placeholder.includes('@')) {
                            return inp.value;
                        }
                    }
                }
                
                // –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö –ø–æ –∫–ª–∞—Å—Å–∞–º
                let elements = document.querySelectorAll('[class*="mail"], [class*="email"], [id*="mail"], [id*="email"]');
                for (let el of elements) {
                    if (el.value && el.value.includes('@')) {
                        return el.value;
                    }
                    if (el.innerText && el.innerText.includes('@')) {
                        return el.innerText;
                    }
                }
                
                return null;
            }''')
            
            if email and email.strip() and '@' in email and '.' in email:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email —á–µ—Ä–µ–∑ JavaScript (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {email}")
                return email
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 2 –ø–æ–ø—ã—Ç–∫–∏
            if attempt % 4 == 0 and attempt > 0:
                print(f"     ... –µ—â—ë –∂–¥—ë–º (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/30, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{email}')")
            
            await asyncio.sleep(0.5)
        
        print(f"  ‚ö†Ô∏è  Email –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        
        # üîë –ú–ï–¢–û–î 2: Regex –ø–æ–∏—Å–∫ –≤ HTML (–µ—Å–ª–∏ JS –Ω–µ –ø–æ–º–æ–≥)
        html = await page.content()
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        matches = re.findall(email_pattern, html)
        
        for match in matches:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ email'—ã
            if 'example.com' not in match and 'test.com' not in match:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email —á–µ—Ä–µ–∑ regex: {match}")
                return match
        
        # üîë –ú–ï–¢–û–î 3: –ß—Ç–µ–Ω–∏–µ –∏–∑ input field —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä
        try:
            input_field = await page.query_selector('#mail, input[type="email"], input[type="text"]')
            if input_field:
                email = await input_field.input_value()
                if email and '@' in email and '.' in email:
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {email}")
                    return email
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Selector –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # üîë –ú–ï–¢–û–î 4: –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞)
        try:
            all_emails = await page.evaluate('''() => {
                const inputs = document.querySelectorAll('input');
                for (let inp of inputs) {
                    if (inp.value && inp.value.includes('@')) {
                        return inp.value;
                    }
                }
                return null;
            }''')
            
            if all_emails and '@' in all_emails:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email –≤–æ –≤—Å–µ—Ö input'–∞—Ö: {all_emails}")
                return all_emails
        except:
            pass
        
        return "ERROR: Email not found. Make sure page is fully loaded and email is visible."
    
    except Exception as e:
        return f"ERROR: Exception while extracting email: {str(e)}"


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö TOOL CALLS ====================

async def execute_computer_use_action(page, function_call: FunctionCall, screen_width: int, screen_height: int, page_mail=None, page_airtable=None) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ Computer Use –≤ –±—Ä–∞—É–∑–µ—Ä–µ Playwright.
    
    –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    https://ai.google.dev/gemini-api/docs/computer-use
    
    Args:
        page: Playwright Page –æ–±—ä–µ–∫—Ç (—Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        function_call: FunctionCall –æ—Ç –º–æ–¥–µ–ª–∏
        screen_width: –®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        screen_height: –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        page_mail: (optional) –í–∫–ª–∞–¥–∫–∞ —Å temp-mail (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
        page_airtable: (optional) –í–∫–ª–∞–¥–∫–∞ —Å Airtable (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    action = function_call.name
    args = dict(function_call.args) if function_call.args else {}
    
    print(f"  üîß –î–µ–π—Å—Ç–≤–∏–µ: {action}")
    print(f"     –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {json.dumps(args, indent=2, ensure_ascii=False)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ safety_decision
    if 'safety_decision' in args:
        safety = args['safety_decision']
        if safety.get('decision') == 'require_confirmation':
            print(f"  ‚ö†Ô∏è  Safety Warning: {safety.get('explanation', 'N/A')}")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (auto-approve)
            # –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å safety_acknowledgement –ò url
            return {
                "success": True, 
                "message": "Safety confirmation (auto-approved for testing)", 
                "safety_acknowledgement": "true",
                "url": page.url  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Computer Use!
            }
    
    try:
        # ==================== –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö ====================
        
        if action == "switch_to_mail_tab":
            if page_mail is None:
                return {"success": False, "message": "Mail tab not available", "url": page.url}
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            await page_mail.bring_to_front()
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –∂–¥—ë–º —á—Ç–æ–±—ã –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –í–ò–î–ò–ú–û–ô
            # Computer Use API —Å–∫—Ä–∏–Ω—à–æ—Ç–∏—Ç –¢–ï–ö–£–©–£–Æ –≤–∏–¥–∏–º—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response
            try:
                await page_mail.wait_for_load_state("domcontentloaded", timeout=5000)
            except:
                pass  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            await asyncio.sleep(1.0)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            print(f"  ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É temp-mail: {page_mail.url}")
            return {
                "success": True, 
                "message": f"Switched to mail tab: {page_mail.url}",
                "url": page_mail.url
            }
        
        elif action == "switch_to_airtable_tab":
            if page_airtable is None:
                return {"success": False, "message": "Airtable tab not available", "url": page.url}
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            await page_airtable.bring_to_front()
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –∂–¥—ë–º —á—Ç–æ–±—ã –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –í–ò–î–ò–ú–û–ô
            # Computer Use API —Å–∫—Ä–∏–Ω—à–æ—Ç–∏—Ç –¢–ï–ö–£–©–£–Æ –≤–∏–¥–∏–º—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response
            try:
                await page_airtable.wait_for_load_state("domcontentloaded", timeout=5000)
            except:
                pass  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            await asyncio.sleep(1.0)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            print(f"  ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É Airtable: {page_airtable.url}")
            return {
                "success": True, 
                "message": f"Switched to Airtable tab: {page_airtable.url}",
                "url": page_airtable.url
            }
        
        # ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================
        
        if action == "open_web_browser":
            # –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
            return {"success": True, "message": "–ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç", "url": page.url}
        
        elif action == "navigate":
            url = args.get("url", "")
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∞–π—Ç—ã
            if not is_allowed_url(url):
                return {"success": False, "message": f"Navigation blocked by policy: {url}", "url": page.url}
            
            try:
                # üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–†–û–¢–ò–í –ë–õ–û–ö–ò–†–û–í–û–ö
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (–∏–∑–±–µ–≥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏)
                await page.wait_for_timeout(1000)
                
                # –°–¢–†–ê–¢–ï–ì–ò–Ø 1: domcontentloaded –≤–º–µ—Å—Ç–æ networkidle (–±–æ–ª–µ–µ –º—è–≥–∫–æ–µ)
                try:
                    print(f"  üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ {url} (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: domcontentloaded)...")
                    await page.goto(url, wait_until="domcontentloaded", timeout=20000)
                    await page.wait_for_timeout(1500)  # –î–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {page.url}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  domcontentloaded –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({str(e)[:50]}). –ü–æ–ø—ã—Ç–∫–∞ 2...")
                    
                    # –°–¢–†–ê–¢–ï–ì–ò–Ø 2: load (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–µ, —á–µ–º domcontentloaded)
                    try:
                        await page.goto(url, wait_until="load", timeout=15000)
                        await page.wait_for_timeout(1000)
                        print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è load): {page.url}")
                    except Exception as e2:
                        print(f"  ‚ö†Ô∏è  load –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({str(e2)[:50]}). –ü–æ–ø—ã—Ç–∫–∞ 3...")
                        
                        # –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∞–π—Ç–æ–≤)
                        try:
                            nav_task = page.goto(url, wait_until=None)
                            await asyncio.sleep(3)  # –ü—Ä–æ—Å—Ç–æ –∂–¥—ë–º 3 —Å–µ–∫
                            await asyncio.wait_for(nav_task, timeout=5)
                            print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è minimal): {page.url}")
                        except Exception as e3:
                            # –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –î–∞–∂–µ –µ—Å–ª–∏ goto —Ñ–µ–π–ª–∏—Ç—Å—è, –¥–∞—ë–º –µ—â—ë 5 —Å–µ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                            print(f"  ‚ö†Ô∏è  –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ñ–¥—ë–º 5 —Å–µ–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
                            await page.wait_for_timeout(5000)
                            print(f"  ‚ÑπÔ∏è  –¢–µ–∫—É—â–∏–π URL: {page.url}")
                
                # üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
                print(f"  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM...")
                
                # –ñ–¥—ë–º –ª—é–±–æ–≥–æ –∑–Ω–∞—á–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
                try:
                    if "temp-mail" in url or "tempmail" in url.lower():
                        # –î–ª—è temp-mail –∂–¥—ë–º input —Å email
                        await page.wait_for_selector("#mail, input[type='email']", timeout=10000)
                        print(f"  ‚úÖ Input —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
                    elif "airtable" in url:
                        # –î–ª—è Airtable –∂–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        await page.wait_for_selector("input, button, form, [role='main']", timeout=10000)
                        print(f"  ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Airtable –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    else:
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ body
                        await page.wait_for_selector("body", timeout=5000)
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ ({str(e)[:50]}), –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                
                # üõ°Ô∏è Cloudflare check –æ—Ç–∫–ª—é—á–µ–Ω
                
                return {"success": True, "message": f"–ü–µ—Ä–µ—à–µ–ª –Ω–∞ {page.url}", "url": page.url}
                
            except Exception as e:
                print(f"  ‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                return {"success": False, "message": f"Navigate failed: {str(e)}", "url": page.url}
        
        elif action == "search":
            # –î–µ–π—Å—Ç–≤–∏–µ 'search' –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            return {"success": False, "message": "Search action is disabled for this task", "url": page.url}
        
        elif action == "go_back":
            await page.go_back(wait_until="networkidle")
            return {"success": True, "message": "–í–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", "url": page.url}
        
        elif action == "go_forward":
            await page.go_forward(wait_until="networkidle")
            return {"success": True, "message": "–ü–µ—Ä–µ—à–µ–ª –≤–ø–µ—Ä–µ–¥", "url": page.url}
        
        # ==================== –ö–õ–ò–ö–ò –ò –ù–ê–í–ï–î–ï–ù–ò–ï ====================
        
        elif action == "click_at":
            # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (0-999 ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏)
            x = args.get("x", 0)
            y = args.get("y", 0)
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            await page.mouse.click(actual_x, actual_y)
            await page.wait_for_load_state("networkidle", timeout=5000)
            
            return {"success": True, "message": f"–ö–ª–∏–∫ –ø–æ ({x}, {y}) ‚Üí ({actual_x}, {actual_y})px", "url": page.url}
        
        elif action == "hover_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            await page.mouse.move(actual_x, actual_y)
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
            
            return {"success": True, "message": f"–ù–∞–≤–µ–ª –∫—É—Ä—Å–æ—Ä –Ω–∞ ({x}, {y}) ‚Üí ({actual_x}, {actual_y})px", "url": page.url}
        
        # ==================== –í–í–û–î –¢–ï–ö–°–¢–ê ====================
        
        elif action == "type_text_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            text = args.get("text", "")
            press_enter = args.get("press_enter", True)
            clear_before = args.get("clear_before_typing", True)
            
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é
            await page.mouse.click(actual_x, actual_y)
            await asyncio.sleep(0.3)
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if clear_before:
                await page.keyboard.press("Control+A")
                await page.keyboard.press("Backspace")
            
            # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
            await page.keyboard.type(text, delay=50)  # delay –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            
            # Enter (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if press_enter:
                await page.keyboard.press("Enter")
                await page.wait_for_load_state("networkidle", timeout=5000)
            
            return {"success": True, "message": f"–í–≤–µ–ª —Ç–µ–∫—Å—Ç '{text[:50]}...' at ({x}, {y})", "url": page.url}
        
        # ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ====================
        
        elif action == "key_combination":
            keys = args.get("keys", "")
            await page.keyboard.press(keys)
            await asyncio.sleep(0.5)
            
            return {"success": True, "message": f"–ù–∞–∂–∞–ª –∫–ª–∞–≤–∏—à–∏: {keys}", "url": page.url}
        
        # ==================== –°–ö–†–û–õ–õ–ò–ù–ì ====================
        
        elif action == "scroll_document":
            direction = args.get("direction", "down")
            scroll_amount = 500
            
            if direction == "down":
                await page.mouse.wheel(0, scroll_amount)
            elif direction == "up":
                await page.mouse.wheel(0, -scroll_amount)
            elif direction == "right":
                await page.mouse.wheel(scroll_amount, 0)
            elif direction == "left":
                await page.mouse.wheel(-scroll_amount, 0)
            
            await asyncio.sleep(0.5)
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É {direction}", "url": page.url}
        
        elif action == "scroll_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            direction = args.get("direction", "down")
            magnitude = args.get("magnitude", 800)
            
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            actual_magnitude = int(magnitude / 1000 * screen_height)
            
            # –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            await page.mouse.move(actual_x, actual_y)
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å
            if direction == "down":
                await page.mouse.wheel(0, actual_magnitude)
            elif direction == "up":
                await page.mouse.wheel(0, -actual_magnitude)
            elif direction == "right":
                await page.mouse.wheel(actual_magnitude, 0)
            elif direction == "left":
                await page.mouse.wheel(-actual_magnitude, 0)
            
            await asyncio.sleep(0.5)
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∏–ª —ç–ª–µ–º–µ–Ω—Ç at ({x}, {y}) {direction} –Ω–∞ {magnitude}", "url": page.url}
        
        # ==================== DRAG & DROP ====================
        
        elif action == "drag_and_drop":
            x = args.get("x", 0)
            y = args.get("y", 0)
            dest_x = args.get("destination_x", 0)
            dest_y = args.get("destination_y", 0)
            
            start_x = int(x / 1000 * screen_width)
            start_y = int(y / 1000 * screen_height)
            end_x = int(dest_x / 1000 * screen_width)
            end_y = int(dest_y / 1000 * screen_height)
            
            # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            await page.mouse.move(start_x, start_y)
            await page.mouse.down()
            await asyncio.sleep(0.2)
            await page.mouse.move(end_x, end_y, steps=10)
            await asyncio.sleep(0.2)
            await page.mouse.up()
            
            return {"success": True, "message": f"–ü–µ—Ä–µ—Ç–∞—â–∏–ª –∏–∑ ({x}, {y}) –≤ ({dest_x}, {dest_y})", "url": page.url}
        
        # ==================== –û–ñ–ò–î–ê–ù–ò–ï ====================
        
        elif action == "wait_5_seconds":
            await asyncio.sleep(5)
            return {"success": True, "message": "–ñ–¥–∞–ª 5 —Å–µ–∫—É–Ω–¥", "url": page.url}
        
        # ==================== CUSTOM FUNCTIONS ====================
        
        elif action == "extract_verification_link":
            print("  üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ verification link –∏–∑ HTML...")
            url = await extract_verification_link_from_page(page)
            if url.startswith("ERROR"):
                return {"success": False, "error": url, "url": page.url}
            else:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")
                return {
                    "success": True,
                    "verification_url": url,
                    "message": f"Verification link extracted: {url}",
                    "url": page.url
                }
        
        elif action == "extract_email_from_page":
            print("  üìß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞ –∏–∑ HTML...")
            email = await extract_email_from_tempmail_page(page)
            if email.startswith("ERROR"):
                return {"success": False, "error": email, "url": page.url}
            else:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω email: {email}")
                return {
                    "success": True,
                    "email": email,
                    "message": f"Email extracted: {email}",
                    "url": page.url
                }
        
        # ==================== –ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –î–ï–ô–°–¢–í–ò–ï ====================
        
        else:
            return {"success": False, "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}", "url": page.url}
    
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {str(e)}"
        print(f"  ‚ùå {error_msg}")
        return {"success": False, "message": error_msg, "url": page.url}


# ==================== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ê–ì–ï–ù–¢–ê ====================

async def run_computer_use_agent(task: str, max_steps: int = 20):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å Computer Use –º–æ–¥–µ–ª—å—é.
    
    Args:
        task: –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç)
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    print("=" * 70)
    print("üöÄ –ó–∞–ø—É—Å–∫ Computer Use –∞–≥–µ–Ω—Ç–∞")
    print("=" * 70)
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    print(f"‚öôÔ∏è  –ú–æ–¥–µ–ª—å: gemini-2.5-computer-use-preview-10-2025")
    print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {max_steps}")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Google Generative AI
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use tool
    config = GenerateContentConfig(
        tools=[
            Tool(
                computer_use=ComputerUse(
                    environment=genai.types.Environment.ENVIRONMENT_BROWSER
                )
            )
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1440x900 –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Playwright —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False,  # –í–∏–¥–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        args=[
            '--start-maximized',
            '--disable-blink-features=AutomationControlled'
        ]
    )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow',
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        extra_http_headers={
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        },
        java_script_enabled=True,  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º JS
    )
    
    # üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if stealth_async:
        print("üïµÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º playwright-stealth...")
        await stealth_async(context)
    
    # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    pages = context.pages
    if pages:
        page = pages[0]
        print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É (–≤—Å–µ–≥–æ: {len(pages)})")
    else:
        page = await context.new_page()
        print("üìÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    await page.goto("about:blank")
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = []
    
    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å –∑–∞–¥–∞—á–µ–π
    initial_prompt = f"""
–¢—ã - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

{task}

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Computer Use tool –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–æ–º.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: navigate, click, type, scroll, press_key, wait, get_text.

–ü–ª–∞–Ω–∏—Ä—É–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–π –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ —Å–æ–æ–±—â–∞–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
–ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–ø–∏—à–∏ –∏—Ç–æ–≥ –∏ –∑–∞–≤–µ—Ä—à–∞–π —Ä–∞–±–æ—Ç—É.
"""
    
    print(f"\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    try:
        step = 0
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –∑–∞–¥–∞—á–∞ + –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_bytes = await page.screenshot(type="png", full_page=False)
        history = [
            Content(
                role="user",
                parts=[
                    Part.from_text(text=initial_prompt),
                    Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                ]
            )
        ]
        
        while step < max_steps:
            step += 1
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print(f"{'=' * 70}")
            
            # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if not response.candidates or not response.candidates[0].content.parts:
                print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            model_content = response.candidates[0].content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ parts –≤ –æ—Ç–≤–µ—Ç–µ
            has_tool_calls = False
            has_text = False
            tool_responses = []
            
            for part in model_content.parts:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç –º–æ–¥–µ–ª–∏
                if hasattr(part, 'text') and part.text:
                    has_text = True
                    print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                    print(f"   {part.text[:500]}...")
                
                # Tool call (–¥–µ–π—Å—Ç–≤–∏–µ)
                if hasattr(part, 'function_call') and part.function_call:
                    has_tool_calls = True
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
                    result = await execute_computer_use_action(
                        page, 
                        part.function_call,
                        SCREEN_WIDTH,
                        SCREEN_HEIGHT
                    )
                    
                    print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('message', result)}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    tool_responses.append(
                        Part.from_function_response(
                            name=part.function_call.name,
                            response=result
                        )
                    )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    await asyncio.sleep(1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            history.append(model_content)
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ tool_calls, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            if tool_responses:
                # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º function_response + —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –æ–¥–∏–Ω user turn
                history.append(
                    Content(
                        role="user",
                        parts=tool_responses + [
                            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                        ]
                    )
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                print("\n" + "=" * 70)
                print("‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                print("=" * 70)
                print(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(part.text)
                break
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ tool_calls
            if not has_text and not has_tool_calls:
                print("\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –¥–µ–π—Å—Ç–≤–∏–π")
                break
        
        else:
            print(f"\n‚è±Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = Path("logs") / f"computer_use_final_{timestamp}.png"
        screenshot_path.parent.mkdir(exist_ok=True)
        await page.screenshot(path=str(screenshot_path), full_page=True)
        print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        await asyncio.sleep(3600)  # 1 —á–∞—Å
    
    except KeyboardInterrupt:
        print("\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print("\nüßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        await browser.close()
        await playwright.stop()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ")


# ==================== AIRTABLE REGISTRATION ====================

async def run_email_extraction(max_steps: int = 15) -> Optional[str]:
    """
    –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —Å temp-mail.org
    
    Args:
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (15 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    
    Returns:
        Email –∞–¥—Ä–µ—Å –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    task = """
MISSION: Extract temporary email address from temp-mail.org

üéØ IMPORTANT: The page https://temp-mail.org/en/ is ALREADY OPEN!
   - You can see it in the screenshot
   - DO NOT navigate again - just work with current page

YOUR TASK:
  Get the temporary email address from the current page (temp-mail.org).

STEP-BY-STEP WORKFLOW:
  1. ‚úÖ Page is ALREADY open - check the screenshot
  
  2. ‚ö†Ô∏è CRITICAL: WAIT 10 seconds for email to fully load
     - The email does NOT appear immediately!
     - Textbox shows "Loading..." at first, then email appears
     - Use wait_5_seconds action TWICE (5s + 5s = 10s total)
  
  3. Extract email using the CUSTOM FUNCTION:
     ‚≠ê CALL: extract_email_from_page()
     - This function will parse HTML and get the email
     - It returns the email address as a string
     - DO NOT try to read email from screenshot manually!
  
  4. After getting email from function, IMMEDIATELY RETURN result:
     - Simply state: "The temporary email is: xxx@domain.com"
     - DO NOT do any other actions after getting email
  
  5. STOP as soon as email is extracted

ANTI-LOOP RULES:
  - Maximum 3 attempts total
  - If extract_email_from_page() returns error ‚Üí WAIT 5s and try again
  - DO NOT navigate to temp-mail again (already there!)
  - DO NOT click random elements hoping to find email

SUCCESS CHECK:
  ‚úÖ Email extracted = Contains @ and domain name
  ‚ùå Failed = Function returns ERROR

REMEMBER:
  - Page is ALREADY OPEN - don't navigate
  - ALWAYS use extract_email_from_page() function
  - DO NOT try to read visually from screenshot
  - STOP immediately after getting email
"""
    
    print("\n" + "=" * 70)
    print("üìß –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ù–û–ì–û EMAIL")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use + Custom Functions
    config = GenerateContentConfig(
        tools=[
            Tool(computer_use=ComputerUse(
                environment=genai.types.Environment.ENVIRONMENT_BROWSER
            )),
            Tool(function_declarations=get_custom_function_declarations())
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False, 
        args=[
            '--start-maximized',
            '--disable-blink-features=AutomationControlled'
        ]
    )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow',
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        extra_http_headers={
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        },
        java_script_enabled=True,  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º JS
    )
    
    # üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if stealth_async:
        print("üïµÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º playwright-stealth...")
        await stealth_async(context)
    
    # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    # Chromium –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    pages = context.pages
    if pages:
        page = pages[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
        print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É (–≤—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(pages)})")
    else:
        page = await context.new_page()  # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–∫
        print("üìÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
    
    # üéØ –°–†–ê–ó–£ –û–¢–ö–†–´–í–ê–ï–ú temp-mail.org –≤–º–µ—Å—Ç–æ about:blank
    # –≠—Ç–æ –¥–∞–µ—Ç –∞–≥–µ–Ω—Ç—É —É–∂–µ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
    print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É temp-mail.org...")
    await page.goto("https://temp-mail.org/en/", wait_until="domcontentloaded")
    await page.wait_for_timeout(10000)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É")
    
    history = []
    screenshot_bytes = await safe_screenshot(page, full_page=False, timeout_ms=10000)
    
    history.append(
        Content(role="user", parts=[
            Part(text=task),
            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
        ])
    )
    
    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    extracted_email = None
    
    try:
        for step in range(1, max_steps + 1):
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print("=" * 70)
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            candidate = response.candidates[0]
            model_content = candidate.content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ tool_calls
            has_text = any(hasattr(part, 'text') and part.text for part in model_content.parts)
            has_tool_calls = any(hasattr(part, 'function_call') and part.function_call for part in model_content.parts)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏
            if has_text:
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                        print(f"   {part.text[:300]}...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º tool_calls
            tool_responses = []
            if has_tool_calls:
                for part in model_content.parts:
                    if hasattr(part, 'function_call') and part.function_call:
                        fc = part.function_call
                        result = await execute_computer_use_action(page, fc, SCREEN_WIDTH, SCREEN_HEIGHT)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if fc.name == "extract_email_from_page" and result.get("success"):
                            extracted_email = result.get("email")
                            print(f"\n‚úÖ EMAIL –ü–û–õ–£–ß–ï–ù: {extracted_email}")
                        
                        tool_responses.append(
                            Part(function_response=FunctionResponse(
                                name=fc.name,
                                response=result
                            ))
                        )
            
            history.append(model_content)
            
            if tool_responses:
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                history.append(
                    Content(role="user", parts=tool_responses + [
                        Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                    ])
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ email –∏–∑–≤–ª–µ—á–µ–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º
            if extracted_email:
                print(f"\n‚úÖ –®–ê–ì 1 –ó–ê–í–ï–†–®–Å–ù: Email = {extracted_email}")
                break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å email –∏–∑ —Ç–µ–∫—Å—Ç–∞
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        extracted_email = extract_email_from_text(part.text)
                        if extracted_email:
                            print(f"\n‚úÖ Email –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞: {extracted_email}")
                            break
                break
        
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –®–ê–ì 2!
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –®–ê–ì 2...")
        return extracted_email
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –®–ê–ì 1: {e}")
        await browser.close()
        await playwright.stop()
        return None


async def run_airtable_registration(email: str, max_steps: int = 35) -> dict:
    """
    –®–ê–ì 2: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Airtable + –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
    
    Args:
        email: Email –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ –®–ê–ì 1
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (35 –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏)
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {status, email, confirmed, notes}
    """
    task = f"""
MISSION: Register on Airtable and confirm email

YOUR EMAIL: {email}
REGISTRATION URL: https://airtable.com/invite/r/ovoAP1zR

YOUR TASK:
  Complete full Airtable registration using the email above, including email verification.

CRITICAL WORKFLOW:
  üìù PHASE 1: AIRTABLE REGISTRATION FORM
  -------------------------------------------
  STEP 1: Navigate to https://airtable.com/invite/r/ovoAP1zR
  
  STEP 2: WAIT 5 seconds for form to load
  
  STEP 3: Fill registration form with these EXACT details:
    * Email: {email} (EXACTLY this email, DO NOT MODIFY!)
    * Full Name: "Maria Rodriguez" (or any realistic name)
    * Password: "SecurePass2024!" (minimum 8 characters)
    
    IMPORTANT NOTES:
    - Submit button "Create account" is DISABLED initially
    - It only enables when ALL fields are valid
    - If button stays disabled ‚Üí check email format is correct
  
  STEP 4: Click "Create account" button ONCE (only one click!)
  
  STEP 5: ‚ö†Ô∏è CRITICAL - After clicking submit, you MUST:
    1. **WAIT 10 seconds** for page to process
    2. **CHECK current URL** - THIS IS THE SUCCESS INDICATOR!
       ‚úÖ SUCCESS = URL changed from "/invite/r/..." to "https://airtable.com/" (base domain)
       ‚úÖ SUCCESS = URL contains "/workspace" or "/verify"
       ‚ùå FAIL = URL still contains "/invite/"
    3. **IF URL DID NOT CHANGE**:
       - Check page for error messages
       - Read what the error says
       - Report error and STOP
    4. **IF URL CHANGED TO https://airtable.com/**:
       - Registration is SUCCESSFUL!
       - Proceed immediately to PHASE 2

  ‚úâÔ∏è PHASE 2: EMAIL VERIFICATION
  -------------------------------------------
  STEP 6: Navigate to https://temp-mail.org/en/
    * This is where you got the email originally
  
  STEP 7: WAIT 15 seconds for email to arrive
    * Airtable sends confirmation email within ~15 seconds
    * Email subject: "Please confirm your email"
    * Sender: Airtable <noreply@airtable.com>
  
  STEP 8: Refresh temp-mail page if needed
    * If inbox still shows "Your inbox is empty"
    * Reload the page or wait longer
  
  STEP 9: Find and CLICK on the Airtable email to open it
    * Click on subject line to view email content
  
  STEP 10: Extract verification URL using CUSTOM FUNCTION
    ‚≠ê CALL: extract_verification_link()
    - This function will parse HTML and find the verification URL
    - It returns the full URL as a string
    - DO NOT try to click the link visually!
  
  STEP 11: Navigate to verification URL
    * After getting URL from extract_verification_link()
    * Use navigate(url=<the_url_from_function>)
    * This opens it in SAME tab (not new tab!)
  
  STEP 12: WAIT 5 seconds for verification to process
  
  STEP 13: CHECK verification success
    * Look for success message or redirect to workspace
    * Account should now be confirmed

ANTI-LOOP PROTECTION:
  ‚õî If you repeat the same action 3+ times ‚Üí STOP and analyze
  
  Common issues & solutions:
  - ‚ùå Submit button disabled? 
    ‚Üí Check all fields are filled correctly
    ‚Üí Email must be valid format
  
  - ‚ùå URL not changing after submit?
    ‚Üí WAIT full 10 seconds before checking
    ‚Üí Look for error messages on page
  
  - ‚ùå Email not arriving?
    ‚Üí WAIT up to 30 seconds total
    ‚Üí Refresh temp-mail page
  
  - ‚ùå Can't find verification link?
    ‚Üí Use extract_verification_link() function
    ‚Üí DO NOT try to click visually
  
  NEVER:
    - Click "Create account" more than once
    - Check URL before waiting 10 seconds
    - Click verification link (use navigate instead)
    - Wait indefinitely (max 30s for email)

SUCCESS INDICATORS:
  ‚úÖ Registration successful:
    - URL changes from "/invite/r/xxx" to "https://airtable.com/"
  
  ‚úÖ Email verification successful:
    - After opening verify URL, page shows success or workspace

FINAL OUTPUT:
  When done, clearly state:
  - "Registration successful" or "Registration failed"
  - "Email confirmed" or "Email not confirmed"
"""
    
    print("\n" + "=" * 70)
    print("üìù –®–ê–ì 2: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE + –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
    print("=" * 70)
    print(f"üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º email: {email}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use + Custom Functions
    config = GenerateContentConfig(
        tools=[
            Tool(computer_use=ComputerUse(
                environment=genai.types.Environment.ENVIRONMENT_BROWSER
            )),
            Tool(function_declarations=get_custom_function_declarations())
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–Ω–æ–≤—ã–π –¥–ª—è –®–ê–ì 2)
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False, 
        args=[
            '--start-maximized',
            '--disable-blink-features=AutomationControlled'
        ]
    )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow',
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        extra_http_headers={
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        },
        java_script_enabled=True,  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º JS
    )
    
    # üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if stealth_async:
        print("üïµÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º playwright-stealth...")
        await stealth_async(context)
    
    # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    pages = context.pages
    if pages:
        page = pages[0]
        print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É (–≤—Å–µ–≥–æ: {len(pages)})")
    else:
        page = await context.new_page()
        print("üìÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
    
    await page.goto("about:blank")
    
    history = []
    screenshot_bytes = await page.screenshot(type="png", full_page=False)
    
    history.append(
        Content(role="user", parts=[
            Part(text=task),
            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
        ])
    )
    
    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    result = {
        "status": "unknown",
        "email": email,
        "confirmed": False,
        "notes": ""
    }
    
    try:
        for step in range(1, max_steps + 1):
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print("=" * 70)
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            candidate = response.candidates[0]
            model_content = candidate.content
            
            has_text = any(hasattr(part, 'text') and part.text for part in model_content.parts)
            has_tool_calls = any(hasattr(part, 'function_call') and part.function_call for part in model_content.parts)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏
            if has_text:
                final_text = ""
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                        print(f"   {part.text[:300]}...")
                        final_text += part.text
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if "registration successful" in final_text.lower() or "account created" in final_text.lower():
                    result["status"] = "success"
                if "email confirmed" in final_text.lower() or "email verified" in final_text.lower():
                    result["confirmed"] = True
                if "failed" in final_text.lower() or "error" in final_text.lower():
                    result["status"] = "failed"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º tool_calls
            tool_responses = []
            if has_tool_calls:
                for part in model_content.parts:
                    if hasattr(part, 'function_call') and part.function_call:
                        fc = part.function_call
                        exec_result = await execute_computer_use_action(page, fc, SCREEN_WIDTH, SCREEN_HEIGHT)
                        tool_responses.append(
                            Part(function_response=FunctionResponse(
                                name=fc.name,
                                response=exec_result
                            ))
                        )
            
            history.append(model_content)
            
            if tool_responses:
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                history.append(
                    Content(role="user", parts=tool_responses + [
                        Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                    ])
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                print("\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                result["notes"] = final_text[:200] if 'final_text' in locals() else "Registration completed"
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = Path("logs") / f"airtable_registration_{timestamp}.png"
        screenshot_path.parent.mkdir(exist_ok=True)
        await page.screenshot(path=str(screenshot_path), full_page=True)
        print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º 60 —Å–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(60)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –®–ê–ì 2: {e}")
        result["status"] = "failed"
        result["notes"] = f"Error: {str(e)}"
    
    finally:
        await browser.close()
        await playwright.stop()
    
    return result


async def run_email_extraction_on_page(page, client, config, max_steps: int = 15) -> Optional[str]:
    """
    –®–ê–ì 1 (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —Å temp-mail.org –Ω–∞ –£–ñ–ï –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ.

    Args:
        page: –í–∫–ª–∞–¥–∫–∞ Playwright c temp-mail (–∏–ª–∏ about:blank)
        client: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π genai.Client
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GenerateContentConfig —Å Computer Use + custom functions
        max_steps: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∞–≥–æ–≤

    Returns:
        –°—Ç—Ä–æ–∫–∞ email –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
    """
    task = """
MISSION: Extract temporary email address from temp-mail.org

YOUR TASK:
  Get a temporary email address from https://temp-mail.org/en/ that will be used for Airtable registration.

RULES (Unified Session):
  - Work ONLY in this tab for temp-mail actions
  - DO NOT close this tab under any circumstances
  - You may refresh or navigate within temp-mail.org, but keep this tab focused on inbox

STEP-BY-STEP WORKFLOW:
  1. Navigate to https://temp-mail.org/en/
  2. WAIT 10 seconds after page loads (email appears with delay)
  3. Call extract_email_from_page() to get the email from HTML
  4. As soon as you have the email, return it in text and STOP

ANTI-LOOP RULES:
  - Max 3 attempts
  - If function returns error ‚Üí WAIT 5s and retry

SUCCESS CHECK:
  ‚úÖ Contains '@' and a domain
"""

    model_name = "gemini-2.5-computer-use-preview-10-2025"
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    history = []
    screenshot_bytes = await safe_screenshot(page, full_page=False, timeout_ms=10000)
    parts = [Part(text=task)]
    if screenshot_bytes:
        parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
    history.append(Content(role="user", parts=parts))

    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (email extraction, unified) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

    extracted_email = None

    for step in range(1, max_steps + 1):
        print(f"\n{'=' * 70}")
        print(f"üîÑ –®–ê–ì {step}/{max_steps} (email)")
        print("=" * 70)
        print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")

        response = await asyncio.to_thread(
            client.models.generate_content,
            model=model_name,
            contents=history,
            config=config
        )
        if response is None or not getattr(response, 'candidates', None):
            print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (email), –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ 2—Å...")
            await asyncio.sleep(2)
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            if response is None or not getattr(response, 'candidates', None):
                print("‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ (email)")
                break

        candidate = response.candidates[0]
        model_content = candidate.content

        # –ü–µ—á–∞—Ç—å –º—ã—Å–ª–µ–π –º–æ–¥–µ–ª–∏
        for part in model_content.parts:
            if hasattr(part, 'text') and part.text:
                print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:\n   {part.text[:300]}...")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        tool_responses = []
        for part in model_content.parts:
            if hasattr(part, 'function_call') and part.function_call:
                fc = part.function_call
                result = await execute_computer_use_action(page, fc, SCREEN_WIDTH, SCREEN_HEIGHT)
                # Cloudflare –¥–µ—Ç–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —à–∞–≥–∞ email
                # Cloudflare check –æ—Ç–∫–ª—é—á–µ–Ω
                if fc.name == "extract_email_from_page" and result.get("success"):
                    extracted_email = result.get("email")
                    print(f"\n‚úÖ EMAIL –ü–û–õ–£–ß–ï–ù (unified): {extracted_email}")
                tool_responses.append(
                    Part(function_response=FunctionResponse(name=fc.name, response=result))
                )

        history.append(model_content)

        if tool_responses:
            screenshot_bytes = await safe_screenshot(page, full_page=False, timeout_ms=10000)
            parts = tool_responses.copy()
            if screenshot_bytes:
                parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
            history.append(Content(role="user", parts=parts))

        if extracted_email:
            return extracted_email

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å email –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if all(not getattr(p, 'function_call', None) for p in model_content.parts):
            for p in model_content.parts:
                if hasattr(p, 'text') and p.text:
                    maybe_email = extract_email_from_text(p.text)
                    if maybe_email:
                        print(f"\n‚úÖ EMAIL –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ (unified): {maybe_email}")
                        return maybe_email
            break

    return None


async def run_airtable_registration_on_pages(email: str, page_mail, page_airtable, client, config, max_steps: int = 40) -> dict:
    """
    –®–ê–ì 2 (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable –Ω–∞ –û–¢–î–ï–õ–¨–ù–û–ô –≤–∫–ª–∞–¥–∫–µ, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—á—Ç—É –æ—Ç–∫—Ä—ã—Ç–æ–π.

    –ü—Ä–∞–≤–∏–ª–æ: –≤–∫–ª–∞–¥–∫–∞ —Å temp-mail (page_mail) –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –Ω–µ —Ç–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –§—É–Ω–∫—Ü–∏—é extract_verification_link() –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ—á—Ç—ã, –∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ verify URL ‚Äî –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Airtable.
    """
    task = f"""
MISSION: Register on Airtable and confirm email (Two-tab workflow)

YOUR EMAIL: {email}
REGISTRATION URL: https://airtable.com/invite/r/ovoAP1zR

YOU HAVE TWO BROWSER TABS AVAILABLE:
  1. Airtable tab (currently active) - for registration
  2. Temp-mail tab (already open) - for checking verification email

AVAILABLE TAB SWITCHING FUNCTIONS:
  - switch_to_mail_tab() - switches to temp-mail inbox
  - switch_to_airtable_tab() - switches to Airtable registration page

CRITICAL WORKFLOW:
  1) [AIRTABLE TAB - already active] Navigate to https://airtable.com/invite/r/ovoAP1zR and complete signup:
     - Email: {email}
     - Full Name: Maria Rodriguez (or similar realistic name)
     - Password: SecurePass2024!
     - Click "Create account" button ONCE
     - Wait 10 seconds to see if URL changes from /invite/

  2) [SWITCH TO MAIL TAB] Use switch_to_mail_tab() to view the inbox
     - Wait up to 30 seconds for Airtable email (subject: "Please confirm your email")
     - Click on the email to open it

  3) [MAIL TAB] Call extract_verification_link() to get the verification URL from email content
     - This will return the full https://airtable.com/auth/verifyEmail/... URL

  4) [SWITCH TO AIRTABLE TAB] Use switch_to_airtable_tab() to go back
     - Navigate to the verification URL using navigate(url=...)
     - Wait 5-10 seconds and confirm success

IMPORTANT RULES:
  - ALWAYS use switch_to_mail_tab() BEFORE clicking on emails or calling extract_verification_link()
  - ALWAYS use switch_to_airtable_tab() BEFORE navigating to Airtable pages
  - The mail tab must stay open throughout the entire process
  - After switching tabs, ALL subsequent actions happen on that tab until you switch again
"""

    model_name = "gemini-2.5-computer-use-preview-10-2025"
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    history = []
    screenshot_bytes = await safe_screenshot(page_airtable, full_page=False, timeout_ms=10000)
    parts = [Part(text=task)]
    if screenshot_bytes:
        parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
    history.append(Content(role="user", parts=parts))

    print("\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (airtable registration, unified) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

    result = {
        "status": "unknown",
        "email": email,
        "confirmed": False,
        "notes": ""
    }

    final_text = ""
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    # –ù–∞—á–∏–Ω–∞–µ–º —Å Airtable, —Ç.–∫. —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    current_active_page = page_airtable

    for step in range(1, max_steps + 1):
        print(f"\n{'=' * 70}")
        print(f"üîÑ –®–ê–ì {step}/{max_steps} (registration)")
        print("=" * 70)
        print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")

        response = await asyncio.to_thread(
            client.models.generate_content,
            model=model_name,
            contents=history,
            config=config
        )
        if response is None or not getattr(response, 'candidates', None):
            print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏, –∂–¥—É 2—Å –∏ –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
            await asyncio.sleep(2)
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            if response is None or not getattr(response, 'candidates', None):
                print("‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–µ—Ä—ã–≤–∞—é.")
                result["status"] = "failed"
                result["notes"] = "Model returned empty response"
                break

        candidate = response.candidates[0]
        model_content = candidate.content

        has_tool_calls = any(hasattr(p, 'function_call') and p.function_call for p in model_content.parts)

        # –ü–µ—á–∞—Ç—å –º—ã—Å–ª–µ–π –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for part in model_content.parts:
            if hasattr(part, 'text') and part.text:
                print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:\n   {part.text[:400]}...")
                final_text += part.text + "\n"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: switch_to_* –º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ç–µ–∫—É—â–µ–π
        # current_active_page —Ö—Ä–∞–Ω–∏—Ç—Å—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ —Ü–∏–∫–ª–∞)
        tool_responses = []
        
        for part in model_content.parts:
            if hasattr(part, 'function_call') and part.function_call:
                fc = part.function_call
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ switch_to_* —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—è–µ—Ç current_active_page
                if fc.name == "switch_to_mail_tab":
                    exec_result = await execute_computer_use_action(
                        page_mail, fc, SCREEN_WIDTH, SCREEN_HEIGHT, 
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    current_active_page = page_mail  # –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—á—Ç–∞
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                elif fc.name == "switch_to_airtable_tab":
                    exec_result = await execute_computer_use_action(
                        page_airtable, fc, SCREEN_WIDTH, SCREEN_HEIGHT, 
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    current_active_page = page_airtable  # –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω Airtable
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                elif fc.name == "extract_verification_link":
                    # –Ø–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
                    await page_mail.bring_to_front()
                    current_active_page = page_mail
                    exec_result = await execute_computer_use_action(
                        page_mail, fc, SCREEN_WIDTH, SCREEN_HEIGHT,
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))
                    
                else:
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                    exec_result = await execute_computer_use_action(
                        current_active_page, fc, SCREEN_WIDTH, SCREEN_HEIGHT,
                        page_mail=page_mail, page_airtable=page_airtable
                    )
                    tool_responses.append(Part(function_response=FunctionResponse(name=fc.name, response=exec_result)))

        history.append(model_content)

        if tool_responses:
            # –í–ê–ñ–ù–û: –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏ Computer Use API –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫—É—é –≤–∫–ª–∞–¥–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∏—Ç—å. –ù—É–∂–Ω–æ –í–†–£–ß–ù–£–Æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏!
            
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ current_active_page –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
            await current_active_page.bring_to_front()
            await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            
            screenshot_bytes = await safe_screenshot(current_active_page, full_page=False, timeout_ms=10000)
            parts = tool_responses.copy()
            if screenshot_bytes:
                parts.append(Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes)))
            else:
                print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏!")
            history.append(Content(role="user", parts=parts))

        # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
        lower = final_text.lower()
        if "registration successful" in lower or "account created" in lower:
            result["status"] = "success"
        if "email confirmed" in lower or "email verified" in lower:
            result["confirmed"] = True
        if "failed" in lower or "error" in lower:
            result["status"] = "failed"

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –¥–µ–ª–∞—Ç—å –≤—ã–∑–æ–≤—ã
        if not has_tool_calls and final_text.strip():
            print("\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê (unified)")
            result["notes"] = final_text[:400]
            break

    # –°–∫—Ä–∏–Ω—à–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Airtable
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    screenshot_path = Path("logs") / f"airtable_registration_unified_{timestamp}.png"
    screenshot_path.parent.mkdir(exist_ok=True)
    try:
        img = await safe_screenshot(page_airtable, full_page=True, timeout_ms=15000)
        with open(screenshot_path, 'wb') as f:
            f.write(img)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (unified): {e}")
    print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (unified): {screenshot_path}")

    return result


async def main_airtable_registration_unified():
    """
    –ï–î–ò–ù–´–ô –ü–û–¢–û–ö: –æ–¥–∏–Ω –±—Ä–∞—É–∑–µ—Ä, –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏ (temp-mail + Airtable).
    –ü–æ—á—Ç–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–π –∂–µ.
    """
    print("=" * 70)
    print("üöÄ –ê–í–¢–û-–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE (–µ–¥–∏–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä, 2 –≤–∫–ª–∞–¥–∫–∏)")
    print("=" * 70)
    print("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ airtable.com –∏ temp-mail.org")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    client = genai.Client(api_key=api_key)
    config = GenerateContentConfig(
        tools=[
            Tool(computer_use=ComputerUse(environment=genai.types.Environment.ENVIRONMENT_BROWSER)),
            Tool(function_declarations=get_custom_function_declarations())
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )

    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900

    # –û–¥–∏–Ω –±—Ä–∞—É–∑–µ—Ä, –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–ï–ó persistent (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏).
    # –í–∫–ª—é—á–∏—Ç—å persistent –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è AS_USE_PERSISTENT=1
    playwright = await async_playwright().start()
    use_persistent = os.getenv('AS_USE_PERSISTENT', '0') == '1'
    if use_persistent:
        user_data_dir = os.getenv("PLAYWRIGHT_USER_DATA_DIR") or os.getenv("BROWSER_USE_USER_DATA_DIR")
        if not user_data_dir:
            user_data_dir = str(Path.cwd() / "profiles" / "unified_default")
        Path(user_data_dir).mkdir(parents=True, exist_ok=True)
        print(f"üóÇÔ∏è  –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (persistent): {user_data_dir}")
        context = await playwright.chromium.launch_persistent_context(
            user_data_dir=user_data_dir,
            headless=False,
            viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            extra_http_headers={
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Cache-Control': 'max-age=0',
            },
            args=['--start-maximized', '--disable-blink-features=AutomationControlled']
        )
    else:
        print("üóÇÔ∏è  –†–µ–∂–∏–º –±–µ–∑ persistent –ø—Ä–æ—Ñ–∏–ª—è (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–∞—Ö)")
        browser = await playwright.chromium.launch(
            headless=False,
            args=['--start-maximized', '--disable-blink-features=AutomationControlled']
        )
        context = await browser.new_context(
            viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            extra_http_headers={
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Cache-Control': 'max-age=0',
            },
        )

    # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    if stealth_async:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í playwright-stealth 2.0.0 –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç context
        await stealth_async(context)
        print("üïµÔ∏è Stealth mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–æ–±—Ö–æ–¥ Cloudflare –∏ bot-detection)")
    else:
        print("‚ö†Ô∏è  Stealth mode –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (playwright_stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright-stealth")
    
    # üé≠ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Sec-Fetch-* headers (–∫–∞–∫ –≤ working test)
    await context.set_extra_http_headers({
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
    })
    print("üé≠ Sec-Fetch-* headers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ working test)")

    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏: –°–¢–ê–†–¢–£–ï–ú –° –û–î–ù–û–ô (–ø–æ—á—Ç–∞), –≤—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–¥–∏–º –ü–û–¢–û–ú ===
    # –í persistent-–ø—Ä–æ—Ñ–∏–ª–µ Chromium –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ about:blank
    # –ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ 1 –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—É—é –≤–∫–ª–∞–¥–∫—É
    existing = list(context.pages)
    print(f"üß≠ –í–∫–ª–∞–¥–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞: {len(existing)} ‚Üí –∑–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –∏ —Å–æ–∑–¥–∞—é 1 (–ø–æ—á—Ç–∞)")
    for p in existing:
        try:
            await p.close()
        except Exception:
            pass

    # –°–æ–∑–¥–∞—ë–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É: –¥–ª—è –ø–æ—á—Ç—ã (temp-mail)
    page_mail = await context.new_page()
    if page_mail.url == "" or not page_mail.url:
        await page_mail.goto("about:blank")
    print(f"üìÑ –¢–µ–∫—É—â–∏—Ö –≤–∫–ª–∞–¥–æ–∫: {len(context.pages)} (—Ç–æ–ª—å–∫–æ mail)")

    try:
    # –®–ê–ì 1: –ø–æ–ª—É—á–∞–µ–º email –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ—á—Ç—ã (–≤–∫–ª–∞–¥–∫–∞ –ø–æ—á—Ç—ã –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π)
        print("\nüìß –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email (–≤–∫–ª–∞–¥–∫–∞ –ø–æ—á—Ç—ã –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π)...")
        email = await run_email_extraction_on_page(page_mail, client, config, max_steps=15)

        if not email:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email")
            save_registration_result(email="None", status="failed", confirmed=False, notes="Failed to get temporary email (unified)")
            return

        print(f"\n‚úÖ Email –ø–æ–ª—É—á–µ–Ω: {email}")

        # –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ–¥ Airtable
        page_airtable = await context.new_page()
        if page_airtable.url == "" or not page_airtable.url:
            await page_airtable.goto("about:blank")
        print(f"ü™ü –û—Ç–∫—Ä—ã—Ç–∞ –≤—Ç–æ—Ä–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è Airtable. –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(context.pages)}")

        # –®–ê–ì 2: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –≤–∫–ª–∞–¥–æ–∫
        print("\nüìù –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable (–ø–æ—á—Ç–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è)...")
        result = await run_airtable_registration_on_pages(email, page_mail, page_airtable, client, config, max_steps=40)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        save_registration_result(
            email=result.get("email", email),
            status=result.get("status", "unknown"),
            confirmed=result.get("confirmed", False),
            notes=result.get("notes", "")
        )

        # –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥
        print("\n" + "=" * 70)
        print("‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (unified) –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 70)
        print(f"üìß Email: {result.get('email', email)}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result.get('confirmed', False)}")
        if result.get('notes'):
            print(f"üìù –ó–∞–º–µ—Ç–∫–∏: {result['notes'][:200]}")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –í–∫–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã 30 —Å–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(30)

    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        print("\nüßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä (unified, persistent context)...")
        await context.close()
        await playwright.stop()

    return


async def main_airtable_registration():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Airtable
    """
    print("=" * 70)
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê AIRTABLE")
    print("=" * 70)
    
    try:
        # –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ email
        print("\nüìß –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email...")
        email = await run_email_extraction(max_steps=15)
        
        if not email:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email")
            save_registration_result(
                email="None",
                status="failed",
                confirmed=False,
                notes="Failed to get temporary email"
            )
            return
        
        print(f"\n‚úÖ Email –ø–æ–ª—É—á–µ–Ω: {email}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
        print("\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...")
        await asyncio.sleep(5)
        
        # –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        print("\nüìù –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable...")
        result = await run_airtable_registration(email, max_steps=35)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        save_registration_result(
            email=result["email"],
            status=result["status"],
            confirmed=result["confirmed"],
            notes=result["notes"]
        )
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 70)
        print("‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 70)
        print(f"üìß Email: {result['email']}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result['confirmed']}")
        if result['notes']:
            print(f"üìù –ó–∞–º–µ—Ç–∫–∏: {result['notes'][:200]}")
        print("=" * 70)
        
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


# ==================== –ó–ê–ü–£–°–ö ====================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–µ–º–æ —Å Yandex"""
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    task = """
–û—Ç–∫—Ä–æ–π —Å–∞–π—Ç yandex.ru –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é.
–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å –∫—É—Ä—Å, —Å–æ–æ–±—â–∏ –º–Ω–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
"""
    
    await run_computer_use_agent(task, max_steps=15)


if __name__ == "__main__":
    import sys
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: –¥–µ–º–æ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Airtable
    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        print("üéØ –†–µ–∂–∏–º: –î–µ–º–æ (–æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –¥–æ–º–µ–Ω—ã)")
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        except RuntimeError as e:
            if "Event loop is closed" not in str(e):
                raise
    else:
        print("üéØ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Airtable (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ airtable.com –∏ temp-mail.org")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –¥–≤—É–º—è –≤–∫–ª–∞–¥–∫–∞–º–∏, —á—Ç–æ–±—ã –ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ—á—Ç—É
            asyncio.run(main_airtable_registration_unified())
        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        except RuntimeError as e:
            if "Event loop is closed" not in str(e):
                raise