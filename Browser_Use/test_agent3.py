"""
–†–ê–ë–û–¢–ê–ï–¢!!!!!!!
üéØ –¢–µ—Å—Ç gemini-2.5-computer-use-preview-10-2025 —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SDK google.genai
–ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è browser-use Agent - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ API –∏ Playwright.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç Playwright –±—Ä–∞—É–∑–µ—Ä
2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Computer Use –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ google.genai.Client
3. –ú–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ tool_calls
4. –¶–∏–∫–ª: —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí –º–æ–¥–µ–ª—å ‚Üí tool_call ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
"""
import os
import json
import asyncio
import base64
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# –ù–æ–≤—ã–π SDK Google Generative AI (unified SDK)
from google import genai
from google.genai.types import (
    Tool, ComputerUse, 
    GenerateContentConfig,
    Content, Part, Blob,
    FunctionCall, FunctionResponse
)

# Playwright –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º
from playwright.async_api import async_playwright


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö TOOL CALLS ====================

async def execute_computer_use_action(page, function_call: FunctionCall, screen_width: int, screen_height: int) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ Computer Use –≤ –±—Ä–∞—É–∑–µ—Ä–µ Playwright.
    
    –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    https://ai.google.dev/gemini-api/docs/computer-use
    
    Args:
        page: Playwright Page –æ–±—ä–µ–∫—Ç
        function_call: FunctionCall –æ—Ç –º–æ–¥–µ–ª–∏
        screen_width: –®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        screen_height: –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    action = function_call.name
    args = dict(function_call.args) if function_call.args else {}
    
    print(f"  üîß –î–µ–π—Å—Ç–≤–∏–µ: {action}")
    print(f"     –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {json.dumps(args, indent=2, ensure_ascii=False)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ safety_decision
    if 'safety_decision' in args:
        safety = args['safety_decision']
        if safety.get('decision') == 'require_confirmation':
            print(f"  ‚ö†Ô∏è  Safety Warning: {safety.get('explanation', 'N/A')}")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (auto-approve)
            # –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å safety_acknowledgement –ò url
            return {
                "success": True, 
                "message": "Safety confirmation (auto-approved for testing)", 
                "safety_acknowledgement": "true",
                "url": page.url  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Computer Use!
            }
    
    try:
        # ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================
        
        if action == "open_web_browser":
            # –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
            return {"success": True, "message": "–ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç", "url": page.url}
        
        elif action == "navigate":
            url = args.get("url", "")
            await page.goto(url, wait_until="networkidle", timeout=30000)
            return {"success": True, "message": f"–ü–µ—Ä–µ—à–µ–ª –Ω–∞ {url}", "url": page.url}
        
        elif action == "search":
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Google
            await page.goto("https://www.google.com", wait_until="networkidle", timeout=30000)
            return {"success": True, "message": "–û—Ç–∫—Ä—ã–ª Google Search", "url": page.url}
        
        elif action == "go_back":
            await page.go_back(wait_until="networkidle")
            return {"success": True, "message": "–í–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", "url": page.url}
        
        elif action == "go_forward":
            await page.go_forward(wait_until="networkidle")
            return {"success": True, "message": "–ü–µ—Ä–µ—à–µ–ª –≤–ø–µ—Ä–µ–¥", "url": page.url}
        
        # ==================== –ö–õ–ò–ö–ò –ò –ù–ê–í–ï–î–ï–ù–ò–ï ====================
        
        elif action == "click_at":
            # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (0-999 ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏)
            x = args.get("x", 0)
            y = args.get("y", 0)
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            await page.mouse.click(actual_x, actual_y)
            await page.wait_for_load_state("networkidle", timeout=5000)
            
            return {"success": True, "message": f"–ö–ª–∏–∫ –ø–æ ({x}, {y}) ‚Üí ({actual_x}, {actual_y})px", "url": page.url}
        
        elif action == "hover_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            await page.mouse.move(actual_x, actual_y)
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
            
            return {"success": True, "message": f"–ù–∞–≤–µ–ª –∫—É—Ä—Å–æ—Ä –Ω–∞ ({x}, {y}) ‚Üí ({actual_x}, {actual_y})px"}
        
        # ==================== –í–í–û–î –¢–ï–ö–°–¢–ê ====================
        
        elif action == "type_text_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            text = args.get("text", "")
            press_enter = args.get("press_enter", True)
            clear_before = args.get("clear_before_typing", True)
            
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            
            # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é
            await page.mouse.click(actual_x, actual_y)
            await asyncio.sleep(0.3)
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if clear_before:
                await page.keyboard.press("Control+A")
                await page.keyboard.press("Backspace")
            
            # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
            await page.keyboard.type(text, delay=50)  # delay –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            
            # Enter (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if press_enter:
                await page.keyboard.press("Enter")
                await page.wait_for_load_state("networkidle", timeout=5000)
            
            return {"success": True, "message": f"–í–≤–µ–ª —Ç–µ–∫—Å—Ç '{text[:50]}...' at ({x}, {y})", "url": page.url}
        
        # ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ====================
        
        elif action == "key_combination":
            keys = args.get("keys", "")
            await page.keyboard.press(keys)
            await asyncio.sleep(0.5)
            
            return {"success": True, "message": f"–ù–∞–∂–∞–ª –∫–ª–∞–≤–∏—à–∏: {keys}"}
        
        # ==================== –°–ö–†–û–õ–õ–ò–ù–ì ====================
        
        elif action == "scroll_document":
            direction = args.get("direction", "down")
            scroll_amount = 500
            
            if direction == "down":
                await page.mouse.wheel(0, scroll_amount)
            elif direction == "up":
                await page.mouse.wheel(0, -scroll_amount)
            elif direction == "right":
                await page.mouse.wheel(scroll_amount, 0)
            elif direction == "left":
                await page.mouse.wheel(-scroll_amount, 0)
            
            await asyncio.sleep(0.5)
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É {direction}"}
        
        elif action == "scroll_at":
            x = args.get("x", 0)
            y = args.get("y", 0)
            direction = args.get("direction", "down")
            magnitude = args.get("magnitude", 800)
            
            actual_x = int(x / 1000 * screen_width)
            actual_y = int(y / 1000 * screen_height)
            actual_magnitude = int(magnitude / 1000 * screen_height)
            
            # –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            await page.mouse.move(actual_x, actual_y)
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å
            if direction == "down":
                await page.mouse.wheel(0, actual_magnitude)
            elif direction == "up":
                await page.mouse.wheel(0, -actual_magnitude)
            elif direction == "right":
                await page.mouse.wheel(actual_magnitude, 0)
            elif direction == "left":
                await page.mouse.wheel(-actual_magnitude, 0)
            
            await asyncio.sleep(0.5)
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∏–ª —ç–ª–µ–º–µ–Ω—Ç at ({x}, {y}) {direction} –Ω–∞ {magnitude}"}
        
        # ==================== DRAG & DROP ====================
        
        elif action == "drag_and_drop":
            x = args.get("x", 0)
            y = args.get("y", 0)
            dest_x = args.get("destination_x", 0)
            dest_y = args.get("destination_y", 0)
            
            start_x = int(x / 1000 * screen_width)
            start_y = int(y / 1000 * screen_height)
            end_x = int(dest_x / 1000 * screen_width)
            end_y = int(dest_y / 1000 * screen_height)
            
            # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            await page.mouse.move(start_x, start_y)
            await page.mouse.down()
            await asyncio.sleep(0.2)
            await page.mouse.move(end_x, end_y, steps=10)
            await asyncio.sleep(0.2)
            await page.mouse.up()
            
            return {"success": True, "message": f"–ü–µ—Ä–µ—Ç–∞—â–∏–ª –∏–∑ ({x}, {y}) –≤ ({dest_x}, {dest_y})"}
        
        # ==================== –û–ñ–ò–î–ê–ù–ò–ï ====================
        
        elif action == "wait_5_seconds":
            await asyncio.sleep(5)
            return {"success": True, "message": "–ñ–¥–∞–ª 5 —Å–µ–∫—É–Ω–¥"}
        
        # ==================== –ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –î–ï–ô–°–¢–í–ò–ï ====================
        
        else:
            return {"success": False, "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"}
    
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {str(e)}"
        print(f"  ‚ùå {error_msg}")
        return {"success": False, "message": error_msg, "url": page.url}


# ==================== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ê–ì–ï–ù–¢–ê ====================

async def run_computer_use_agent(task: str, max_steps: int = 20):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å Computer Use –º–æ–¥–µ–ª—å—é.
    
    Args:
        task: –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç)
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    print("=" * 70)
    print("üöÄ –ó–∞–ø—É—Å–∫ Computer Use –∞–≥–µ–Ω—Ç–∞")
    print("=" * 70)
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    print(f"‚öôÔ∏è  –ú–æ–¥–µ–ª—å: gemini-2.5-computer-use-preview-10-2025")
    print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {max_steps}")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Google Generative AI
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Computer Use tool
    config = GenerateContentConfig(
        tools=[
            Tool(
                computer_use=ComputerUse(
                    environment=genai.types.Environment.ENVIRONMENT_BROWSER
                )
            )
        ],
        temperature=0.3,
        max_output_tokens=4096,
    )
    
    # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1440x900 –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    SCREEN_WIDTH = 1440
    SCREEN_HEIGHT = 900
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Playwright
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(
        headless=False,  # –í–∏–¥–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        args=['--start-maximized']
    )
    context = await browser.new_context(
        viewport={'width': SCREEN_WIDTH, 'height': SCREEN_HEIGHT},
        locale='ru-RU',
        timezone_id='Europe/Moscow'
    )
    page = await context.new_page()
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    await page.goto("about:blank")
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = []
    
    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å –∑–∞–¥–∞—á–µ–π
    initial_prompt = f"""
–¢—ã - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

{task}

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Computer Use tool –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–æ–º.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: navigate, click, type, scroll, press_key, wait, get_text.

–ü–ª–∞–Ω–∏—Ä—É–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–π –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ —Å–æ–æ–±—â–∞–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
–ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–ø–∏—à–∏ –∏—Ç–æ–≥ –∏ –∑–∞–≤–µ—Ä—à–∞–π —Ä–∞–±–æ—Ç—É.
"""
    
    print(f"\nüí¨ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    try:
        step = 0
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –∑–∞–¥–∞—á–∞ + –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_bytes = await page.screenshot(type="png", full_page=False)
        history = [
            Content(
                role="user",
                parts=[
                    Part.from_text(text=initial_prompt),
                    Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                ]
            )
        ]
        
        while step < max_steps:
            step += 1
            print(f"\n{'=' * 70}")
            print(f"üîÑ –®–ê–ì {step}/{max_steps}")
            print(f"{'=' * 70}")
            
            # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            print("üß† –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            response = await asyncio.to_thread(
                client.models.generate_content,
                model=model_name,
                contents=history,
                config=config
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if not response.candidates or not response.candidates[0].content.parts:
                print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            model_content = response.candidates[0].content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ parts –≤ –æ—Ç–≤–µ—Ç–µ
            has_tool_calls = False
            has_text = False
            tool_responses = []
            
            for part in model_content.parts:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç –º–æ–¥–µ–ª–∏
                if hasattr(part, 'text') and part.text:
                    has_text = True
                    print(f"\nüí≠ –ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏:")
                    print(f"   {part.text[:500]}...")
                
                # Tool call (–¥–µ–π—Å—Ç–≤–∏–µ)
                if hasattr(part, 'function_call') and part.function_call:
                    has_tool_calls = True
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
                    result = await execute_computer_use_action(
                        page, 
                        part.function_call,
                        SCREEN_WIDTH,
                        SCREEN_HEIGHT
                    )
                    
                    print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('message', result)}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    tool_responses.append(
                        Part.from_function_response(
                            name=part.function_call.name,
                            response=result
                        )
                    )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    await asyncio.sleep(1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            history.append(model_content)
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ tool_calls, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            if tool_responses:
                # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot_bytes = await page.screenshot(type="png", full_page=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º function_response + —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –æ–¥–∏–Ω user turn
                history.append(
                    Content(
                        role="user",
                        parts=tool_responses + [
                            Part(inline_data=Blob(mime_type="image/png", data=screenshot_bytes))
                        ]
                    )
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ—Ç tool_calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if has_text and not has_tool_calls:
                print("\n" + "=" * 70)
                print("‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                print("=" * 70)
                print(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                for part in model_content.parts:
                    if hasattr(part, 'text') and part.text:
                        print(part.text)
                break
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ tool_calls
            if not has_text and not has_tool_calls:
                print("\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –¥–µ–π—Å—Ç–≤–∏–π")
                break
        
        else:
            print(f"\n‚è±Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = Path("logs") / f"computer_use_final_{timestamp}.png"
        screenshot_path.parent.mkdir(exist_ok=True)
        await page.screenshot(path=str(screenshot_path), full_page=True)
        print(f"\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        await asyncio.sleep(3600)  # 1 —á–∞—Å
    
    except KeyboardInterrupt:
        print("\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print("\nüßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        await browser.close()
        await playwright.stop()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ")


# ==================== –ó–ê–ü–£–°–ö ====================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    task = """
–û—Ç–∫—Ä–æ–π —Å–∞–π—Ç yandex.ru –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é.
–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å –∫—É—Ä—Å, —Å–æ–æ–±—â–∏ –º–Ω–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
"""
    
    await run_computer_use_agent(task, max_steps=15)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    except RuntimeError as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "Event loop is closed" –≤ Windows
        if "Event loop is closed" not in str(e):
            raise