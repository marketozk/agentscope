"""
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∫ test_agent3_air.py
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç + –∫–æ–¥ –≤ GPT-5 Pro –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç
"""
import os
import json
import requests
from pathlib import Path
from datetime import datetime

# API –∫–ª—é—á OpenAI
API_KEY = os.environ.get("OPENAI_API_KEY", "your-api-key-here")

def find_latest_prompt():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    current_dir = Path(__file__).parent
    prompt_files = list(current_dir.glob("optimized_prompt_self_learning_*.txt"))
    
    if not prompt_files:
        raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
    latest = max(prompt_files, key=lambda p: p.stat().st_mtime)
    return latest


def read_prompt_file(prompt_path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(prompt_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)
    # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    lines = content.split('\n')
    start_idx = 0
    
    for i, line in enumerate(lines):
        if line.strip().startswith('–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç') or line.strip().startswith('–ó–∞–¥–∞—á–∞:'):
            start_idx = i
            break
    
    # –ò—â–µ–º –∫–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞ (–ø–µ—Ä–µ–¥ —Å–µ–∫—Ü–∏–µ–π "–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨")
    end_idx = len(lines)
    for i, line in enumerate(lines):
        if '–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨' in line or '=' * 40 in line and i > start_idx + 10:
            end_idx = i
            break
    
    prompt = '\n'.join(lines[start_idx:end_idx]).strip()
    return prompt


def read_code_file(code_path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç –∫–æ–¥ test_agent3_air.py"""
    with open(code_path, 'r', encoding='utf-8') as f:
        return f.read()


def compress_code(code: str) -> str:
    """–°–∂–∏–º–∞–µ—Ç –∫–æ–¥: —É–±–∏—Ä–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    lines = code.split('\n')
    compressed = []
    
    for line in lines:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line.strip():
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (docstrings –±–æ–ª–µ–µ 2 —Å—Ç—Ä–æ–∫)
        if '"""' in line or "'''" in line:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ docstrings (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            if line.strip().startswith('"""') or line.strip().startswith("'''"):
                compressed.append(line.split('"""')[0] + '"""..."""' if '"""' in line else line.split("'''")[0] + "'''...'''")
                continue
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if '#' in line:
            code_part = line.split('#')[0]
            comment = line.split('#')[1] if len(line.split('#')) > 1 else ''
            if len(comment) > 50:
                line = code_part + '# ' + comment[:47] + '...'
        
        compressed.append(line)
    
    return '\n'.join(compressed)


def send_to_gpt5_pro(prompt: str, code: str, max_tokens: int = 30000) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –∫–æ–¥ –≤ GPT-5 Pro
    
    Args:
        prompt: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∑–∞–¥–∞—á–µ–π
        code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ test_agent3_air.py
        max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        
    Returns:
        –û—Ç–≤–µ—Ç –æ—Ç GPT-5 Pro
    """
    # gpt-5-pro —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ v1/responses!
    url = "https://api.openai.com/v1/responses"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –°–∂–∏–º–∞–µ–º –∫–æ–¥
    print("\nüóúÔ∏è  –°–∂–∞—Ç–∏–µ –∫–æ–¥–∞...")
    original_size = len(code)
    compressed_code = compress_code(code)
    compressed_size = len(compressed_code)
    saved = original_size - compressed_size
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {compressed_size} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {saved} —Å–∏–º–≤–æ–ª–æ–≤ ({saved*100//original_size}%)")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_message = f"""{prompt}

---

–ö–æ–¥ test_agent3_air.py (—Å–∂–∞—Ç—ã–π):

```python
{compressed_code}
```

---

–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è.
"""
    
    # –î–ª—è v1/responses –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'input' –≤–º–µ—Å—Ç–æ 'messages'
    payload = {
        "model": "gpt-5-pro",
        "input": [
            {
                "role": "user",
                "content": user_message
            }
        ]
    }
    
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-5 Pro...")
    print(f"   –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –î–ª–∏–Ω–∞ –∫–æ–¥–∞ (—Å–∂–∞—Ç–æ–≥–æ): {compressed_size} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞: {max_tokens}")
    print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç, —Ç–∞–π–º–∞—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω)...")
    
    # –£–±–∏—Ä–∞–µ–º timeout - –ø—É—Å—Ç—å –∂–¥–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ
    response = requests.post(url, headers=headers, json=payload)
    
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")


def save_response(response_data: dict, output_path: Path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç GPT-5 –≤ —Ñ–∞–π–ª"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è v1/responses –æ—Ç–≤–µ—Ç –≤ 'output')
    if 'output' in response_data:
        answer = response_data['output']
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–æ–∫ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        if isinstance(answer, list):
            answer = '\n\n'.join(str(item) for item in answer)
    elif 'choices' in response_data and len(response_data['choices']) > 0:
        answer = response_data['choices'][0]['message']['content']
    else:
        answer = json.dumps(response_data, indent=2, ensure_ascii=False)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("üß† –û–¢–í–ï–¢ GPT-5 PRO: –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø –î–õ–Ø test_agent3_air.py\n")
        f.write("=" * 80 + "\n")
        f.write(f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–ú–æ–¥–µ–ª—å: gpt-5-pro\n")
        f.write("=" * 80 + "\n\n")
        f.write(answer)
        f.write("\n\n" + "=" * 80 + "\n")
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write("=" * 80 + "\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if 'usage' in response_data:
            usage = response_data['usage']
            f.write(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('prompt_tokens', 'N/A')}\n")
            f.write(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('completion_tokens', 'N/A')}\n")
            f.write(f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}\n")
    
    print(f"\nüíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
    
    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç
    json_path = output_path.with_suffix('.json')
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(response_data, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {json_path}")
    
    return answer


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("\n" + "=" * 80)
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø –ö test_agent3_air.py")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if API_KEY == "your-api-key-here" or not API_KEY:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏ API –∫–ª—é—á:")
        print("   Windows (PowerShell): $env:OPENAI_API_KEY='sk-...'")
        return
    
    print(f"\n‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {API_KEY[:10]}...{API_KEY[-4:]}")
    
    try:
        # –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        print("\nüìù –®–∞–≥ 1: –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
        prompt_path = find_latest_prompt()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {prompt_path.name}")
        
        # –®–∞–≥ 2: –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç
        print("\nüìñ –®–∞–≥ 2: –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...")
        prompt = read_prompt_file(prompt_path)
        print(f"   ‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –®–∞–≥ 3: –ß–∏—Ç–∞–µ–º –∫–æ–¥
        print("\nüìñ –®–∞–≥ 3: –ß—Ç–µ–Ω–∏–µ test_agent3_air.py...")
        code_path = Path(__file__).parent / "test_agent3_air.py"
        
        if not code_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {code_path}")
        
        code = read_code_file(code_path)
        print(f"   ‚úÖ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(code)} —Å–∏–º–≤–æ–ª–æ–≤, ~{len(code.split(chr(10)))} —Å—Ç—Ä–æ–∫)")
        
        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT-5 Pro
        print("\nüöÄ –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GPT-5 Pro...")
        print("   ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã...")
        
        # max_tokens=30000 - –∂–¥–µ–º –æ—Ç–≤–µ—Ç –º–∏–Ω–∏–º—É–º –º–∏–Ω—É—Ç—É (rate limit)
        response = send_to_gpt5_pro(prompt, code, max_tokens=30000)
        
        print("\n   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
        
        # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        print("\nüíæ –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = Path(__file__).parent / f"gpt5_self_learning_solution_{timestamp}.txt"
        
        answer = save_response(response, output_path)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("=" * 80)
        print(f"\nüìÑ –§–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º: {output_path}")
        print(f"üìÑ JSON –æ—Ç–≤–µ—Ç: {output_path.with_suffix('.json')}")
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        if 'usage' in response:
            usage = response['usage']
            print(f"   –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('prompt_tokens', 'N/A')}")
            print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('completion_tokens', 'N/A')}")
            print(f"   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
        
        print("\nüìã –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
        print(f"   1. –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª: {output_path.name}")
        print("   2. –ò–∑—É—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
        print("   3. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ test_agent3_air.py")
        print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –Ω–∞ 5-10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö")
        print("   5. –ù–∞–±–ª—é–¥–∞–π –∫–∞–∫ –∞–≥–µ–Ω—Ç —É—á–∏—Ç—Å—è –∏ —É–ª—É—á—à–∞–µ—Ç—Å—è!")
        
        # –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞
        print("\n" + "=" * 80)
        print("üìÑ –ü–†–ï–í–¨–Æ –û–¢–í–ï–¢–ê GPT-5 PRO (–ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫):")
        print("=" * 80)
        preview_lines = answer.split('\n')[:50]
        print('\n'.join(preview_lines))
        if len(answer.split('\n')) > 50:
            print("\n... (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ —Ñ–∞–π–ª–µ) ...")
        print("=" * 80)
        
    except FileNotFoundError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–£–±–µ–¥–∏—Å—å —á—Ç–æ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω create_self_learning_prompt.py")
        print("   2. –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª optimized_prompt_self_learning_*.txt")
        print("   3. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª test_agent3_air.py –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
