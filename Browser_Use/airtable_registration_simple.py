"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Airtable
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: Single Task - –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ –∞–≥–µ–Ω—Ç—É

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞
- –ê–≥–µ–Ω—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
- –ú–µ–Ω—å—à–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π flow –¥–ª—è LLM
"""
import asyncio
import random
from pathlib import Path
from browser_use import Agent
from dotenv import load_dotenv
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import (
    get_app_config,
    get_llm,
    wait_for_rate_limit,
    register_api_request,
    print_api_stats
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_PATH = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=ENV_PATH)


def generate_user_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    first_names = ["Alex", "Sam", "Jordan", "Taylor", "Casey", "Morgan", "Riley", "Avery"]
    last_names = ["Johnson", "Smith", "Brown", "Davis", "Wilson", "Moore", "Taylor", "Anderson"]
    
    first_name = random.choice(first_names)
    last_name = random.choice(last_names)
    full_name = f"{first_name} {last_name}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    word = random.choice(["Sunny", "Happy", "Lucky", "Bright", "Smart", "Quick", "Fresh", "Cool"])
    number = random.randint(100, 999)
    special = random.choice(["!", "@", "#", "$"])
    password = f"{word}{number}{special}"
    
    return full_name, password


def save_credentials(email, full_name, password):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"airtable_account_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=== AIRTABLE REGISTRATION SUCCESS ===\n")
        f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Email: {email}\n")
        f.write(f"Full Name: {full_name}\n")
        f.write(f"Password: {password}\n")
        f.write("=" * 40 + "\n")
    
    print(f"\nüíæ Credentials saved to: {filename}")
    return filename


async def register_airtable_simple(max_retries=3):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Airtable - –≤—Å–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    
    Args:
        max_retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    print("\nüöÄ Starting Airtable Registration (Simple Version)")
    print("=" * 60)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    full_name, password = generate_user_data()
    
    print(f"üìù Generated user data:")
    print(f"   Name: {full_name}")
    print(f"   Password: {password}")
    print(f"‚öôÔ∏è  Max retries: {max_retries}")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –û–î–ò–ù –±–æ–ª—å—à–æ–π task —Å–æ –≤—Å–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
    task = f"""
You are automating an Airtable registration process. Follow these steps carefully:

CRITICAL: Data Format Requirements
- Email field: ONLY email address (format: xxx@xxx.xxx) - NO name, NO extra text
- Full name field: ONLY full name - NO email, NO extra text
- Password field: ONLY password - NO email, NO name
DO NOT mix up the fields or put multiple values in one field!

STEP 1: Open Airtable Registration
- Navigate to https://airtable.com/invite/r/ovoAP1zR
- Wait for the page to fully load (5 seconds minimum)

STEP 2: Get Temporary Email
- Open https://temp-mail.io/ru in a NEW TAB (not a new window)
- Wait for temp-mail page to fully load (at least 5 seconds)
- IMPORTANT: The email address is visible on the page in multiple ways:
  * There might be an input field with the email
  * There might be a text element showing the email
  * Use your vision capability to find any text matching email format (xxx@xxx.xxx)
  * The email is usually displayed prominently near the top of the page
- Copy the temporary email address you find
- Remember this email - you will use it in the registration form

STEP 3: Fill Registration Form
- Switch back to the Airtable tab (first tab)
- Fill in the registration form with these credentials:
  * Email address field: [use ONLY the email you got from temp-mail, format: xxx@xxx.xxx]
  * Full name field: {full_name}
  * Password field: {password}
- VALIDATION - Before submitting, verify each field:
  * Email field contains ONLY email (no name, no extra text, just email address)
  * Full name field contains ONLY the name: {full_name}
  * Password field contains ONLY the password: {password}
  * If any field has wrong data, clear it and enter correct data
- Find and click the "Sign up" or "Create account" button
- IMPORTANT: After clicking, verify that the button was pressed successfully:
  * Wait 3-5 seconds for the page to react
  * Check if the page changed (new URL, loading indicator, or success message)
  * If you see an error message about invalid data, report it and try to fix it
  * If nothing happens, try clicking the button again
  * Only proceed to next step when you confirm the form was submitted successfully

STEP 4: Wait for Confirmation Email
- Switch to the temp-mail.io tab
- You should now wait for Airtable to send a confirmation email
- Refresh the temp-mail page every 10 seconds
- Check for an email from Airtable (subject usually contains "Confirm" or "Verify")
- Maximum waiting time: 2 minutes (12 checks total)
- If you see the email from Airtable, proceed to next step
- If no email arrives after 2 minutes, report this issue

STEP 5: Confirm Email
- Open the confirmation email from Airtable
- Find and click the confirmation button/link (usually says "Confirm email" or "Verify email")
- Wait for the confirmation page to load (3-5 seconds)
- IMPORTANT: Verify that email confirmation was successful:
  * Look for confirmation messages like "verified", "confirmed", "success"
  * Check if you were redirected to Airtable dashboard or welcome page
  * If you see an error, report it
  * Only mark as success when you see clear confirmation

FINAL STEP: Report Success
- Return a summary in this exact format:
  "SUCCESS: Registration completed
   Email: [the temporary email address you used]
   Name: {full_name}
   Password: {password}
   Status: All steps completed successfully"

- If any step failed, report it in this format:
  "FAILED: Registration incomplete
   Failed at: [step name]
   Reason: [describe what went wrong]
   Email used: [if you got the email]"

IMPORTANT NOTES:
- Use "NEW TAB" when opening temp-mail, not a new window
- DO NOT MIX UP FORM FIELDS - each field should contain ONLY its designated data:
  * Email field = email ONLY
  * Name field = name ONLY  
  * Password field = password ONLY
- Always verify button clicks - wait and check if action succeeded
- Validate form data before submitting - check that each field has correct data
- Be patient - wait for pages to load fully before proceeding
- After each critical action (button click, form submit), verify success
- If you see validation errors, fix the data and try again
- If something fails, describe what went wrong clearly
- The temporary email is critical - make sure to extract and use it correctly

Begin the registration process now.
"""

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∑–∞–¥–∞—á–µ–π –∏ retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
    print("\nü§ñ Starting browser agent with complete task...")
    print("=" * 60)
    
    llm = get_llm()
    
    # Retry loop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 503 –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    for attempt in range(1, max_retries + 1):
        try:
            print(f"\nüîÑ Attempt {attempt}/{max_retries}...")
            
            agent = Agent(task=task, llm=llm, use_vision=True)
            result = await agent.run()
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            print("\n" + "=" * 60)
            print("üìä AGENT RESULT:")
            print("=" * 60)
            print(result)
            print("=" * 60)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å email –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_str = str(result)
            if "SUCCESS" in result_str.upper():
                print("\n‚úÖ Registration appears successful!")
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ email –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                lines = result_str.split('\n')
                email_line = [line for line in lines if 'Email:' in line or '@' in line]
                
                if email_line:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å email
                    import re
                    email_match = re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', result_str)
                    if email_match:
                        email = email_match.group(0)
                        print(f"\nüìß Extracted email: {email}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        filename = save_credentials(email, full_name, password)
                        
                        print("\n" + "=" * 60)
                        print("‚úÖ REGISTRATION COMPLETED SUCCESSFULLY!")
                        print("=" * 60)
                        print(f"üìß Email: {email}")
                        print(f"üë§ Name: {full_name}")
                        print(f"üîë Password: {password}")
                        print(f"üíæ Saved to: {filename}")
                        print("=" * 60)
                    else:
                        print("\n‚ö†Ô∏è  Could not extract email from result")
                        print("But registration might still be successful - check the result above")
            else:
                print("\n‚ö†Ô∏è  Registration status unclear - check the result above")
            
            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ retry loop
            break
            
        except Exception as e:
            error_msg = str(e)
            print(f"\n‚ö†Ô∏è  Attempt {attempt} failed: {error_msg[:200]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "503" in error_msg or "overloaded" in error_msg.lower():
                print("   üîÑ Model is overloaded (503 error)")
            elif "429" in error_msg or "RESOURCE_EXHAUSTED" in error_msg:
                print("   ‚è≥ Rate limit exceeded (429 error)")
            else:
                print("   ‚ùå Unknown error")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∂–¥–µ–º –ø–µ—Ä–µ–¥ retry
            if attempt < max_retries:
                wait_time = 10 * attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 10, 20, 30 —Å–µ–∫—É–Ω–¥
                print(f"   ‚è≥ Waiting {wait_time} seconds before retry...")
                await asyncio.sleep(wait_time)
            else:
                print(f"\n‚ùå All {max_retries} attempts failed")
                raise
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    print("\nüí§ Browser will stay open. Press Ctrl+C to close...")
    await asyncio.sleep(86400)  # 24 hours


async def main():
    """Main entry point"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_app_config()
        config.print_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if not await wait_for_rate_limit():
            print("‚õî API rate limit reached. Try again later.")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        register_api_request()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å retry (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –ø–æ–ø—ã—Ç–∫–∏)
        # –ü—Ä–∏ 503 –æ—à–∏–±–∫–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await register_airtable_simple(max_retries=3)
        
    except KeyboardInterrupt:
        print("\nüëã Interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Critical error: {e}")
    finally:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_api_stats()


if __name__ == "__main__":
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë     AIRTABLE REGISTRATION - SIMPLE VERSION                  ‚ïë
‚ïë     Single Task Strategy                                    ‚ïë
‚ïë                                                              ‚ïë
‚ïë  This version uses ONE big task for the entire process.     ‚ïë
‚ïë  The agent handles all steps autonomously.                  ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    asyncio.run(main())
