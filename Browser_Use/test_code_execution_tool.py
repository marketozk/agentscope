"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Code Execution Tool
"""

import json
from pathlib import Path

# –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏
def check_model_requires_code_execution(model_string: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å Code Execution Tool"""
    return "computer-use" in model_string.lower()


def test_model_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Ç—Ä–µ–±—É—é—â–∏—Ö Code Execution Tool")
    print("="*70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥–µ–ª–µ–π
    config_file = Path(__file__).parent / "models_config.json"
    with open(config_file, 'r', encoding='utf-8') as f:
        config_data = json.load(f)
    
    models = config_data.get("models", {})
    
    print("\nüìã –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ú–û–î–ï–õ–ï–ô:\n")
    
    for model_name, model_config in models.items():
        model_string = model_config.get("model_string", "")
        enabled = model_config.get("enabled", False)
        requires_tool = check_model_requires_code_execution(model_string)
        
        status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê" if enabled else "‚ö™ –í—ã–∫–ª—é—á–µ–Ω–∞"
        tool_status = "üîß –¢—Ä–µ–±—É–µ—Ç Code Execution Tool" if requires_tool else "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
        
        print(f"ü§ñ {model_name}")
        print(f"   –°—Ç–∞—Ç—É—Å: {status}")
        print(f"   Model String: {model_string}")
        print(f"   –¢–∏–ø: {tool_status}")
        
        if enabled and requires_tool:
            print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –º–æ–¥–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!")
        
        print()
    
    print("="*70)
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    active_models = [
        (name, cfg) for name, cfg in models.items() 
        if cfg.get("enabled", False)
    ]
    
    if active_models:
        model_name, model_config = active_models[0]
        model_string = model_config.get("model_string", "")
        
        print(f"\n‚úÖ –ê–ö–¢–ò–í–ù–ê–Ø –ú–û–î–ï–õ–¨: {model_name}")
        print(f"   Model String: {model_string}")
        
        if check_model_requires_code_execution(model_string):
            print(f"\nüí° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Code Execution Tool:")
            print(f"""
   import google.generativeai as genai
   from google.generativeai.types import Tool
   
   genai.configure(api_key=api_key)
   code_execution_tool = Tool.from_code_execution()
   
   llm = genai.GenerativeModel(
       "{model_string}",
       tools=[code_execution_tool]
   )
            """)
        else:
            print(f"\n‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:")
            print(f"""
   from browser_use.llm.google import ChatGoogle
   
   llm = ChatGoogle(
       model="{model_string}",
       temperature=0.2,
       api_key=api_key
   )
            """)
    else:
        print("\n‚ö†Ô∏è  –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
    
    print("\n" + "="*70)


if __name__ == "__main__":
    test_model_detection()
