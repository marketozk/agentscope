

Ты — эксперт по Python, машинному обучению и интеграции самообучающихся систем в существующие автоматизационные агенты. Твоя задача — разработать и подробно описать элегантное решение по добавлению **самообучающегося механизма** в существующий скрипт `test_agent3_air.py` (~2600 строк), который:

- Использует **Gemini Computer Use API** и **Playwright** для автоматической регистрации аккаунтов в **Airtable**;
- Уже стабильно выполняет процесс: получение email → регистрация → подтверждение → онбординг;
- Работает корректно, но **всегда повторяет одну и ту же последовательность действий**.

### Цель:
Добавить систему самообучения, чтобы агент:
1. Сохранял результаты выполнения (время, успешность, ошибки, надёжность селекторов);
2. Анализировал накопленные данные между запусками (через JSON, SQLite или другой формат);
3. Автоматически подбирал оптимальные параметры (селекторы, таймауты, стратегии действий);
4. Балансировал между эксплуатацией уже найденных эффективных решений и экспериментами с новыми;
5. Делал всё это **без переписывания архитектуры** и **без изменения интерфейса функции** `register_airtable_account`.

### Условия:
- Минимизировать вмешательство в существующую логику (дополнять, не ломать);
- Не менять внешний интерфейс скрипта;
- Разрешено использовать декораторы, вспомогательные классы, модули или обёртки;
- Решение должно быть **пошагово интегрируемым**: где именно вставить код, как хранить знания, как использовать их при следующем запуске.

### Формат ответа:
1. Краткое описание архитектуры самообучающей системы (структура, компоненты, потоки данных);
2. Конкретные примеры кода, показывающие:
   - Как логировать метрики;
   - Как сохранять и загружать опыт;
   - Как выбирать оптимальные стратегии при следующем запуске;
3. Подробная инструкция, **куда и как внедрить** предложенные изменения в `test_agent3_air.py`;
4. Объяснение, как агент будет **адаптироваться и улучшаться** с каждым запуском;
5. Дополнительные рекомендации для масштабирования и улучшения в будущем.

Подай ответ так, чтобы разработчик мог практически вставить предложенные куски кода в существующий проект без нарушения текущего функционала.


================================================================================
КАК ИСПОЛЬЗОВАТЬ:
================================================================================
1. Скопируй этот промпт целиком
2. Отправь GPT-5 вместе с содержимым test_agent3_air.py
3. GPT-5 добавит систему самообучения в код
4. Протестируй новый код на 2-3 регистрациях
5. Система начнет собирать метрики и оптимизироваться
================================================================================
