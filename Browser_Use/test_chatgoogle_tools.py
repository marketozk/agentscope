"""
–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ ChatGoogle –ø–µ—Ä–µ–¥–∞—á—É tools
"""
import os
from dotenv import load_dotenv
from browser_use.llm.google import ChatGoogle
import inspect

load_dotenv()
API_KEY = os.getenv("GOOGLE_API_KEY")

print("=" * 70)
print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï ChatGoogle")
print("=" * 70)

# –°–∏–≥–Ω–∞—Ç—É—Ä–∞ ChatGoogle.__init__
print("\nüìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞ ChatGoogle.__init__:")
sig = inspect.signature(ChatGoogle.__init__)
print(f"   {sig}")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
for param_name, param in sig.parameters.items():
    if param_name != 'self':
        print(f"   - {param_name}: {param.annotation} = {param.default}")

# –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å tools
print("\nüß™ –¢–ï–°–¢: ChatGoogle —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º tools")
try:
    llm = ChatGoogle(
        model="gemini-2.5-computer-use-preview-10-2025",
        temperature=0.2,
        api_key=API_KEY,
        tools=[{'code_execution': {}}]
    )
    print("   ‚úÖ –£–°–ü–ï–•! ChatGoogle –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä tools")
    print(f"   –¢–∏–ø: {type(llm)}")
    print(f"   Provider: {llm.provider if hasattr(llm, 'provider') else '–ù–ï–¢ –ê–¢–†–ò–ë–£–¢–ê'}")
except TypeError as e:
    print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
    print("   ChatGoogle –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä tools")

print("\n" + "=" * 70)
