"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Airtable —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –æ—Ç temp-mail.io

–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –û–¥–∏–Ω Agent + add_new_task() –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
"""
import asyncio
import os
import random
import string
import re
from pathlib import Path
from browser_use import Agent
from browser_use.browser.profile import BrowserProfile
from dotenv import load_dotenv
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å rate limiting
from config import (
    get_app_config,
    get_llm,
    get_profile_path,
    wait_for_rate_limit,
    register_api_request,
    print_api_stats
)

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from browser_use_helpers import extract_email_from_result, is_valid_email

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_PATH = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=ENV_PATH)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
STEP_TIMEOUT = 120  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ Agent (—Å–µ–∫—É–Ω–¥—ã)
RETRY_DELAY_SHORT = 3  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
RETRY_DELAY_MEDIUM = 5  # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
RETRY_DELAY_LONG = 10  # –î–ª–∏–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
MAX_EMAIL_CHECKS = 12  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—á—Ç—ã (2 –º–∏–Ω—É—Ç—ã)
MAX_BUTTON_CLICKS = 3  # –ú–∞–∫—Å–∏–º—É–º –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ
BROWSER_KEEP_ALIVE = 86400  # –î–µ—Ä–∂–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º (24 —á–∞—Å–∞)


class AirtableRegistration:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Airtable —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –æ—Ç temp-mail.io
    
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –û–¥–∏–Ω Agent –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ (add_new_task) + retry mechanism
    """
    
    def __init__(self, llm, max_retries=5):
        self.llm = llm
        self.state = "INIT"
        self.temp_email = None
        self.password = None
        self.full_name = None
        self.max_retries = max_retries
        self.agent = None  # –ï–¥–∏–Ω—ã–π Agent –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤
        self.browser_profile = BrowserProfile(keep_alive=True)  # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º!
        
    def generate_user_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
        first_names = ["Alex", "Sam", "Jordan", "Taylor", "Casey", "Morgan", "Riley", "Avery"]
        last_names = ["Johnson", "Smith", "Brown", "Davis", "Wilson", "Moore", "Taylor", "Anderson"]
        
        first_name = random.choice(first_names)
        last_name = random.choice(last_names)
        self.full_name = f"{first_name} {last_name}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã–π)
        word = random.choice(["Sunny", "Happy", "Lucky", "Bright", "Smart", "Quick", "Fresh", "Cool"])
        number = random.randint(100, 999)
        special = random.choice(["!", "@", "#", "$"])
        self.password = f"{word}{number}{special}"
        
        print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ò–º—è: {self.full_name}")
        print(f"   –ü–∞—Ä–æ–ª—å: {self.password}")
    
    async def get_temp_email(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å temp-mail.io"""
        print("\nüìß –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É...")
        
        for attempt in range(1, self.max_retries + 1):
            try:
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}...")
                
                task = """
                Task: Get temporary email address
                
                Steps:
                1. Open NEW tab with Ctrl+T (important: TAB not window)
                2. Go to https://temp-mail.org/en/
                3. Wait 5 seconds
                4. Find the email address on page (looks like: xxxxx@xxxxx.xxx)
                5. Copy it
                
                Return format: Just the email address, nothing else
                Example: user123@tempmail.com
                
                Note: temp-mail.org is more reliable than temp-mail.io
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                self.agent.add_new_task(task)
                result = await asyncio.wait_for(
                    self.agent.run(),
                    timeout=STEP_TIMEOUT
                )
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º email
                email = extract_email_from_result(result)
                
                if email and is_valid_email(email):
                    self.temp_email = email
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω email: {self.temp_email}")
                    return True
                
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:150]}...")
                
            except asyncio.TimeoutError:
                print(f"‚è±Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: —Ç–∞–π–º–∞—É—Ç ({STEP_TIMEOUT}—Å)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—à–∏–±–∫–∞ - {str(e)[:150]}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            if attempt < self.max_retries:
                print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {RETRY_DELAY_SHORT} —Å–µ–∫...")
                await asyncio.sleep(RETRY_DELAY_SHORT)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    async def fill_registration_form(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Airtable"""
        print("\nüìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        for attempt in range(1, self.max_retries + 1):
            try:
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}...")
                
                task = f"""
                Task: Fill Airtable registration form carefully
                
                Steps:
                1. Switch to the Airtable tab (first tab)
                2. Wait 2 seconds
                3. CLICK on the email input field (first input)
                4. Clear the field completely
                5. Type email slowly: {self.temp_email}
                6. Wait 1 second
                7. CLICK on the full name input field (second input)
                8. Clear the field completely
                9. Type name slowly: {self.full_name}
                10. Wait 1 second
                11. CLICK on the password input field (third input)
                12. Clear the field completely
                13. Type password slowly: {self.password}
                14. Wait 2 seconds
                15. CLICK the "Sign up" or "Create account" button
                16. Wait 5 seconds for page reaction
                
                IMPORTANT: 
                - Click each field BEFORE typing
                - Clear field BEFORE entering new data
                - Type slowly (one field at a time)
                
                Return:
                - "SUCCESS" if form submitted (page changed or confirmation visible)
                - "ERROR_INVALID_EMAIL" if email validation error
                - Otherwise: describe what you see
                """
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                self.agent.add_new_task(task)
                result = await asyncio.wait_for(
                    self.agent.run(),
                    timeout=STEP_TIMEOUT
                )
                
                result_str = str(result).upper()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if "ERROR_INVALID_EMAIL" in result_str or "INVALID EMAIL" in result_str:
                    print("‚ö†Ô∏è  –û—à–∏–±–∫–∞: –ø–æ—á—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                    print("   üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø–æ—á—Ç—É...")
                    
                    if await self.get_temp_email():
                        print(f"   ‚úÖ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞: {self.temp_email}")
                        print("   üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã...")
                        continue
                    else:
                        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—á—Ç—É")
                        return False
                
                elif "SUCCESS" in result_str:
                    print("‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    return True
                
                else:
                    print(f"‚ö†Ô∏è  –ù–µ—è—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:200]}")
                
            except asyncio.TimeoutError:
                print(f"‚è±Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: —Ç–∞–π–º–∞—É—Ç ({STEP_TIMEOUT}—Å)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—à–∏–±–∫–∞ - {str(e)[:150]}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            if attempt < self.max_retries:
                print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {RETRY_DELAY_MEDIUM} —Å–µ–∫...")
                await asyncio.sleep(RETRY_DELAY_MEDIUM)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    async def wait_for_confirmation_email(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ temp-mail"""
        print("\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        
        for attempt in range(1, MAX_EMAIL_CHECKS + 1):
            print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ {attempt}/{MAX_EMAIL_CHECKS}...")
            
            # Retry –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
            for retry in range(1, self.max_retries + 1):
                try:
                    check_task = """
                    Switch to temp-mail.io tab.
                    Refresh the page.
                    Check for email from Airtable.
                    
                    Return:
                    - "FOUND" if email from Airtable exists
                    - "NOT_FOUND" if no emails
                    """
                    
                    self.agent.add_new_task(check_task)
                    result = await asyncio.wait_for(
                        self.agent.run(),
                        timeout=STEP_TIMEOUT
                    )
                    
                    result_str = str(result).upper()
                    if "FOUND" in result_str:
                        print("‚úÖ –ü–∏—Å—å–º–æ –Ω–∞–π–¥–µ–Ω–æ!")
                        return True
                    elif "NOT_FOUND" in result_str or "NOT FOUND" in result_str:
                        break  # –ù–æ—Ä–º–∞–ª—å–Ω–æ, –ø–∏—Å–µ–º –ø–æ–∫–∞ –Ω–µ—Ç
                    else:
                        # –ù–µ—è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç - retry
                        print(f"   ‚ö†Ô∏è  Retry {retry}: –Ω–µ—è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç...")
                        if retry < self.max_retries:
                            await asyncio.sleep(2)
                            continue
                        break
                        
                except asyncio.TimeoutError:
                    print(f"   ‚è±Ô∏è  Retry {retry}: —Ç–∞–π–º–∞—É—Ç")
                    if retry < self.max_retries:
                        await asyncio.sleep(2)
                        continue
                    break
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Retry {retry}: –æ—à–∏–±–∫–∞ - {str(e)[:100]}")
                    if retry < self.max_retries:
                        await asyncio.sleep(2)
                        continue
                    break
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if attempt < MAX_EMAIL_CHECKS:
                print(f"   üì≠ –ù–µ—Ç –ø–∏—Å–µ–º, –æ–∂–∏–¥–∞–Ω–∏–µ {RETRY_DELAY_LONG} —Å–µ–∫...")
                await asyncio.sleep(RETRY_DELAY_LONG)
        
        print(f"‚ùå –ü–∏—Å—å–º–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞ {MAX_EMAIL_CHECKS * RETRY_DELAY_LONG // 60} –º–∏–Ω—É—Ç")
        return False
    
    async def confirm_email(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –≤ –ø–∏—Å—å–º–µ"""
        print("\nüîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email...")
        
        for attempt in range(1, self.max_retries + 1):
            try:
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}...")
                
                task = """
                You are on temp-mail.io tab.
                
                Steps:
                1. Open the email from Airtable (click on it)
                2. Find confirmation button/link (usually "Confirm" or "Verify")
                3. Click it and wait for confirmation page
                
                Return:
                - "SUCCESS" if confirmed (words like "verified" or "confirmed")
                - Otherwise: describe what you see
                """
                
                self.agent.add_new_task(task)
                result = await asyncio.wait_for(
                    self.agent.run(),
                    timeout=STEP_TIMEOUT
                )
                
                result_str = str(result).upper()
                if "SUCCESS" in result_str or "VERIFIED" in result_str or "CONFIRMED" in result_str:
                    print("‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                    return True
                
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –Ω–µ—è—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {str(result)[:150]}...")
                
            except asyncio.TimeoutError:
                print(f"‚è±Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: —Ç–∞–π–º–∞—É—Ç ({STEP_TIMEOUT}—Å)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—à–∏–±–∫–∞ - {str(e)[:150]}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            if attempt < self.max_retries:
                print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {RETRY_DELAY_MEDIUM} —Å–µ–∫...")
                await asyncio.sleep(RETRY_DELAY_MEDIUM)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Airtable")
        print("=" * 50)
        print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: max_retries={self.max_retries}, timeout={STEP_TIMEOUT}—Å")
        print("=" * 50)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.generate_user_data()
            
            # –®–∞–≥ 1: –°–æ–∑–¥–∞—ë–º Agent –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º Airtable
            print("\nüìç –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º Airtable")
            open_task = "Open https://airtable.com/invite/r/ovoAP1zR and wait for the page to load."
            self.agent = Agent(
                task=open_task, 
                llm=self.llm, 
                browser_profile=self.browser_profile,  # keep_alive=True!
                use_vision=False,  # –û—Ç–∫–ª—é—á–∞–µ–º vision –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                max_failures=5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º tolerance –∫ ValidationError
            )
            
            await asyncio.wait_for(
                self.agent.run(),
                timeout=STEP_TIMEOUT
            )
            self.state = "AIRTABLE_OPENED"
            print("‚úÖ Airtable –æ—Ç–∫—Ä—ã—Ç")
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É
            print("\nüìç –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É")
            if not await self.get_temp_email():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É")
            self.state = "EMAIL_OBTAINED"
            
            # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            print("\nüìç –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É")
            if not await self.fill_registration_form():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            self.state = "FORM_SUBMITTED"
            
            # –®–∞–≥ 4: –ñ–¥–µ–º –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            print("\nüìç –®–∞–≥ 4: –û–∂–∏–¥–∞–µ–º –ø–∏—Å—å–º–æ")
            if not await self.wait_for_confirmation_email():
                raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            self.state = "EMAIL_RECEIVED"
            
            # –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
            print("\nüìç –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email")
            if not await self.confirm_email():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email")
            self.state = "COMPLETED"
            
            # –£—Å–ø–µ—Ö!
            print("\n" + "=" * 50)
            print("‚úÖ –£–°–ü–ï–•! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print("=" * 50)
            print(f"üìß Email: {self.temp_email}")
            print(f"üë§ –ò–º—è: {self.full_name}")
            print(f"üîë –ü–∞—Ä–æ–ª—å: {self.password}")
            print("=" * 50)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.save_credentials()
            
            # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º
            print(f"\nüí§ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ {BROWSER_KEEP_ALIVE // 3600} —á–∞—Å–æ–≤")
            print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            await asyncio.sleep(BROWSER_KEEP_ALIVE)
            
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            raise
        except asyncio.TimeoutError:
            print(f"\n‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –Ω–∞ —ç—Ç–∞–ø–µ {self.state}")
            raise
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {self.state}: {str(e)}")
            raise
        finally:
            # Cleanup: –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.agent:
                print("\nüßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                try:
                    await self.agent.close()
                    print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def save_credentials(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"airtable_registration_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=== –î–ê–ù–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò AIRTABLE ===\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Email: {self.temp_email}\n")
            f.write(f"–ò–º—è: {self.full_name}\n")
            f.write(f"–ü–∞—Ä–æ–ª—å: {self.password}\n")
            f.write("=" * 40 + "\n")
        
        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = get_app_config()
        config.print_config()
        
        llm = get_llm()
        profile_path = get_profile_path()
    except ValueError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not await wait_for_rate_limit():
        print("‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å API
    register_api_request()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º (5 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    registration = AirtableRegistration(llm, max_retries=5)
    
    try:
        await registration.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_api_stats()


if __name__ == "__main__":
    asyncio.run(main())
