Теперь, когда у нас есть рабочая система самообучения на низком уровне (выбор таймаутов, стратегий навигации, порядка методов), давайте создадим высокоуровневую систему оптимизации промптов.

Задача: использовать CoolPrompt PromptTuner для создания мета-слоя, который будет:
- Анализировать успешные и неуспешные паттерны взаимодействия из базы данных самообучения
- Генерировать оптимизированные промпты для Computer Use API на основе накопленного опыта
- Создавать адаптивные стратегии взаимодействия с различными типами веб-элементов
- Автоматически улучшать промпты для специфичных доменов (temp-mail.org, airtable.com)

Контекст интеграции:
- У нас уже есть SQLite база данных selflearn_airtable.sqlite3 с таблицами runs, actions, params
- Используется Google Gemini Computer Use API через execute_computer_use_action
- CoolPrompt доступен через: from coolprompt.assistant import PromptTuner
- Есть утилиты analyze_learning.py и analyze_strategies.py для анализа данных

Требуется:
1. Механизм извлечения паттернов из базы данных самообучения
2. Интеграция PromptTuner для генерации оптимизированных промптов на основе этих паттернов
3. Система применения сгенерированных промптов в execute_computer_use_action
4. Логирование эффективности новых промптов обратно в базу данных

Цель: создать замкнутый цикл улучшения, где низкоуровневое самообучение питает высокоуровневую оптимизацию промптов, а результаты возвращаются обратно в систему обучения.
