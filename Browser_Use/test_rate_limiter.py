"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Rate Limiter - —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
"""
import asyncio
from config import get_rate_limiter, ModelConfig

async def test_rate_limiting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É rate limiting —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º"""
    
    print("\n" + "="*70)
    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ RATE LIMITER")
    print("="*70)
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
    model_config = ModelConfig.MODELS["gemini-2.5-pro"]  # 5 req/min
    print(f"\nüìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: gemini-2.5-pro")
    print(f"   –õ–∏–º–∏—Ç: {model_config['requests_per_minute']} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É")
    
    # –°–æ–∑–¥–∞–µ–º rate limiter —Å –º–∞–ª—ã–º –ª–∏–º–∏—Ç–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    limiter = get_rate_limiter()
    
    print(f"\nüéØ –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å {model_config['requests_per_minute'] + 3} –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ...")
    print("="*70)
    
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
    for i in range(model_config['requests_per_minute'] + 3):
        print(f"\nüîÑ –ó–∞–ø—Ä–æ—Å #{i+1}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∂–¥—ë–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        can_proceed = await limiter.wait_if_needed()
        
        if not can_proceed:
            print(f"‚õî –ó–∞–ø—Ä–æ—Å #{i+1} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç)")
            break
        
        # "–í—ã–ø–æ–ª–Ω—è–µ–º" –∑–∞–ø—Ä–æ—Å
        limiter.register_request()
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å #{i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = limiter.get_stats()
        print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É: {stats['minute_used']}/{limiter.requests_per_minute}")
        print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞ –¥–µ–Ω—å: {stats['day_used']}/{limiter.requests_per_day}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*70)
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*70)
    limiter.print_stats()
    
    print("\n" + "="*70)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("="*70)
    
    print("\nüí° –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:")
    print("   1. –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
    print("   2. –ù–∞ 6-–º –∑–∞–ø—Ä–æ—Å–µ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–∂–¥–∞–ª–∞ ~60 —Å–µ–∫—É–Ω–¥")
    print("   3. –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏—Å—å")
    print("\nüéØ –í—ã–≤–æ–¥: Rate Limiter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º–ø–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤!")

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è"""
    print("\n" + "="*70)
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ RATE LIMITER (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)")
    print("="*70)
    
    limiter = get_rate_limiter()
    
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    stats = limiter.get_stats()
    print(f"   –ú–∏–Ω—É—Ç–∞: {stats['minute_used']}/{limiter.requests_per_minute}")
    print(f"   –î–µ–Ω—å: {stats['day_used']}/{limiter.requests_per_day}")
    
    print(f"\n2Ô∏è‚É£ –î–µ–ª–∞–µ–º {limiter.requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤...")
    for i in range(limiter.requests_per_minute):
        can_request, reason = limiter.can_make_request()
        if can_request:
            limiter.register_request()
            print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"   ‚õî –ó–∞–ø—Ä–æ—Å {i+1} –æ—Ç–∫–ª–æ–Ω—ë–Ω: {reason}")
    
    print("\n3Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω—ë–Ω):")
    can_request, reason = limiter.can_make_request()
    if can_request:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª!")
    else:
        print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {reason}")
    
    print("\n4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    limiter.print_stats()
    
    print("\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")

if __name__ == "__main__":
    import sys
    
    print("\n" + "="*70)
    print("üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ RATE LIMITING")
    print("="*70)
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
    print("2. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º ~60 —Å–µ–∫)")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2, Enter = 1): ").strip() or "1"
    
    if choice == "2":
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∑–∞–π–º—ë—Ç ~60 —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
        if confirm == 'y':
            asyncio.run(test_rate_limiting())
        else:
            print("\n‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω")
    else:
        asyncio.run(quick_test())
