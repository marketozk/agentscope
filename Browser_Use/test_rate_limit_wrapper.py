"""
–¢–µ—Å—Ç –æ–±–µ—Ä—Ç–∫–∏ RateLimitedLLM
"""
import asyncio
from config import get_llm, get_app_config, print_api_stats
from langchain_core.messages import HumanMessage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ—Ä—Ç–∫—É
import sys
sys.path.insert(0, '.')
from airtable_registration import RateLimitedLLM


async def test_wrapper():
    """–¢–µ—Å—Ç —á—Ç–æ –æ–±–µ—Ä—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RateLimitedLLM\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = get_app_config()
    config.print_config()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π LLM
    original_llm = get_llm()
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º
    wrapped_llm = RateLimitedLLM(original_llm)
    
    print("\nüìç –î–µ–ª–∞–µ–º 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–∑–æ–≤–∞...")
    
    for i in range(3):
        print(f"\n--- –í—ã–∑–æ–≤ {i+1} ---")
        
        messages = [HumanMessage(content=f"Say 'Test {i+1}' and nothing else.")]
        
        try:
            result = await wrapped_llm.ainvoke(messages)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {type(result)}")
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
            if hasattr(result, 'content'):
                print(f"   Content: {result.content[:50]}")
            else:
                print(f"   Response: {str(result)[:100]}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print_api_stats()


if __name__ == "__main__":
    asyncio.run(test_wrapper())
