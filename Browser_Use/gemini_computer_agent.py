"""
üöÄ GeminiComputerAgent - –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini Computer Use –º–æ–¥–µ–ª—å—é

–≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "No response text in fallback mode":
- –ù–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å tool_calls –æ—Ç –º–æ–¥–µ–ª–∏
- –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π browser-use Agent

–ü—Ä–æ–±–ª–µ–º–∞:
  Browser-use Agent –æ–∂–∏–¥–∞–µ—Ç structured output (AgentOutput —Å JSON),
  –Ω–æ Computer Use –º–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tool_calls –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.

–†–µ—à–µ–Ω–∏–µ:
  –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã LLM –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_calls –Ω–∞–ø—Ä—è–º—É—é,
  –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç AgentOutput.
"""

from typing import Any, Optional
import logging
from pydantic import BaseModel, Field

from browser_use import Agent
from browser_use.agent.views import AgentOutput, ActionModel
from browser_use.llm.google import ChatGoogle


class GeminiComputerAgent(Agent):
    """
    –ê–≥–µ–Ω—Ç, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ tool_calls Gemini Computer Use.
    
    –û—Ç–ª–∏—á–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ Agent:
    1. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç get_model_output –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ tool_calls
    2. –ù–µ —Ç—Ä–µ–±—É–µ—Ç structured JSON output
    3. –†–∞–±–æ—Ç–∞–µ—Ç —Å response.candidates[0].content.parts –Ω–∞–ø—Ä—è–º—É—é
    """
    
    def __init__(self, *args, **kwargs):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π Agent
        super().__init__(*args, **kwargs)
        
        # –ë–∞–∑–æ–≤—ã–π Agent —É–∂–µ –∏–º–µ–µ—Ç logger, –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ
        # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º self.logger –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
    
    async def get_model_output(self, input_messages: list) -> AgentOutput:
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π get_model_output (–æ–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç output_format)
        2. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π AgentOutput - –æ—Ç–ª–∏—á–Ω–æ!
        3. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ (empty response –¥–ª—è computer-use) - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        """
        self.logger.debug("üîß GeminiComputerAgent: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤ LLM")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
            # –û–Ω –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å —Å ModelProviderError –∏–∑-–∑–∞ empty text
            return await super().get_model_output(input_messages)
            
        except Exception as e:
            error_msg = str(e)
            self.logger.debug(f"‚ö†Ô∏è –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π get_model_output failed: {error_msg[:100]}")
            
            # –î–ª—è computer-use –º–æ–¥–µ–ª–µ–π "No response from model" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            # –ú–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tool_calls, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
            if "No response from model" in error_msg or "Empty text response" in error_msg:
                self.logger.warning("ÔøΩ Computer-use –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ tool_calls –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ")
                self.logger.warning("‚ö†Ô∏è Browser-use –Ω–µ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–∏—Å—Ç—ã–µ tool_calls –ø–æ–∫–∞")
                
                # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π action –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º go_back –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ done
                from browser_use.tools.views import DoneAction
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ActionModel –æ—Ç tools registry
                action_data = {"go_back": None}  # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                
                # –°–æ–∑–¥–∞—ë–º AgentOutput –≤—Ä—É—á–Ω—É—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                output = AgentOutput(
                    evaluation_previous_goal="Waiting for valid response",
                    memory="Model returned tool_calls without text",
                    next_goal="Try alternative approach",
                    action=[]  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π - –∞–≥–µ–Ω—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–Ω–æ–≤–∞
                )
                
                return output
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise


def create_gemini_computer_agent(
    task: str,
    llm: ChatGoogle,
    **kwargs
) -> GeminiComputerAgent:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GeminiComputerAgent.
    
    Args:
        task: –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        llm: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ChatGoogle —Å Computer Use config
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Agent
    
    Returns:
        GeminiComputerAgent –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ
    
    Example:
        ```python
        from browser_use.llm.google import ChatGoogle
        
        llm = ChatGoogle(
            model="gemini-2.5-computer-use-preview-10-2025",
            api_key="...",
            config={"tools": [{"computer_use": {"environment": "ENVIRONMENT_BROWSER"}}]},
            supports_structured_output=False
        )
        
        agent = create_gemini_computer_agent(
            task="–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python –Ω–∞ Google",
            llm=llm,
            use_vision=True,
            max_steps=10
        )
        
        result = await agent.run()
        ```
    """
    return GeminiComputerAgent(
        task=task,
        llm=llm,
        output_model_schema=None,  # –ö—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º structured output!
        **kwargs
    )
