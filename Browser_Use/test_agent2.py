"""
üéØ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è browser-use —Å Computer Use –º–æ–¥–µ–ª—å—é

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ChatGoogle —Å Computer Use –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
2. –ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ browser-use Agent
3. –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
"""
import os
import asyncio
from pathlib import Path
from dotenv import load_dotenv

# –ù–æ–≤—ã–π SDK –¥–ª—è Computer Use
from google import genai
from google.genai import types as genai_types
from google.genai.types import ComputerUse, Environment

# Browser-use Agent –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ChatGoogle wrapper –∏–∑ browser-use
from browser_use.llm.google import ChatGoogle

# –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è Computer Use –º–æ–¥–µ–ª–µ–π
from gemini_computer_agent import GeminiComputerAgent

def main():
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    print("‚úÖ API-–∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω")

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
    model_name = "gemini-2.5-computer-use-preview-10-2025"
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_name}")

    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Computer Use –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    # –î–ª—è computer-use –º–æ–¥–µ–ª–µ–π –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–µ–Ω Computer Use tool
    computer_use_config = {
        "tools": [
            {
                "computer_use": {
                    "environment": "ENVIRONMENT_BROWSER"
                }
            }
        ]
    }
    print("ÔøΩ Computer Use tool –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # 4. –°–æ–∑–¥–∞–µ–º LLM —á–µ—Ä–µ–∑ ChatGoogle –∏–∑ browser-use
    # –í–∞–∂–Ω–æ: supports_structured_output=False –¥–ª—è computer-use –º–æ–¥–µ–ª–µ–π
    llm = ChatGoogle(
        model=model_name,
        api_key=api_key,  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        config=computer_use_config,
        supports_structured_output=False,  # –û—Ç–∫–ª—é—á–∞–µ–º JSON-—Ä–µ–∂–∏–º –¥–ª—è computer-use
        temperature=0.7,
    )
    print("‚úÖ LLM —Å–æ–∑–¥–∞–Ω —Å Computer Use –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    async def run_agent_task():
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö GEMINI COMPUTER USE –ê–ì–ï–ù–¢–ê")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –∞–≥–µ–Ω—Ç –¥–ª—è Computer Use –º–æ–¥–µ–ª–µ–π
        # –û–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç tool_calls –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä—Å–∏—Ç—å JSON
        agent = GeminiComputerAgent(
            task="–û—Ç–∫—Ä–æ–π —Å–∞–π—Ç google.com –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python",
            llm=llm,
            use_vision=True,
            max_steps=10,
            output_model_schema=None,  # –ö—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º structured output!
        )
        
        print("ü§ñ GeminiComputerAgent —Å–æ–∑–¥–∞–Ω, –Ω–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...\n")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            result = await agent.run()
            
            print("\n" + "="*60)
            print("‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê")
            print("="*60)
            print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            await agent.close()
            print("\nüëã –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
    asyncio.run(run_agent_task())

if __name__ == "__main__":
    main()