"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.intelligent_agent_new import IntelligentRegistrationAgent

async def demo_interface_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à Gemini API –∫–ª—é—á
    GEMINI_API_KEY = "YOUR_GEMINI_API_KEY_HERE"
    
    if GEMINI_API_KEY == "YOUR_GEMINI_API_KEY_HERE":
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å Gemini API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GEMINI_API_KEY")
        print("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://makersuite.google.com/app/apikey")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = IntelligentRegistrationAgent(GEMINI_API_KEY)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    await agent.collect_user_data()
    
    # –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_sites = [
        "https://example.com/register",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        "https://httpbin.org/forms/post",  # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞
    ]
    
    print("\nüöÄ –ù–∞—á–∏–Ω–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    for site_url in test_sites:
        print(f"\n{'='*60}")
        print(f"üåê –¢–µ—Å—Ç–∏—Ä—É—é —Å–∞–π—Ç: {site_url}")
        print(f"{'='*60}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            success = await agent.execute(site_url)
            
            if success:
                print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ {site_url} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ {site_url} –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
            report = agent.get_registration_report()
            
            print(f"\nüìä –û—Ç—á–µ—Ç –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            print(f"  üìç –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {report['total_steps']}")
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {report['successful_steps']}")
            print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {report['failed_steps']}")
            print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['success_rate']:.1%}")
            print(f"  üåê –¢–∏–ø—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {', '.join(report['pages_visited'])}")
            
            interface_summary = report['interface_summary']
            print(f"\nüß† –°–≤–æ–¥–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:")
            print(f"  üîÑ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {interface_summary['successful_actions']}")
            print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {interface_summary['failed_actions']}")
            print(f"  üìù –ó–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {interface_summary['remembered_patterns']}")
            
            if interface_summary['last_errors']:
                print(f"  üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏: {interface_summary['last_errors']}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {site_url}: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏
        print("\n‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∞–π—Ç–æ–º...")
        await asyncio.sleep(3)
    
    print(f"\n{'='*60}")
    print("üèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"{'='*60}")

async def demo_interface_analysis_manual():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º URL"""
    
    GEMINI_API_KEY = "YOUR_GEMINI_API_KEY_HERE"
    
    if GEMINI_API_KEY == "YOUR_GEMINI_API_KEY_HERE":
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å Gemini API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GEMINI_API_KEY")
        return
    
    agent = IntelligentRegistrationAgent(GEMINI_API_KEY)
    
    print("ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("=" * 50)
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await agent.collect_user_data()
    
    while True:
        print("\nüåê –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        print("(–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        
        url = input("URL: ").strip()
        
        if url.lower() in ['quit', 'exit', 'q']:
            break
        
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {url}")
        
        try:
            success = await agent.execute(url)
            
            if success:
                print("üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report = agent.get_registration_report()
            
            print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
            for i, step in enumerate(report['steps_detail'], 1):
                action_desc = step['action'].get('description', step['action'].get('action'))
                result_status = "‚úÖ" if step['result'].success else "‚ùå"
                print(f"  {i}. {result_status} {action_desc}")
                if not step['result'].success and step['result'].errors:
                    print(f"     –û—à–∏–±–∫–∞: {step['result'].errors[0]}")
                    
        except KeyboardInterrupt:
            print("\n‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    print("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("2. –†—É—á–Ω–æ–π –≤–≤–æ–¥ URL")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        asyncio.run(demo_interface_analysis())
    elif choice == "2":
        asyncio.run(demo_interface_analysis_manual())
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
